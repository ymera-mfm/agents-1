name: "üîí Security Vulnerability"
description: Report and fix security vulnerabilities with Copilot assistance
title: "[SECURITY]: "
labels: ["security", "vulnerability", "priority-high", "copilot-task"]
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        ## üîí Security Vulnerability Report
        **‚ö†Ô∏è IMPORTANT:** If this is a critical security issue, please report it privately to security@agentflow.com instead of creating a public issue.
        
        For non-critical security improvements, provide detailed information to help Copilot implement secure solutions.

  - type: checkboxes
    id: severity-check
    attributes:
      label: "‚ö†Ô∏è Severity Acknowledgment"
      description: "Confirm this is appropriate for public disclosure"
      options:
        - label: "This is NOT a critical vulnerability requiring private disclosure"
          required: true
        - label: "I have reviewed the security reporting guidelines"
          required: true

  - type: dropdown
    id: vulnerability-type
    attributes:
      label: "üîç Vulnerability Type"
      description: "What type of security issue is this?"
      options:
        - "SQL Injection"
        - "Cross-Site Scripting (XSS)"
        - "Cross-Site Request Forgery (CSRF)"
        - "Authentication/Authorization Bypass"
        - "Insecure Direct Object References"
        - "Security Misconfiguration"
        - "Sensitive Data Exposure"
        - "XML External Entities (XXE)"
        - "Broken Access Control"
        - "Using Components with Known Vulnerabilities"
        - "Insufficient Logging & Monitoring"
        - "Server-Side Request Forgery (SSRF)"
        - "Insecure Deserialization"
        - "API Security Issue"
        - "Cryptographic Failure"
        - "Other Security Issue"
      default: 0
    validations:
      required: true

  - type: dropdown
    id: severity-level
    attributes:
      label: "üéØ Severity Level (CVSS)"
      description: "Rate the severity of this vulnerability"
      options:
        - "üî¥ Critical (9.0-10.0) - Remote code execution, full system compromise"
        - "üü† High (7.0-8.9) - Significant data breach, authentication bypass"
        - "üü° Medium (4.0-6.9) - Limited impact, requires user interaction"
        - "üü¢ Low (0.1-3.9) - Minimal impact, difficult to exploit"
      default: 1
    validations:
      required: true

  - type: textarea
    id: vulnerability-description
    attributes:
      label: "üìã Vulnerability Description"
      description: "Clear description of the security issue"
      placeholder: "SQL injection vulnerability in user search endpoint allows attackers to execute arbitrary SQL queries..."
    validations:
      required: true

  - type: textarea
    id: affected-components
    attributes:
      label: "üìÅ Affected Components"
      description: "Which files, endpoints, or features are vulnerable?"
      placeholder: |
        **Vulnerable Endpoint:**
        - `POST /api/users/search`
        
        **Affected Files:**
        - `src/controllers/user-controller.js` (line 145-160)
        - `src/repositories/user-repository.js` (line 78-95)
        
        **Affected Versions:**
        - v2.1.0 to v2.5.3 (current)
        
        **Impact Scope:**
        - All user search functionality
        - Admin panel user management
    validations:
      required: true

  - type: textarea
    id: vulnerability-details
    attributes:
      label: "üî¨ Technical Details"
      description: "Detailed technical analysis of the vulnerability"
      placeholder: |
        **Root Cause:**
        The user search function directly concatenates user input into SQL query without sanitization or parameterization.
        
        **Vulnerable Code (src/repositories/user-repository.js:85):**
        ```javascript
        async searchUsers(searchTerm) {
          const query = `SELECT * FROM users WHERE name LIKE '%${searchTerm}%'`;
          return await this.db.query(query);
        }
        ```
        
        **Attack Vector:**
        Attacker can inject SQL through the searchTerm parameter:
        ```
        searchTerm: "'; DROP TABLE users; --"
        ```
        
        **Resulting Query:**
        ```sql
        SELECT * FROM users WHERE name LIKE '%'; DROP TABLE users; --%'
        ```
        
        **Why It Works:**
        - No input validation on searchTerm
        - String concatenation instead of parameterized queries
        - No WAF or input sanitization layer
        - Database user has DROP permissions (misconfiguration)
    validations:
      required: true

  - type: textarea
    id: exploit-scenario
    attributes:
      label: "üí• Proof of Concept / Exploit Scenario"
      description: "How can this vulnerability be exploited? (Provide responsibly)"
      placeholder: |
        **Step-by-Step Exploitation:**
        1. Navigate to `/admin/users` page
        2. Enter the following in search box: `admin' OR '1'='1`
        3. All users are revealed, including admin accounts
        4. Extract sensitive data or escalate with: `'; UPDATE users SET role='admin' WHERE id=123; --`
        
        **HTTP Request:**
        ```http
        POST /api/users/search HTTP/1.1
        Host: example.com
        Content-Type: application/json
        
        {
          "searchTerm": "' OR '1'='1' --"
        }
        ```
        
        **Response:**
        ```json
        {
          "users": [
            // All users in database exposed
          ]
        }
        ```
        
        **Impact:**
        - Unauthorized access to all user records
        - Potential data exfiltration
        - Database manipulation possible
        - Admin privilege escalation
    validations:
      required: true

  - type: textarea
    id: security-impact
    attributes:
      label: "‚ö†Ô∏è Security Impact Assessment"
      description: "What are the consequences of this vulnerability?"
      value: |
        **Confidentiality Impact:**
        - [ ] User data exposure (names, emails, PII)
        - [ ] Credentials or tokens exposed
        - [ ] Business-sensitive data leaked
        
        **Integrity Impact:**
        - [ ] Data can be modified by attacker
        - [ ] System configuration can be changed
        - [ ] Database records can be deleted
        
        **Availability Impact:**
        - [ ] Service disruption possible
        - [ ] Denial of service vulnerability
        - [ ] Database can be destroyed
        
        **Business Impact:**
        - Estimated affected users: [number]
        - Compliance violations: [GDPR, HIPAA, PCI-DSS, etc.]
        - Potential data breach notification required
        - Legal/financial consequences
        - Reputation damage
    validations:
      required: true

  - type: textarea
    id: prerequisites
    attributes:
      label: "üîì Exploitation Prerequisites"
      description: "What conditions are required to exploit this?"
      placeholder: |
        **Required Access Level:**
        - Unauthenticated user (anyone can exploit)
        
        **Required Conditions:**
        - User search functionality must be enabled
        - Database must have users table
        - Network access to API endpoint
        
        **Complexity:**
        - Low - Can be exploited with basic SQL knowledge
        - Automated tools available (sqlmap)
        - No special conditions needed
    validations:
      required: true

  - type: textarea
    id: proposed-fix
    attributes:
      label: "üîß Proposed Security Fix"
      description: "How should this vulnerability be patched?"
      placeholder: |
        **Immediate Fix (Emergency Patch):**
        ```javascript
        // Use parameterized queries
        async searchUsers(searchTerm) {
          const query = 'SELECT * FROM users WHERE name LIKE ?';
          return await this.db.query(query, [`%${searchTerm}%`]);
        }
        ```
        
        **Complete Fix:**
        1. **Input Validation**
        ```javascript
        const Joi = require('joi');
        
        const searchSchema = Joi.object({
          searchTerm: Joi.string()
            .max(100)
            .pattern(/^[a-zA-Z0-9\s]+$/)
            .required()
        });
        
        async searchUsers(searchTerm) {
          const { error, value } = searchSchema.validate({ searchTerm });
          if (error) throw new ValidationError(error.message);
          
          const query = 'SELECT id, name, email FROM users WHERE name LIKE ? LIMIT 100';
          return await this.db.query(query, [`%${value.searchTerm}%`]);
        }
        ```
        
        2. **Database Security**
        - Use least-privilege database user
        - Remove DROP/ALTER permissions from application user
        - Enable query logging for auditing
        
        3. **Additional Layers**
        - Implement Web Application Firewall (WAF)
        - Add rate limiting on search endpoint
        - Implement SIEM for SQL injection detection
        - Add Content Security Policy headers
    validations:
      required: true

  - type: textarea
    id: files-to-fix
    attributes:
      label: "üìù Files Requiring Changes"
      description: "List all files that need security patches"
      placeholder: |
        **Critical Fixes:**
        - `src/repositories/user-repository.js` (parameterized queries)
        - `src/controllers/user-controller.js` (input validation)
        - `src/middleware/validation-middleware.js` (add schema)
        
        **Supporting Changes:**
        - `database/security/permissions.sql` (restrict DB user)
        - `src/config/database.js` (connection settings)
        - `src/middleware/rate-limiter.js` (add rate limiting)
        - `tests/security/sql-injection.test.js` (security tests)
        
        **Documentation:**
        - `docs/security/sql-injection-prevention.md`
        - `SECURITY.md` (update security practices)
    validations:
      required: true

  - type: textarea
    id: security-tests
    attributes:
      label: "üß™ Security Testing Requirements"
      description: "Tests needed to verify the fix and prevent regression"
      value: |
        **Security Test Cases:**
        - [ ] Test with common SQL injection payloads
        - [ ] Test with OWASP ZAP automated scanner
        - [ ] Test with sqlmap tool
        - [ ] Verify parameterized queries used everywhere
        - [ ] Test input validation rejects malicious input
        - [ ] Verify error messages don't leak database info
        - [ ] Test with Unicode and special characters
        - [ ] Verify rate limiting prevents brute force
        
        **Specific Payloads to Test:**
        ```
        ' OR '1'='1
        '; DROP TABLE users; --
        ' UNION SELECT * FROM users --
        admin'--
        ' OR 1=1 --
        '; EXEC xp_cmdshell('dir')--
        ```
        
        **Automated Security Scans:**
        - [ ] OWASP ZAP scan
        - [ ] Burp Suite scan
        - [ ] Snyk vulnerability scan
        - [ ] npm audit / yarn audit
        - [ ] SonarQube security review
    validations:
      required: true

  - type: textarea
    id: mitigation-temporary
    attributes:
      label: "üö® Temporary Mitigation (If Immediate Fix Not Possible)"
      description: "Interim measures to reduce risk until permanent fix deployed"
      placeholder: |
        **Immediate Actions:**
        - [ ] Disable user search functionality temporarily
        - [ ] Add WAF rule to block SQL injection patterns
        - [ ] Enable database query logging
        - [ ] Alert on suspicious queries
        - [ ] Restrict database user permissions
        
        **Monitoring:**
        - [ ] Set up alerts for SQL injection attempts
        - [ ] Monitor database logs for anomalies
        - [ ] Track API usage patterns
        
        **Communication:**
        - [ ] Inform security team
        - [ ] Notify affected users (if breach occurred)
        - [ ] Prepare incident response plan
    validations:
      required: false

  - type: textarea
    id: compliance-impact
    attributes:
      label: "üìã Compliance & Regulatory Impact"
      description: "Does this affect compliance requirements?"
      placeholder: |
        **Applicable Regulations:**
        - GDPR (data protection)
        - HIPAA (healthcare data)
        - PCI-DSS (payment card data)
        - SOC 2 (security controls)
        
        **Required Actions:**
        - [ ] Data breach notification required?
        - [ ] Compliance audit needed?
        - [ ] Regulatory reporting required?
        - [ ] Customer notification required?
        
        **Documentation Needed:**
        - Incident report
        - Remediation plan
        - Post-incident review
    validations:
      required: false

  - type: textarea
    id: prevention-measures
    attributes:
      label: "üõ°Ô∏è Prevention Measures"
      description: "How to prevent similar vulnerabilities in the future?"
      value: |
        **Development Practices:**
        - [ ] Mandatory security code review
        - [ ] Use ORM instead of raw SQL queries
        - [ ] Implement parameterized queries everywhere
        - [ ] Input validation on all user inputs
        - [ ] Output encoding for all data display
        
        **Security Tools:**
        - [ ] SAST (Static Application Security Testing)
        - [ ] DAST (Dynamic Application Security Testing)
        - [ ] Dependency vulnerability scanning
        - [ ] Pre-commit security hooks
        - [ ] IDE security plugins
        
        **Training:**
        - [ ] Developer security training (OWASP Top 10)
        - [ ] Secure coding guidelines documented
        - [ ] Security champions program
        - [ ] Regular security workshops
        
        **Process Improvements:**
        - [ ] Security requirements in all stories
        - [ ] Threat modeling for new features
        - [ ] Penetration testing before releases
        - [ ] Bug bounty program
    validations:
      required: true

  - type: textarea
    id: disclosure-timeline
    attributes:
      label: "üìÖ Disclosure Timeline"
      description: "Timeline for fixing and disclosing this vulnerability"
      placeholder: |
        **Emergency Patch:**
        - Day 1: Temporary mitigation deployed
        - Day 2: Emergency patch developed
        - Day 3: Patch tested and deployed to production
        
        **Complete Fix:**
        - Week 1: Comprehensive fix developed
        - Week 2: Security testing completed
        - Week 3: Deployed to all environments
        - Week 4: Public disclosure (if appropriate)
        
        **Communication:**
        - Internal: Immediate notification to security team
        - Customers: Within 72 hours if data breach
        - Public: After 90-day disclosure period
    validations:
      required: false

  - type: textarea
    id: references
    attributes:
      label: "üìö References & Resources"
      description: "Links to relevant security resources"
      placeholder: |
        **OWASP Resources:**
        - https://owasp.org/www-project-top-ten/
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
        
        **CWE References:**
        - CWE-89: SQL Injection
        
        **Similar Vulnerabilities:**
        - CVE-2023-XXXXX (reference example)
        
        **Internal Documentation:**
        - Security policy: docs/security-policy.md
        - Incident response: docs/incident-response.md
    validations:
      required: false

  - type: textarea
    id: additional-context
    attributes:
      label: "üìã Additional Context"
      description: "Any other relevant information"
      placeholder: |
        - Discovered during security audit on 2025-10-20
        - Similar issue found and fixed in #789
        - Part of broader security hardening initiative
        - External security researcher reported (credit: John Doe)
    validations:
      required: false

  - type: checkboxes
    id: security-checklist
    attributes:
      label: "‚úÖ Security Fix Checklist"
      description: "Ensure all security measures are addressed"
      options:
        - label: "Vulnerability fully understood and documented"
        - label: "Proposed fix addresses root cause"
        - label: "Security tests written to verify fix"
        - label: "Fix reviewed by security team"
        - label: "Regression tests ensure no functionality broken"
        - label: "Prevention measures identified"
        - label: "Similar vulnerabilities checked across codebase"
        - label: "Security scanning tools updated"
        - label: "Documentation updated with secure coding practices"
