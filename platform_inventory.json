{
  "summary": {
    "total_files": 321,
    "total_lines": 134794,
    "categories": {
      "core": 190,
      "agents": 78,
      "engines": 15,
      "utilities": 15,
      "testing": 7,
      "middleware": 9,
      "deployment": 3,
      "api": 4
    },
    "scan_date": "2025-10-19T22:27:10.192445",
    "orphaned_files": 205,
    "missing_tests": 280
  },
  "components": {
    "core": [
      {
        "name": "prod_agent_manager",
        "path": "prod_agent_manager.py",
        "purpose": "Prod Agent Manager",
        "dependencies": [
          "pydantic",
          "circuitbreaker",
          "asyncio",
          "sqlalchemy.pool",
          "sqlalchemy.exc",
          "dataclasses",
          "structlog",
          "typing",
          "datetime",
          "shared.security.encryption",
          "logging",
          "sqlalchemy",
          "contextlib",
          "shared.utils.cache_manager",
          "shared.utils.message_broker",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "secrets",
          "json",
          "core.models",
          "tenacity",
          "uuid",
          "enum",
          "time",
          "shared.database.models",
          "functools"
        ],
        "public_api": [
          "AgentManagerConfig",
          "AgentRegistrationRequest",
          "AgentReportRequest",
          "AgentManagerMetrics",
          "RateLimiter",
          "CircuitBreakerState",
          "CircuitBreaker",
          "HealthMonitor",
          "ProductionAgentManager",
          "Config",
          "retry_on_db_error",
          "measure_operation",
          "validate_agent_id",
          "validate_capabilities",
          "validate_metrics",
          "decorator",
          "register_check"
        ],
        "state": "complete",
        "loc": 1156,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentManagerConfig",
          "AgentRegistrationRequest",
          "AgentReportRequest",
          "AgentManagerMetrics",
          "RateLimiter",
          "CircuitBreakerState",
          "CircuitBreaker",
          "HealthMonitor",
          "ProductionAgentManager",
          "Config"
        ],
        "functions": [
          "retry_on_db_error",
          "measure_operation",
          "validate_agent_id",
          "validate_capabilities",
          "validate_metrics",
          "decorator",
          "register_check"
        ]
      },
      {
        "name": "integration",
        "path": "integration.py",
        "purpose": "Add database system to path",
        "dependencies": [
          "pathlib",
          "os",
          "sys",
          "database_core_integrated"
        ],
        "public_api": [
          "UnifiedDatabaseManager",
          "DATABASE_AVAILABLE",
          "DatabaseConfig"
        ],
        "state": "complete",
        "loc": 64,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UnifiedDatabaseManager"
        ],
        "functions": []
      },
      {
        "name": "ai_agents_production",
        "path": "ai_agents_production.py",
        "purpose": "Ai Agents Production",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "time",
          "hashlib",
          "asyncio",
          "anthropic",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AgentType",
          "ConfidenceLevel",
          "PriorityLevel",
          "AgentResponse",
          "LearningPattern",
          "AgentLearningManager",
          "AIAgent",
          "AIAgentOrchestrator",
          "to_dict",
          "to_dict",
          "get_metrics",
          "get_agent",
          "get_system_metrics"
        ],
        "state": "complete",
        "loc": 895,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentType",
          "ConfidenceLevel",
          "PriorityLevel",
          "AgentResponse",
          "LearningPattern",
          "AgentLearningManager",
          "AIAgent",
          "AIAgentOrchestrator"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "get_metrics",
          "get_agent",
          "get_system_metrics"
        ]
      },
      {
        "name": "models",
        "path": "models.py",
        "purpose": "Models",
        "dependencies": [
          "re",
          "pydantic",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "User",
          "Experience",
          "KnowledgeItem",
          "Config",
          "validate_email",
          "validate_feedback"
        ],
        "state": "complete",
        "loc": 46,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "User",
          "Experience",
          "KnowledgeItem",
          "Config"
        ],
        "functions": [
          "validate_email",
          "validate_feedback"
        ]
      },
      {
        "name": "file_handler",
        "path": "file_handler.py",
        "purpose": "File Handler",
        "dependencies": [
          "structlog",
          "hashlib",
          "pathlib",
          "shared.config.settings",
          "typing",
          "datetime",
          "mimetypes"
        ],
        "public_api": [
          "FileHandler"
        ],
        "state": "complete",
        "loc": 104,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FileHandler"
        ],
        "functions": []
      },
      {
        "name": "read_replica_config",
        "path": "read_replica_config.py",
        "purpose": "Read Replica Config",
        "dependencies": [
          "logging",
          "sqlalchemy.orm",
          "enum",
          "sqlalchemy",
          "random",
          "os",
          "sqlalchemy.pool",
          "typing"
        ],
        "public_api": [
          "DatabaseType",
          "LoadBalancingStrategy",
          "ReadReplicaManager",
          "DatabaseRouter",
          "ShardingManager",
          "create_replica_setup",
          "initialize",
          "get_write_session",
          "get_read_session",
          "health_check",
          "dispose",
          "session",
          "get_shard_for_key",
          "get_session",
          "broadcast_query",
          "dispose",
          "receive_after_commit_rollback"
        ],
        "state": "complete",
        "loc": 271,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DatabaseType",
          "LoadBalancingStrategy",
          "ReadReplicaManager",
          "DatabaseRouter",
          "ShardingManager"
        ],
        "functions": [
          "create_replica_setup",
          "initialize",
          "get_write_session",
          "get_read_session",
          "health_check",
          "dispose",
          "session",
          "get_shard_for_key",
          "get_session",
          "broadcast_query",
          "dispose",
          "receive_after_commit_rollback"
        ]
      },
      {
        "name": "production_intelligence_engine",
        "path": "production_intelligence_engine.py",
        "purpose": "Production Intelligence Engine",
        "dependencies": [
          "json",
          "enum",
          "time",
          "asyncio",
          "os",
          "collections",
          "typing",
          "numpy",
          "dataclasses",
          "base_agent",
          "datetime"
        ],
        "public_api": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "state": "complete",
        "loc": 528,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "functions": []
      },
      {
        "name": "backup_manager",
        "path": "backup_manager.py",
        "purpose": "Backup Manager",
        "dependencies": [
          "json",
          "database_core_integrated",
          "hashlib",
          "asyncio",
          "pathlib",
          "os",
          "shutil",
          "typing",
          "uuid",
          "subprocess",
          "datetime",
          "dataclasses",
          "argparse",
          "gzip"
        ],
        "public_api": [
          "BackupMetadata",
          "BackupManager",
          "to_dict",
          "from_dict"
        ],
        "state": "complete",
        "loc": 338,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "BackupMetadata",
          "BackupManager"
        ],
        "functions": [
          "to_dict",
          "from_dict"
        ]
      },
      {
        "name": "production_specialized_engines",
        "path": "production_specialized_engines.py",
        "purpose": "Production Specialized Engines",
        "dependencies": [
          "json",
          "enum",
          "time",
          "asyncio",
          "statistics",
          "os",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "psutil",
          "base_agent",
          "gc"
        ],
        "public_api": [
          "MetricSeverity",
          "PerformanceAlert",
          "PerformanceEngineAgent",
          "OptimizationEngineAgent",
          "AnalysisEngineAgent"
        ],
        "state": "complete",
        "loc": 659,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricSeverity",
          "PerformanceAlert",
          "PerformanceEngineAgent",
          "OptimizationEngineAgent",
          "AnalysisEngineAgent"
        ],
        "functions": []
      },
      {
        "name": "tests.unit.test_models",
        "path": "tests.unit.test_models.py",
        "purpose": "tests/unit/test_models.py",
        "dependencies": [
          "src.models.user",
          "src.models.task",
          "src.models.project",
          "pytest",
          "datetime"
        ],
        "public_api": [
          "TestUserModel",
          "TestProjectModel",
          "TestTaskModel",
          "test_user_creation",
          "test_user_to_dict",
          "test_project_creation",
          "test_project_risk_assessment",
          "test_task_creation"
        ],
        "state": "complete",
        "loc": 66,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestUserModel",
          "TestProjectModel",
          "TestTaskModel"
        ],
        "functions": [
          "test_user_creation",
          "test_user_to_dict",
          "test_project_creation",
          "test_project_risk_assessment",
          "test_task_creation"
        ]
      },
      {
        "name": "report_generator",
        "path": "report_generator.py",
        "purpose": "Report Generator",
        "dependencies": [
          "logging",
          "json",
          "database",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ReportGenerator"
        ],
        "state": "complete",
        "loc": 198,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ReportGenerator"
        ],
        "functions": []
      },
      {
        "name": "monitoring",
        "path": "monitoring.py",
        "purpose": "Monitoring",
        "dependencies": [
          "logging",
          "asyncio",
          "typing",
          "prometheus_client",
          "datetime"
        ],
        "public_api": [
          "MonitoringService"
        ],
        "state": "complete",
        "loc": 105,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MonitoringService"
        ],
        "functions": []
      },
      {
        "name": "test_database",
        "path": "test_database.py",
        "purpose": "Add parent directory to path",
        "dependencies": [
          "sqlalchemy.orm",
          "sqlalchemy",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "DATABASE_CORE",
          "traceback"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 382,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "ymera_api_system",
        "path": "ymera_api_system.py",
        "purpose": "Third-party imports",
        "dependencies": [
          "pydantic",
          "models.user",
          "asyncio",
          "anthropic",
          "structlog",
          "typing",
          "datetime",
          "openai",
          "logging",
          "database.base",
          "groq",
          "sqlalchemy",
          "contextlib",
          "sqlalchemy.ext.asyncio",
          "google.generativeai",
          "json",
          "aioredis",
          "sqlalchemy.dialects.postgresql",
          "fastapi",
          "uuid",
          "security.jwt_handler",
          "enum",
          "time",
          "database.connection",
          "base64",
          "aiohttp",
          "config.settings",
          "hashlib",
          "dataclasses",
          "fastapi.responses"
        ],
        "public_api": [
          "router",
          "ProviderManager",
          "AIProvider",
          "ProviderConfig",
          "AIRequest",
          "AIResponse"
        ],
        "state": "complete",
        "loc": 1312,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AIProvider",
          "ProviderStatus",
          "APIKeyType",
          "ProviderConfig",
          "MCPConfig",
          "ProviderRegistration",
          "MCPRegistration",
          "AIRequest",
          "AIResponse",
          "ProviderHealthCheck",
          "UserProviderConfig",
          "UserMCPConfig",
          "APIUsageLog",
          "BaseProviderClient",
          "OpenAIClient",
          "AnthropicClient",
          "GeminiClient",
          "GroqClient",
          "DeepSeekClient",
          "AzureOpenAIClient",
          "OllamaClient",
          "MistralClient",
          "MCPClient",
          "ProviderManager",
          "Config"
        ],
        "functions": []
      },
      {
        "name": "llm_agent",
        "path": "llm_agent.py",
        "purpose": "Llm Agent",
        "dependencies": [
          "asyncio",
          "anthropic",
          "typing",
          "openai",
          "tiktoken",
          "opentelemetry",
          "qdrant_client.http.models",
          "sentence_transformers",
          "re",
          "qdrant_client",
          "json",
          "os",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "hashlib",
          "numpy",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "LLMProvider",
          "MessageRole",
          "ConversationMessage",
          "ConversationMemory",
          "RAGDocument",
          "LLMConfig",
          "LLMAgent"
        ],
        "state": "incomplete",
        "loc": 656,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LLMProvider",
          "MessageRole",
          "ConversationMessage",
          "ConversationMemory",
          "RAGDocument",
          "LLMConfig",
          "LLMAgent"
        ],
        "functions": []
      },
      {
        "name": "static_analysis_prod",
        "path": "static_analysis_prod.py",
        "purpose": "Static Analysis Prod",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "contextlib",
          "hashlib",
          "asyncio",
          "ast",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "AnalysisType",
          "Severity",
          "Finding",
          "AnalysisResult",
          "StaticAnalysisRule",
          "StaticAnalysisAgent",
          "to_dict",
          "to_dict"
        ],
        "state": "incomplete",
        "loc": 1284,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AnalysisType",
          "Severity",
          "Finding",
          "AnalysisResult",
          "StaticAnalysisRule",
          "StaticAnalysisAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "quickstart",
        "path": "quickstart.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "DATABASE_CORE",
          "traceback"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 132,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "chat_handler",
        "path": "chat_handler.py",
        "purpose": "Chat Handler",
        "dependencies": [
          "shared.database.connection_pool",
          "asyncio",
          "typing",
          "shared.config.settings",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "ChatHandler"
        ],
        "state": "complete",
        "loc": 71,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ChatHandler"
        ],
        "functions": []
      },
      {
        "name": "tests.performance.test_load",
        "path": "tests.performance.test_load.py",
        "purpose": "tests/performance/test_load.py",
        "dependencies": [
          "json",
          "asyncio",
          "locust",
          "pytest",
          "datetime"
        ],
        "public_api": [
          "YmeraLoadTest",
          "on_start",
          "test_get_projects",
          "test_create_project",
          "test_get_tasks",
          "test_create_task"
        ],
        "state": "complete",
        "loc": 65,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "YmeraLoadTest"
        ],
        "functions": [
          "on_start",
          "test_get_projects",
          "test_create_project",
          "test_get_tasks",
          "test_create_task"
        ]
      },
      {
        "name": "batch_processor",
        "path": "batch_processor.py",
        "purpose": "Batch Processor",
        "dependencies": [
          "asyncio",
          "dataclasses",
          "structlog",
          "typing"
        ],
        "public_api": [
          "BatchConfig",
          "BatchProcessor"
        ],
        "state": "complete",
        "loc": 114,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "BatchConfig",
          "BatchProcessor"
        ],
        "functions": []
      },
      {
        "name": "learning-agent-security",
        "path": "learning-agent-security.py",
        "purpose": "security/vault_manager.py",
        "dependencies": [
          "cryptography.hazmat.backends",
          "asyncio",
          "prometheus_client.exposition",
          "sqlalchemy.pool",
          "typing",
          "datetime",
          "psutil",
          "logging",
          "transformers",
          "sqlalchemy",
          "contextlib",
          "hvac",
          "sqlalchemy.ext.asyncio",
          "prometheus_client",
          "secrets",
          "json",
          "redis.asyncio",
          "os",
          "base64",
          "torch",
          "cryptography.hazmat.primitives.kdf.pbkdf2",
          "torch.nn",
          "cryptography.hazmat.primitives",
          "cryptography.hazmat.primitives.ciphers"
        ],
        "public_api": [
          "VaultManager",
          "EnhancedEncryptionService",
          "DatabasePool",
          "RedisManager",
          "BaseModel",
          "TransformerModel",
          "KnowledgeExtractionModel",
          "ModelFactory",
          "AdvancedMetrics",
          "forward",
          "register_model_type",
          "set_sqlite_pragma"
        ],
        "state": "complete",
        "loc": 711,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "VaultManager",
          "EnhancedEncryptionService",
          "DatabasePool",
          "RedisManager",
          "BaseModel",
          "TransformerModel",
          "KnowledgeExtractionModel",
          "ModelFactory",
          "AdvancedMetrics"
        ],
        "functions": [
          "forward",
          "register_model_type",
          "set_sqlite_pragma"
        ]
      },
      {
        "name": "logger",
        "path": "logger.py",
        "purpose": "Logger",
        "dependencies": [
          "pythonjsonlogger",
          "logging",
          "sys",
          "typing"
        ],
        "public_api": [
          "CustomJsonFormatter",
          "setup_logging",
          "add_fields"
        ],
        "state": "complete",
        "loc": 52,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CustomJsonFormatter"
        ],
        "functions": [
          "setup_logging",
          "add_fields"
        ]
      },
      {
        "name": "connection_manager",
        "path": "connection_manager.py",
        "purpose": "websocket/connection_manager.py",
        "dependencies": [
          "logging",
          "json",
          "asyncio",
          "fastapi",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ConnectionManager"
        ],
        "state": "complete",
        "loc": 209,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ConnectionManager"
        ],
        "functions": []
      },
      {
        "name": "001_initial_schema",
        "path": "001_initial_schema.py",
        "purpose": "001 Initial Schema",
        "dependencies": [
          "sqlalchemy.ext.asyncio",
          "sqlalchemy",
          "database_core_integrated"
        ],
        "public_api": [
          "Migration"
        ],
        "state": "complete",
        "loc": 406,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Migration"
        ],
        "functions": []
      },
      {
        "name": "settings",
        "path": "settings.py",
        "purpose": "Application",
        "dependencies": [
          "pydantic",
          "pydantic_settings",
          "os",
          "typing"
        ],
        "public_api": [
          "Settings",
          "Config",
          "parse_cors_origins",
          "parse_kafka_servers",
          "parse_api_keys",
          "parse_allowed_extensions"
        ],
        "state": "complete",
        "loc": 173,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Settings",
          "Config"
        ],
        "functions": [
          "parse_cors_origins",
          "parse_kafka_servers",
          "parse_api_keys",
          "parse_allowed_extensions"
        ]
      },
      {
        "name": "agent_manager_integrated (1)",
        "path": "agent_manager_integrated (1).py",
        "purpose": "Agent Manager Integrated (1)",
        "dependencies": [
          "agent_surveillance",
          "logging",
          "enum",
          "monitoring.telemetry_manager",
          "agent_lifecycle_manager",
          "agent_code_of_conduct",
          "ai.multi_modal_ai",
          "agent_orchestrator",
          "asyncio",
          "monitoring.alert_manager",
          "security.rbac_manager",
          "typing",
          "datetime",
          "config",
          "database.secure_database_manager"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 235,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "log_manager",
        "path": "log_manager.py",
        "purpose": "Log Manager",
        "dependencies": [
          "logging",
          "json",
          "asyncio",
          "pathlib",
          "collections",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ProjectLogManager"
        ],
        "state": "complete",
        "loc": 852,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProjectLogManager"
        ],
        "functions": []
      },
      {
        "name": "env",
        "path": "env.py",
        "purpose": "this is the Alembic Config object, which provides",
        "dependencies": [
          "core.sqlalchemy_models",
          "sqlalchemy",
          "asyncio",
          "alembic",
          "logging.config",
          "sqlalchemy.ext.asyncio"
        ],
        "public_api": [
          "run_migrations_offline",
          "run_migrations_online",
          "do_run_migrations"
        ],
        "state": "complete",
        "loc": 61,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "run_migrations_offline",
          "run_migrations_online",
          "do_run_migrations"
        ]
      },
      {
        "name": "production_base_agent",
        "path": "production_base_agent.py",
        "purpose": "Production Base Agent",
        "dependencies": [
          "nats",
          "asyncio",
          "typing",
          "datetime",
          "logging",
          "contextlib",
          "opentelemetry",
          "asyncpg.pool",
          "opentelemetry.sdk.metrics",
          "json",
          "opentelemetry.sdk.trace",
          "redis.asyncio",
          "opentelemetry.exporter.prometheus",
          "opentelemetry.sdk.trace.export",
          "uuid",
          "asyncpg",
          "nats.errors",
          "abc",
          "enum",
          "time",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "AgentState",
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "TaskResult",
          "BaseAgent",
          "AgentMetrics",
          "to_dict",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 536,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentState",
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "TaskResult",
          "BaseAgent",
          "AgentMetrics"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "db_monitoring",
        "path": "db_monitoring.py",
        "purpose": "Db Monitoring",
        "dependencies": [
          "logging",
          "json",
          "asyncio",
          "smtplib",
          "email.mime.text",
          "pathlib",
          "email.mime.multipart",
          "fastapi",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 489,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "learning_agent",
        "path": "learning_agent.py",
        "purpose": "Learning Agent",
        "dependencies": [
          "json",
          "structlog",
          "shared.database.connection_pool",
          "sqlalchemy",
          "shared.communication.agent_communicator",
          "asyncio",
          "pathlib",
          "sqlalchemy.ext.asyncio",
          "shared.config.settings",
          "typing",
          "shared.utils.metrics",
          "datetime",
          "numpy"
        ],
        "public_api": [
          "KnowledgeExtractor",
          "KnowledgeStore",
          "KnowledgeSharer",
          "LearningEngine",
          "LearningAgent",
          "is_ready"
        ],
        "state": "complete",
        "loc": 509,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeExtractor",
          "KnowledgeStore",
          "KnowledgeSharer",
          "LearningEngine",
          "LearningAgent"
        ],
        "functions": [
          "is_ready"
        ]
      },
      {
        "name": "__init__",
        "path": "__init__.py",
        "purpose": "Conditional imports to avoid breaking tests",
        "dependencies": [
          "agent"
        ],
        "public_api": [
          "__version__"
        ],
        "state": "complete",
        "loc": 12,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "performance_engine",
        "path": "performance_engine.py",
        "purpose": "Performance Engine",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "time",
          "asyncio",
          "statistics",
          "os",
          "collections",
          "opentelemetry",
          "random",
          "asyncpg",
          "typing",
          "numpy",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "PerformanceMetricType",
          "PerformanceIssueSeverity",
          "PerformanceMetric",
          "PerformanceIssue",
          "ServicePerformanceSummary",
          "PerformanceEngineAgent",
          "MockMsg"
        ],
        "state": "complete",
        "loc": 698,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceMetricType",
          "PerformanceIssueSeverity",
          "PerformanceMetric",
          "PerformanceIssue",
          "ServicePerformanceSummary",
          "PerformanceEngineAgent",
          "MockMsg"
        ],
        "functions": []
      },
      {
        "name": "learning_agent_database",
        "path": "learning_agent_database.py",
        "purpose": "============================================================================",
        "dependencies": [
          "json",
          "sqlalchemy.orm",
          "redis.asyncio",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "uuid",
          "typing",
          "sqlalchemy.ext.asyncio",
          "datetime"
        ],
        "public_api": [
          "Agent",
          "Knowledge",
          "LearningSessionDB",
          "ChatMessageDB",
          "PerformanceMetric",
          "DatabaseManager",
          "DatabaseIntegratedLearningAgent"
        ],
        "state": "complete",
        "loc": 475,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Agent",
          "Knowledge",
          "LearningSessionDB",
          "ChatMessageDB",
          "PerformanceMetric",
          "DatabaseManager",
          "DatabaseIntegratedLearningAgent"
        ],
        "functions": []
      },
      {
        "name": "base_agent 2",
        "path": "base_agent 2.py",
        "purpose": "Base Agent 2",
        "dependencies": [
          "logging",
          "enum",
          "time",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "BaseAgent"
        ],
        "state": "complete",
        "loc": 69,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "BaseAgent"
        ],
        "functions": []
      },
      {
        "name": "security_agent",
        "path": "security_agent.py",
        "purpose": "Security Agent",
        "dependencies": [
          "cryptography.hazmat.primitives.asymmetric",
          "hmac",
          "asyncio",
          "typing",
          "datetime",
          "cryptography.fernet",
          "opentelemetry",
          "secrets",
          "jwt",
          "re",
          "json",
          "aioredis",
          "os",
          "uuid",
          "ipaddress",
          "base_agent",
          "enum",
          "time",
          "base64",
          "cryptography.hazmat.primitives.kdf.pbkdf2",
          "cryptography.hazmat.primitives",
          "hashlib",
          "bcrypt",
          "dataclasses"
        ],
        "public_api": [
          "SecurityLevel",
          "ThreatType",
          "AuthMethod",
          "SecurityEvent",
          "AuthToken",
          "SecurityPolicy",
          "SecurityAgent"
        ],
        "state": "complete",
        "loc": 963,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SecurityLevel",
          "ThreatType",
          "AuthMethod",
          "SecurityEvent",
          "AuthToken",
          "SecurityPolicy",
          "SecurityAgent"
        ],
        "functions": []
      },
      {
        "name": "user",
        "path": "user.py",
        "purpose": "User",
        "dependencies": [
          "re",
          "enum",
          "pydantic",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "UserRole",
          "User",
          "Config",
          "validate_email"
        ],
        "state": "complete",
        "loc": 31,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UserRole",
          "User",
          "Config"
        ],
        "functions": [
          "validate_email"
        ]
      },
      {
        "name": "workflow_manager",
        "path": "workflow_manager.py",
        "purpose": "workflow_manager.py - Complete workflow management system",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "networkx",
          "async_timeout",
          "models",
          "pydantic",
          "asyncio",
          "uuid",
          "typing",
          "security.rbac_manager",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "WorkflowStatus",
          "StepStatus",
          "StepType",
          "WorkflowPriority",
          "WorkflowMetrics",
          "WorkflowManager",
          "register_hook"
        ],
        "state": "complete",
        "loc": 1163,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "WorkflowStatus",
          "StepStatus",
          "StepType",
          "WorkflowPriority",
          "WorkflowMetrics",
          "WorkflowManager"
        ],
        "functions": [
          "register_hook"
        ]
      },
      {
        "name": "production_monitoring_agent",
        "path": "production_monitoring_agent.py",
        "purpose": "Production Monitoring Agent",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "time",
          "enhanced_base_agent",
          "aiohttp",
          "asyncio",
          "statistics",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "psutil"
        ],
        "public_api": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "RealTimeMonitoringAgent",
          "to_dict",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 1514,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "RealTimeMonitoringAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "ServiceRegistry",
        "path": "ServiceRegistry.py",
        "purpose": "Service Discovery and Configuration",
        "dependencies": [
          "io",
          "boto3",
          "consul",
          "elasticsearch",
          "azure.storage.blob"
        ],
        "public_api": [
          "ServiceRegistry",
          "MicroService",
          "AuthenticationService",
          "ProjectManagementService",
          "TaskOrchestrationService",
          "FileManagementService",
          "NotificationService",
          "AuditService",
          "AnalyticsService",
          "IntegrationService",
          "init_consul",
          "init_workers"
        ],
        "state": "complete",
        "loc": 416,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ServiceRegistry",
          "MicroService",
          "AuthenticationService",
          "ProjectManagementService",
          "TaskOrchestrationService",
          "FileManagementService",
          "NotificationService",
          "AuditService",
          "AnalyticsService",
          "IntegrationService"
        ],
        "functions": [
          "init_consul",
          "init_workers"
        ]
      },
      {
        "name": "insight_generator",
        "path": "insight_generator.py",
        "purpose": "Insight Generator",
        "dependencies": [
          "models",
          "structlog",
          "sqlalchemy",
          "collections",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "InsightGenerator"
        ],
        "state": "complete",
        "loc": 557,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "InsightGenerator"
        ],
        "functions": []
      },
      {
        "name": "live_chatting_manager",
        "path": "live_chatting_manager.py",
        "purpose": "Live Chatting Manager",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "websockets",
          "time",
          "aiohttp",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "opentelemetry",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "ChatSessionStatus",
          "MessageType",
          "SessionType",
          "ChatMessage",
          "ChatSession",
          "UserConnection",
          "LiveChattingManager"
        ],
        "state": "complete",
        "loc": 1076,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ChatSessionStatus",
          "MessageType",
          "SessionType",
          "ChatMessage",
          "ChatSession",
          "UserConnection",
          "LiveChattingManager"
        ],
        "functions": []
      },
      {
        "name": "conftest",
        "path": "conftest.py",
        "purpose": "Conftest",
        "dependencies": [
          "core.config",
          "httpx",
          "core.database",
          "asyncio",
          "os",
          "main",
          "typing",
          "pytest"
        ],
        "public_api": [
          "event_loop",
          "test_settings",
          "sample_code",
          "sample_metadata"
        ],
        "state": "complete",
        "loc": 56,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "event_loop",
          "test_settings",
          "sample_code",
          "sample_metadata"
        ]
      },
      {
        "name": "router",
        "path": "router.py",
        "purpose": "Request/Response Models",
        "dependencies": [
          "json",
          "structlog",
          "io",
          "pydantic",
          "fastapi",
          "typing",
          "datetime",
          "fastapi.responses"
        ],
        "public_api": [
          "AgentSubmission",
          "KnowledgeSubmission",
          "ChatMessage",
          "KnowledgeRequest"
        ],
        "state": "complete",
        "loc": 198,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentSubmission",
          "KnowledgeSubmission",
          "ChatMessage",
          "KnowledgeRequest"
        ],
        "functions": []
      },
      {
        "name": "example_agent",
        "path": "example_agent.py",
        "purpose": "example_agent.py - Example implementation of an agent",
        "dependencies": [
          "asyncio",
          "logging",
          "agent_client"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 50,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "agent_lifecycle_manager",
        "path": "agent_lifecycle_manager.py",
        "purpose": "lifecycle/agent_lifecycle_manager.py",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "models",
          "monitoring.telemetry_manager",
          "sqlalchemy",
          "asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AgentLifecycleManager"
        ],
        "state": "complete",
        "loc": 256,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentLifecycleManager"
        ],
        "functions": []
      },
      {
        "name": "agent_manager_production",
        "path": "agent_manager_production.py",
        "purpose": "Agent Manager Production",
        "dependencies": [
          "fastapi.security",
          "fastapi.middleware.cors",
          "pydantic",
          "cryptography.hazmat.backends",
          "asyncio",
          "typing",
          "monitoring.alert_manager",
          "datetime",
          "cryptography.fernet",
          "logging",
          "sqlalchemy.orm",
          "performance.scaling_manager",
          "performance.caching_manager",
          "security.zero_trust_complete",
          "sqlalchemy",
          "security.advanced_authentication",
          "opentelemetry",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "opentelemetry.exporter.jaeger.thrift",
          "secrets",
          "jwt",
          "json",
          "opentelemetry.sdk.trace",
          "redis.asyncio",
          "opentelemetry.sdk.trace.export",
          "fastapi",
          "os",
          "uuid",
          "asyncpg",
          "passlib.context",
          "enum",
          "opentelemetry.sdk.resources",
          "opentelemetry.semconv.resource",
          "time",
          "base64",
          "monitoring.telemetry_manager",
          "cryptography.hazmat.primitives.kdf.pbkdf2",
          "performance.queue_manager",
          "monitoring.predictive_analytics",
          "cryptography.hazmat.primitives",
          "security.compliance_manager",
          "hashlib",
          "signal",
          "dataclasses",
          "traceback",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "deprecated",
        "loc": 1276,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "PerformanceMonitor",
        "path": "PerformanceMonitor.py",
        "purpose": "Performance monitoring",
        "dependencies": [],
        "public_api": [
          "PerformanceMonitor",
          "SecurityMetrics",
          "BusinessMetrics"
        ],
        "state": "complete",
        "loc": 104,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceMonitor",
          "SecurityMetrics",
          "BusinessMetrics"
        ],
        "functions": []
      },
      {
        "name": "alembic_setup",
        "path": "alembic_setup.py",
        "purpose": "Add project root to path",
        "dependencies": [
          "app.models",
          "app.database",
          "sqlalchemy",
          "pathlib",
          "alembic",
          "os",
          "sys",
          "logging.config"
        ],
        "public_api": [
          "get_url",
          "run_migrations_offline",
          "run_migrations_online"
        ],
        "state": "complete",
        "loc": 65,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "get_url",
          "run_migrations_offline",
          "run_migrations_online"
        ]
      },
      {
        "name": "tests.unit.test_services",
        "path": "tests.unit.test_services.py",
        "purpose": "tests/unit/test_services.py",
        "dependencies": [
          "unittest.mock",
          "src.models.task",
          "src.models.project",
          "src.services.project_service",
          "src.services.task_service",
          "pytest"
        ],
        "public_api": [
          "TestProjectService",
          "TestTaskService"
        ],
        "state": "complete",
        "loc": 99,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestProjectService",
          "TestTaskService"
        ],
        "functions": []
      },
      {
        "name": "task_routes",
        "path": "task_routes.py",
        "purpose": "api/task_routes.py",
        "dependencies": [
          "models",
          "services",
          "fastapi",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 134,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "unified_system",
        "path": "unified_system.py",
        "purpose": "Unified System",
        "dependencies": [
          "logging",
          "structlog",
          "learning_agent.agent",
          "project_agent.agent",
          "asyncio",
          "signal",
          "pathlib",
          "sys",
          "agent_manager.agent",
          "typing",
          "prometheus_client",
          "datetime",
          "base_agent"
        ],
        "public_api": [
          "UnifiedAgentSystem",
          "GenericAgent",
          "signal_handler"
        ],
        "state": "complete",
        "loc": 761,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UnifiedAgentSystem",
          "GenericAgent"
        ],
        "functions": [
          "signal_handler"
        ]
      },
      {
        "name": "tests.e2e.test_user_journeys",
        "path": "tests.e2e.test_user_journeys.py",
        "purpose": "tests/e2e/test_user_journeys.py",
        "dependencies": [
          "fastapi",
          "pytest",
          "asyncio",
          "datetime"
        ],
        "public_api": [
          "TestUserRegistrationJourney",
          "TestPerformanceJourney"
        ],
        "state": "complete",
        "loc": 102,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestUserRegistrationJourney",
          "TestPerformanceJourney"
        ],
        "functions": []
      },
      {
        "name": "cache_manager",
        "path": "cache_manager.py",
        "purpose": "Cache Manager",
        "dependencies": [
          "json",
          "pickle",
          "enum",
          "structlog",
          "redis.asyncio",
          "hashlib",
          "asyncio",
          "typing",
          "datetime",
          "functools"
        ],
        "public_api": [
          "CacheStrategy",
          "MultiLevelCache",
          "cached",
          "initialize_cache",
          "get_cache_manager",
          "get_stats",
          "reset_stats",
          "decorator"
        ],
        "state": "complete",
        "loc": 308,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CacheStrategy",
          "MultiLevelCache"
        ],
        "functions": [
          "cached",
          "initialize_cache",
          "get_cache_manager",
          "get_stats",
          "reset_stats",
          "decorator"
        ]
      },
      {
        "name": "sqlalchemy_models",
        "path": "sqlalchemy_models.py",
        "purpose": "Sqlalchemy Models",
        "dependencies": [
          "sqlalchemy.orm",
          "enum",
          "sqlalchemy",
          "uuid",
          "datetime"
        ],
        "public_api": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task"
        ],
        "state": "complete",
        "loc": 69,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task"
        ],
        "functions": []
      },
      {
        "name": "ZeroTrustConfig",
        "path": "ZeroTrustConfig.py",
        "purpose": "Enhanced security configuration",
        "dependencies": [],
        "public_api": [
          "ZeroTrustConfig",
          "Permission",
          "UserRecord",
          "AdvancedAuthUtils",
          "generate_rsa_jwt",
          "verify_rsa_jwt",
          "permission_checker"
        ],
        "state": "complete",
        "loc": 251,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ZeroTrustConfig",
          "Permission",
          "UserRecord",
          "AdvancedAuthUtils"
        ],
        "functions": [
          "generate_rsa_jwt",
          "verify_rsa_jwt",
          "permission_checker"
        ]
      },
      {
        "name": "enhanced_agent_lifecycle",
        "path": "enhanced_agent_lifecycle.py",
        "purpose": "Enhanced Agent Lifecycle",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "monitoring.telemetry_manager",
          "pydantic",
          "sqlalchemy",
          "models.secure_models",
          "asyncio",
          "monitoring.alert_manager",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "security.rbac_manager",
          "datetime",
          "config",
          "database.secure_database_manager"
        ],
        "public_api": [
          "AgentStatus",
          "AgentHealthStatus",
          "AgentRegistrationRequest",
          "AgentMetricsSnapshot",
          "AgentLifecycleManager",
          "validate_capabilities"
        ],
        "state": "complete",
        "loc": 665,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "AgentHealthStatus",
          "AgentRegistrationRequest",
          "AgentMetricsSnapshot",
          "AgentLifecycleManager"
        ],
        "functions": [
          "validate_capabilities"
        ]
      },
      {
        "name": "file",
        "path": "file.py",
        "purpose": "File",
        "dependencies": [
          "pydantic",
          "datetime",
          "uuid",
          "typing"
        ],
        "public_api": [
          "FileMetadata",
          "FileVersion"
        ],
        "state": "complete",
        "loc": 33,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FileMetadata",
          "FileVersion"
        ],
        "functions": []
      },
      {
        "name": "fastapi_integration",
        "path": "fastapi_integration.py",
        "purpose": "Import our modules",
        "dependencies": [
          "logging",
          "fastapi.middleware.cors",
          "sqlalchemy.orm",
          "app.database",
          "app.backup_recovery",
          "contextlib",
          "app.query_optimization",
          "uvicorn",
          "asyncio",
          "fastapi",
          "app.migration_manager",
          "os",
          "app.read_replica_config",
          "app.db_monitoring",
          "typing"
        ],
        "public_api": [
          "setup_query_monitoring",
          "setup_backup_manager",
          "get_database_session"
        ],
        "state": "complete",
        "loc": 459,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "setup_query_monitoring",
          "setup_backup_manager",
          "get_database_session"
        ]
      },
      {
        "name": "agent_lifecycle_mgr",
        "path": "agent_lifecycle_mgr.py",
        "purpose": "Agent Lifecycle Mgr",
        "dependencies": [
          "logging",
          "enum",
          "monitoring.telemetry_manager",
          "pydantic",
          "sqlalchemy",
          "models.secure_models",
          "asyncio",
          "fastapi",
          "monitoring.alert_manager",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "security.rbac_manager",
          "datetime",
          "config",
          "database.secure_database_manager"
        ],
        "public_api": [
          "AgentStatus",
          "AgentAction",
          "AgentActionRequest",
          "AgentLifecycleManager"
        ],
        "state": "complete",
        "loc": 429,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "AgentAction",
          "AgentActionRequest",
          "AgentLifecycleManager"
        ],
        "functions": []
      },
      {
        "name": "orchestrator",
        "path": "orchestrator.py",
        "purpose": "Orchestrator",
        "dependencies": [
          "structlog",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "shared.utils.message_broker",
          "datetime"
        ],
        "public_api": [
          "WorkflowOrchestrator"
        ],
        "state": "complete",
        "loc": 96,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "WorkflowOrchestrator"
        ],
        "functions": []
      },
      {
        "name": "rate_limiter",
        "path": "rate_limiter.py",
        "purpose": "Rate Limiter",
        "dependencies": [
          "starlette.middleware.base",
          "starlette.responses",
          "starlette.requests",
          "core.config",
          "redis.asyncio",
          "time",
          "starlette.types"
        ],
        "public_api": [
          "RateLimitMiddleware"
        ],
        "state": "complete",
        "loc": 36,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "RateLimitMiddleware"
        ],
        "functions": []
      },
      {
        "name": "agent_surveillance",
        "path": "agent_surveillance.py",
        "purpose": "Agent Surveillance",
        "dependencies": [
          "logging",
          "sqlalchemy",
          "models.secure_models",
          "ai.multi_modal_ai",
          "asyncio",
          "monitoring.alert_manager",
          "sqlalchemy.ext.asyncio",
          "typing",
          "datetime",
          "config",
          "database.secure_database_manager"
        ],
        "public_api": [
          "SurveillanceConfig",
          "AgentSurveillanceSystem"
        ],
        "state": "complete",
        "loc": 461,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SurveillanceConfig",
          "AgentSurveillanceSystem"
        ],
        "functions": []
      },
      {
        "name": "backup_recovery",
        "path": "backup_recovery.py",
        "purpose": "Backup Recovery",
        "dependencies": [
          "logging",
          "azure.identity",
          "azure.mgmt.sql",
          "os",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AzureBackupManager",
          "DisasterRecoveryManager",
          "create_long_term_retention_policy",
          "list_long_term_backups",
          "create_manual_backup",
          "restore_to_point_in_time",
          "restore_from_ltr_backup",
          "get_retention_policy",
          "configure_geo_replication",
          "create_recovery_plan",
          "execute_failover",
          "test_recovery"
        ],
        "state": "complete",
        "loc": 310,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AzureBackupManager",
          "DisasterRecoveryManager"
        ],
        "functions": [
          "create_long_term_retention_policy",
          "list_long_term_backups",
          "create_manual_backup",
          "restore_to_point_in_time",
          "restore_from_ltr_backup",
          "get_retention_policy",
          "configure_geo_replication",
          "create_recovery_plan",
          "execute_failover",
          "test_recovery"
        ]
      },
      {
        "name": "learning_agent_models",
        "path": "learning_agent_models.py",
        "purpose": "Learning Agent Models",
        "dependencies": [
          "sqlalchemy.orm",
          "enum",
          "sqlalchemy",
          "shared.database.models",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "KnowledgeCategory",
          "LearningType",
          "InsightType",
          "PatternStatus",
          "KnowledgeEntryModel",
          "LearningSessionModel",
          "PatternModel",
          "InteractionLogModel",
          "InsightModel",
          "KnowledgeGraphModel",
          "AgentLearningProfileModel",
          "KnowledgeSubscriptionModel",
          "FeedbackModel",
          "ModelVersionModel",
          "KnowledgeEntry",
          "LearningSession",
          "Pattern",
          "Insight",
          "KnowledgeRequest",
          "LearningOutcome",
          "KnowledgeSubscription",
          "AgentLearningProfile"
        ],
        "state": "complete",
        "loc": 377,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeCategory",
          "LearningType",
          "InsightType",
          "PatternStatus",
          "KnowledgeEntryModel",
          "LearningSessionModel",
          "PatternModel",
          "InteractionLogModel",
          "InsightModel",
          "KnowledgeGraphModel",
          "AgentLearningProfileModel",
          "KnowledgeSubscriptionModel",
          "FeedbackModel",
          "ModelVersionModel",
          "KnowledgeEntry",
          "LearningSession",
          "Pattern",
          "Insight",
          "KnowledgeRequest",
          "LearningOutcome",
          "KnowledgeSubscription",
          "AgentLearningProfile"
        ],
        "functions": []
      },
      {
        "name": "orchestrator_agent",
        "path": "orchestrator_agent.py",
        "purpose": "Orchestrator Agent",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "random",
          "collections",
          "heapq",
          "opentelemetry",
          "typing",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "AgentCapability",
          "TaskQueue",
          "WorkflowInstance",
          "OrchestratorAgent",
          "load_percentage",
          "is_healthy",
          "priority_score",
          "put",
          "get",
          "size"
        ],
        "state": "complete",
        "loc": 792,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentCapability",
          "TaskQueue",
          "WorkflowInstance",
          "OrchestratorAgent"
        ],
        "functions": [
          "load_percentage",
          "is_healthy",
          "priority_score",
          "put",
          "get",
          "size"
        ]
      },
      {
        "name": "audit_manager",
        "path": "audit_manager.py",
        "purpose": "audit_manager.py",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "aioredis",
          "hashlib",
          "asyncio",
          "hmac",
          "random",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AuditType",
          "AuditScope",
          "AuditOutcome",
          "AuditFinding",
          "AuditRecord",
          "AuditManager"
        ],
        "state": "complete",
        "loc": 507,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AuditType",
          "AuditScope",
          "AuditOutcome",
          "AuditFinding",
          "AuditRecord",
          "AuditManager"
        ],
        "functions": []
      },
      {
        "name": "knowledge_store",
        "path": "knowledge_store.py",
        "purpose": "Knowledge Store",
        "dependencies": [
          "json",
          "models",
          "structlog",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "shared.utils.cache_manager",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "KnowledgeStore"
        ],
        "state": "complete",
        "loc": 541,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeStore"
        ],
        "functions": []
      },
      {
        "name": "enterprise_agent_manager",
        "path": "enterprise_agent_manager.py",
        "purpose": "Enterprise Agent Manager",
        "dependencies": [
          "fastapi.security",
          "fastapi.middleware.cors",
          "pydantic",
          "cryptography.hazmat.backends",
          "asyncio",
          "typing",
          "datetime",
          "cryptography.fernet",
          "logging",
          "sqlalchemy.orm",
          "sqlalchemy",
          "opentelemetry",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "opentelemetry.exporter.jaeger.thrift",
          "secrets",
          "jwt",
          "re",
          "json",
          "opentelemetry.sdk.trace",
          "redis.asyncio",
          "opentelemetry.sdk.trace.export",
          "fastapi",
          "os",
          "uuid",
          "passlib.context",
          "enum",
          "opentelemetry.sdk.resources",
          "opentelemetry.semconv.resource",
          "time",
          "base64",
          "cryptography.hazmat.primitives.kdf.pbkdf2",
          "cryptography.hazmat.primitives",
          "uvicorn",
          "hashlib",
          "signal",
          "dataclasses",
          "traceback",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "deprecated",
        "loc": 1247,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "tests.conftest",
        "path": "tests.conftest.py",
        "purpose": "tests/conftest.py",
        "dependencies": [
          "src.main",
          "src.models.user",
          "sqlalchemy.orm",
          "src.database",
          "unittest.mock",
          "fastapi.testclient",
          "asyncio",
          "os",
          "sqlalchemy.ext.asyncio",
          "sys",
          "src.core.security",
          "typing",
          "pytest",
          "datetime"
        ],
        "public_api": [
          "event_loop",
          "test_client",
          "test_user",
          "auth_headers",
          "mock_redis",
          "mock_kafka",
          "mock_elasticsearch",
          "override_get_db"
        ],
        "state": "complete",
        "loc": 120,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "event_loop",
          "test_client",
          "test_user",
          "auth_headers",
          "mock_redis",
          "mock_kafka",
          "mock_elasticsearch",
          "override_get_db"
        ]
      },
      {
        "name": "scaling.auto_scaler",
        "path": "scaling.auto_scaler.py",
        "purpose": "scaling/auto_scaler.py",
        "dependencies": [
          "logging",
          "prometheus_api_client",
          "time",
          "asyncio",
          "scipy",
          "kubernetes",
          "typing",
          "datetime",
          "dataclasses",
          "numpy"
        ],
        "public_api": [
          "ScalingMetric",
          "AdvancedAutoScaler",
          "ScalingDecision",
          "PredictiveScaler",
          "MultiDimensionalScaler",
          "ScalingOrchestrator"
        ],
        "state": "complete",
        "loc": 317,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ScalingMetric",
          "AdvancedAutoScaler",
          "ScalingDecision",
          "PredictiveScaler",
          "MultiDimensionalScaler",
          "ScalingOrchestrator"
        ],
        "functions": []
      },
      {
        "name": "mandatory_reporting",
        "path": "mandatory_reporting.py",
        "purpose": "reporting/mandatory_reporting.py",
        "dependencies": [
          "logging",
          "json",
          "models",
          "sqlalchemy",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "MandatoryReportingEnforcer"
        ],
        "state": "complete",
        "loc": 238,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MandatoryReportingEnforcer"
        ],
        "functions": []
      },
      {
        "name": "project_agent_main",
        "path": "project_agent_main.py",
        "purpose": "Project Agent Main",
        "dependencies": [
          "services.project_builder_agent",
          "core.quality_verifier",
          "fastapi.middleware.cors",
          "core.report_generator",
          "asyncio",
          "core.agent_orchestrator",
          "typing",
          "datetime",
          "core.file_manager",
          "logging",
          "contextlib",
          "core.project_integrator",
          "json",
          "core.config",
          "utils.websocket_manager",
          "core.database",
          "fastapi",
          "uuid",
          "core.auth",
          "utils.metrics",
          "utils.log_manager",
          "core.chat_interface",
          "uvicorn",
          "hashlib",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 1068,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "chat_interface",
        "path": "chat_interface.py",
        "purpose": "Chat Interface",
        "dependencies": [
          "logging",
          "json",
          "database",
          "agent_orchestrator",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ChatInterface"
        ],
        "state": "complete",
        "loc": 200,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ChatInterface"
        ],
        "functions": []
      },
      {
        "name": "agent_communicator",
        "path": "agent_communicator.py",
        "purpose": "Agent Communicator",
        "dependencies": [
          "json",
          "shared.database.connection_pool",
          "asyncio",
          "typing",
          "shared.config.settings",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "AgentCommunicator"
        ],
        "state": "complete",
        "loc": 56,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentCommunicator"
        ],
        "functions": []
      },
      {
        "name": "system",
        "path": "system.py",
        "purpose": "System",
        "dependencies": [
          "logger",
          "logging",
          "enum",
          "infrastructure.message_broker",
          "infrastructure.monitoring",
          "learning.engine",
          "config",
          "learning.external_learning",
          "asyncio",
          "learning.knowledge_base",
          "learning.pattern_recognition",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "learning.continuous_learning"
        ],
        "public_api": [
          "SystemStatus",
          "SystemMetrics",
          "YMERASystem",
          "get_system"
        ],
        "state": "complete",
        "loc": 321,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SystemStatus",
          "SystemMetrics",
          "YMERASystem"
        ],
        "functions": [
          "get_system"
        ]
      },
      {
        "name": "knowledge_manager",
        "path": "knowledge_manager.py",
        "purpose": "Knowledge Manager",
        "dependencies": [
          "json",
          "logging",
          "models",
          "database",
          "asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "KnowledgeManager"
        ],
        "state": "complete",
        "loc": 94,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeManager"
        ],
        "functions": []
      },
      {
        "name": "encryption",
        "path": "encryption.py",
        "purpose": "Encryption",
        "dependencies": [
          "base64",
          "cryptography.hazmat.primitives.kdf.pbkdf2",
          "cryptography.hazmat.primitives",
          "hashlib",
          "os",
          "typing",
          "shared.config.settings",
          "structlog",
          "cryptography.fernet"
        ],
        "public_api": [
          "EncryptionManager",
          "encrypt",
          "decrypt",
          "hash_password",
          "generate_key"
        ],
        "state": "complete",
        "loc": 83,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EncryptionManager"
        ],
        "functions": [
          "encrypt",
          "decrypt",
          "hash_password",
          "generate_key"
        ]
      },
      {
        "name": "routes",
        "path": "routes.py",
        "purpose": "Request/Response Models",
        "dependencies": [
          "pydantic",
          "fastapi",
          "typing",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "AgentRegistrationRequest",
          "AgentReportRequest",
          "TaskAssignmentRequest",
          "ApprovalRequest"
        ],
        "state": "complete",
        "loc": 213,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentRegistrationRequest",
          "AgentReportRequest",
          "TaskAssignmentRequest",
          "ApprovalRequest"
        ],
        "functions": []
      },
      {
        "name": "message_broker",
        "path": "message_broker.py",
        "purpose": "Message Broker",
        "dependencies": [
          "logging",
          "json",
          "aiokafka.errors",
          "asyncio",
          "typing",
          "datetime",
          "aiokafka"
        ],
        "public_api": [
          "MessageBroker"
        ],
        "state": "complete",
        "loc": 103,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MessageBroker"
        ],
        "functions": []
      },
      {
        "name": "recommendation_engine",
        "path": "recommendation_engine.py",
        "purpose": "Recommendation Engine",
        "dependencies": [
          "models",
          "structlog",
          "sqlalchemy",
          "collections",
          "sqlalchemy.ext.asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "RecommendationEngine"
        ],
        "state": "complete",
        "loc": 495,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "RecommendationEngine"
        ],
        "functions": []
      },
      {
        "name": "external_integration",
        "path": "external_integration.py",
        "purpose": "monitoring/external_integration.py",
        "dependencies": [
          "logging",
          "json",
          "monitoring.telemetry_manager",
          "time",
          "datadog",
          "aiohttp",
          "asyncio",
          "os",
          "newrelic.agent",
          "typing",
          "datetime",
          "splunklib.client"
        ],
        "public_api": [
          "ExternalMonitoringIntegration"
        ],
        "state": "complete",
        "loc": 246,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ExternalMonitoringIntegration"
        ],
        "functions": []
      },
      {
        "name": "app_agent_mgmt_endpoints",
        "path": "app_agent_mgmt_endpoints.py",
        "purpose": "Add these endpoints to your app.py file",
        "dependencies": [
          "agent_lifecycle_manager"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 257,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "api_gateway",
        "path": "api_gateway.py",
        "purpose": "Api Gateway",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "time",
          "nats.errors",
          "aiohttp",
          "asyncio",
          "os",
          "collections",
          "nats.aio.client",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "jwt"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 311,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "audit_system",
        "path": "audit_system.py",
        "purpose": "security/audit_system.py",
        "dependencies": [
          "logging",
          "json",
          "models",
          "sqlalchemy",
          "asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "EnhancedAuditSystem"
        ],
        "state": "complete",
        "loc": 176,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedAuditSystem"
        ],
        "functions": []
      },
      {
        "name": "tests.integration.test_api_endpoints",
        "path": "tests.integration.test_api_endpoints.py",
        "purpose": "tests/integration/test_api_endpoints.py",
        "dependencies": [
          "fastapi",
          "pytest",
          "src.models.user",
          "src.models.project"
        ],
        "public_api": [
          "TestAuthEndpoints",
          "TestProjectEndpoints",
          "TestTaskEndpoints"
        ],
        "state": "complete",
        "loc": 105,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestAuthEndpoints",
          "TestProjectEndpoints",
          "TestTaskEndpoints"
        ],
        "functions": []
      },
      {
        "name": "test_suite (1)",
        "path": "test_suite (1).py",
        "purpose": "Import modules to test",
        "dependencies": [
          "app.database",
          "sqlalchemy.orm",
          "threading",
          "app.backup_recovery",
          "time",
          "sqlalchemy",
          "app.query_optimization",
          "asyncio",
          "app.migration_manager",
          "os",
          "app.read_replica_config",
          "app.db_monitoring",
          "pytest",
          "datetime"
        ],
        "public_api": [
          "TestDatabaseManager",
          "TestConnectionPool",
          "TestReadReplicas",
          "TestMigrations",
          "TestQueryOptimization",
          "TestHealthMonitoring",
          "TestMaintenance",
          "TestIntegration",
          "TestPerformance",
          "db_manager",
          "test_session",
          "test_initialization",
          "test_session_creation",
          "test_health_check",
          "test_session_rollback_on_error",
          "test_pool_size_limits",
          "test_connection_recycling",
          "replica_manager",
          "test_replica_initialization",
          "test_write_session",
          "test_read_session",
          "test_load_balancing",
          "test_health_check",
          "migration_manager",
          "test_get_current_revision",
          "test_migration_history",
          "test_backup_creation",
          "query_monitor",
          "test_query_monitoring",
          "test_slow_query_detection",
          "maintenance_scheduler",
          "test_maintenance_logging",
          "test_error_handling",
          "test_connection_pool_performance",
          "test_concurrent_access",
          "worker"
        ],
        "state": "complete",
        "loc": 282,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestDatabaseManager",
          "TestConnectionPool",
          "TestReadReplicas",
          "TestMigrations",
          "TestQueryOptimization",
          "TestHealthMonitoring",
          "TestMaintenance",
          "TestIntegration",
          "TestPerformance"
        ],
        "functions": [
          "db_manager",
          "test_session",
          "test_initialization",
          "test_session_creation",
          "test_health_check",
          "test_session_rollback_on_error",
          "test_pool_size_limits",
          "test_connection_recycling",
          "replica_manager",
          "test_replica_initialization",
          "test_write_session",
          "test_read_session",
          "test_load_balancing",
          "test_health_check",
          "migration_manager",
          "test_get_current_revision",
          "test_migration_history",
          "test_backup_creation",
          "query_monitor",
          "test_query_monitoring",
          "test_slow_query_detection",
          "maintenance_scheduler",
          "test_maintenance_logging",
          "test_error_handling",
          "test_connection_pool_performance",
          "test_concurrent_access",
          "worker"
        ]
      },
      {
        "name": "ProductionConfig",
        "path": "ProductionConfig.py",
        "purpose": "Enhanced production configuration",
        "dependencies": [],
        "public_api": [
          "ProductionConfig",
          "validate_production_config",
          "init_config",
          "create_app"
        ],
        "state": "complete",
        "loc": 100,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProductionConfig"
        ],
        "functions": [
          "validate_production_config",
          "init_config",
          "create_app"
        ]
      },
      {
        "name": "learning_agent_main",
        "path": "learning_agent_main.py",
        "purpose": "Configure structured logging",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "structlog",
          "asyncio",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AgentRole",
          "KnowledgeCategory",
          "LearningPriority",
          "AgentProfile",
          "KnowledgePacket",
          "LearningSession",
          "ChatMessage",
          "ProductionLearningAgent"
        ],
        "state": "complete",
        "loc": 937,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentRole",
          "KnowledgeCategory",
          "LearningPriority",
          "AgentProfile",
          "KnowledgePacket",
          "LearningSession",
          "ChatMessage",
          "ProductionLearningAgent"
        ],
        "functions": []
      },
      {
        "name": "project",
        "path": "project.py",
        "purpose": "Project",
        "dependencies": [
          "enum",
          "pydantic",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ProjectStatus",
          "ProjectPhase",
          "Project",
          "Config"
        ],
        "state": "complete",
        "loc": 35,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProjectStatus",
          "ProjectPhase",
          "Project",
          "Config"
        ],
        "functions": []
      },
      {
        "name": "automl__init__",
        "path": "automl__init__.py",
        "purpose": "This would implement evolutionary algorithm",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 138,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "agent_manager_integration",
        "path": "agent_manager_integration.py",
        "purpose": "Agent Manager Integration",
        "dependencies": [
          "agent_surveillance",
          "logging",
          "json",
          "enum",
          "monitoring.telemetry_manager",
          "yaml",
          "agent_lifecycle_manager",
          "ai.multi_modal_ai",
          "agent_orchestrator",
          "asyncio",
          "monitoring.alert_manager",
          "security.rbac_manager",
          "typing",
          "datetime",
          "config",
          "database.secure_database_manager"
        ],
        "public_api": [
          "AgentManagerOperationResult",
          "AgentManager",
          "create_agent_manager"
        ],
        "state": "complete",
        "loc": 755,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentManagerOperationResult",
          "AgentManager"
        ],
        "functions": [
          "create_agent_manager"
        ]
      },
      {
        "name": "validation_agent_complete",
        "path": "validation_agent_complete.py",
        "purpose": "Validation Agent Complete",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "ValidationLevel",
          "Severity",
          "ValidationRule",
          "ValidationIssue",
          "ValidationReport",
          "ValidationAgent",
          "to_dict",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 709,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ValidationLevel",
          "Severity",
          "ValidationRule",
          "ValidationIssue",
          "ValidationReport",
          "ValidationAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "base_agent",
        "path": "base_agent.py",
        "purpose": "Base Agent",
        "dependencies": [
          "nats",
          "asyncio",
          "nats.aio.client",
          "typing",
          "structlog",
          "logging",
          "consul",
          "contextlib",
          "opentelemetry",
          "prometheus_client",
          "opentelemetry.exporter.jaeger.thrift",
          "opentelemetry.sdk.metrics",
          "opentelemetry.trace",
          "json",
          "aioredis",
          "opentelemetry.sdk.trace",
          "opentelemetry.exporter.prometheus",
          "opentelemetry.sdk.trace.export",
          "uuid",
          "asyncpg",
          "abc",
          "enum",
          "opentelemetry.sdk.resources",
          "time",
          "signal",
          "sys",
          "nats.js.api",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "AgentStatus",
          "TaskStatus",
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "TaskResponse",
          "HealthStatus",
          "CircuitBreakerState",
          "CircuitBreaker",
          "BaseAgent",
          "MySimpleAgent",
          "get_circuit_breaker",
          "shutdown",
          "signal_handler"
        ],
        "state": "incomplete",
        "loc": 727,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "TaskStatus",
          "Priority",
          "AgentConfig",
          "TaskRequest",
          "TaskResponse",
          "HealthStatus",
          "CircuitBreakerState",
          "CircuitBreaker",
          "BaseAgent",
          "MySimpleAgent"
        ],
        "functions": [
          "get_circuit_breaker",
          "shutdown",
          "signal_handler"
        ]
      },
      {
        "name": "config",
        "path": "config.py",
        "purpose": "API Configuration",
        "dependencies": [
          "json",
          "pydantic",
          "pathlib",
          "pydantic_settings",
          "os",
          "typing"
        ],
        "public_api": [
          "Settings",
          "ProjectAgentSettings",
          "Config",
          "validate_database_url",
          "validate_jwt_secret",
          "validate_jwt_secret",
          "validate_quality_threshold",
          "validate_quality_weights",
          "parse_cors_origins",
          "parse_kafka_servers",
          "ensure_storage_path_exists",
          "ensure_log_directory_exists",
          "get_agent_urls",
          "is_production",
          "is_development"
        ],
        "state": "complete",
        "loc": 244,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Settings",
          "ProjectAgentSettings",
          "Config"
        ],
        "functions": [
          "validate_database_url",
          "validate_jwt_secret",
          "validate_jwt_secret",
          "validate_quality_threshold",
          "validate_quality_weights",
          "parse_cors_origins",
          "parse_kafka_servers",
          "ensure_storage_path_exists",
          "ensure_log_directory_exists",
          "get_agent_urls",
          "is_production",
          "is_development"
        ]
      },
      {
        "name": "test_deployment_preparation",
        "path": "test_deployment_preparation.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "pathlib",
          "os",
          "sys"
        ],
        "public_api": [
          "test_deployment_structure",
          "test_docker_compose_content",
          "test_env_production_content",
          "test_deploy_script_content",
          "test_python_scripts",
          "main"
        ],
        "state": "complete",
        "loc": 203,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "test_deployment_structure",
          "test_docker_compose_content",
          "test_env_production_content",
          "test_deploy_script_content",
          "test_python_scripts",
          "main"
        ]
      },
      {
        "name": "test_comprehensive",
        "path": "test_comprehensive.py",
        "purpose": "Add parent directory to path",
        "dependencies": [
          "core.config",
          "learning.engine",
          "asyncio",
          "pathlib",
          "core.system",
          "sys",
          "traceback"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 291,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "task_worker",
        "path": "task_worker.py",
        "purpose": "workers/task_worker.py",
        "dependencies": [
          "json",
          "logging",
          "app.database",
          "kafka",
          "app.config",
          "app.schemas",
          "asyncio",
          "signal",
          "sys",
          "sqlalchemy.ext.asyncio",
          "datetime"
        ],
        "public_api": [
          "TaskWorker",
          "signal_handler"
        ],
        "state": "complete",
        "loc": 175,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TaskWorker"
        ],
        "functions": [
          "signal_handler"
        ]
      },
      {
        "name": "complete_deployment_script",
        "path": "complete_deployment_script.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "time",
          "pathlib",
          "os",
          "sys",
          "shutil",
          "typing",
          "subprocess"
        ],
        "public_api": [
          "Colors",
          "ProductionDeployment",
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "print_step",
          "main",
          "create_backup",
          "create_directories",
          "fix_database_module",
          "fix_init_file",
          "fix_gateway_routing_encoding",
          "create_utility_files",
          "verify_syntax",
          "verify_imports",
          "create_env_template",
          "generate_deployment_report",
          "run_deployment"
        ],
        "state": "complete",
        "loc": 684,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Colors",
          "ProductionDeployment"
        ],
        "functions": [
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "print_step",
          "main",
          "create_backup",
          "create_directories",
          "fix_database_module",
          "fix_init_file",
          "fix_gateway_routing_encoding",
          "create_utility_files",
          "verify_syntax",
          "verify_imports",
          "create_env_template",
          "generate_deployment_report",
          "run_deployment"
        ]
      },
      {
        "name": "enhanced_api_endpoints",
        "path": "enhanced_api_endpoints.py",
        "purpose": "Enhanced Api Endpoints",
        "dependencies": [
          "json",
          "fastapi.middleware.cors",
          "httpx",
          "pydantic",
          "uvicorn",
          "asyncio",
          "fastapi",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "learning_agent_database",
          "enhanced_learning_agent"
        ],
        "public_api": [
          "KnowledgeRequestModel",
          "AgentCapabilityUpdate",
          "ExternalSourceConfig",
          "PeerSharingRequest"
        ],
        "state": "complete",
        "loc": 646,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeRequestModel",
          "AgentCapabilityUpdate",
          "ExternalSourceConfig",
          "PeerSharingRequest"
        ],
        "functions": []
      },
      {
        "name": "production_config",
        "path": "production_config.py",
        "purpose": "Production Config",
        "dependencies": [
          "enum",
          "pydantic",
          "pydantic_settings",
          "os",
          "typing"
        ],
        "public_api": [
          "Environment",
          "LogLevel",
          "Settings",
          "DevelopmentSettings",
          "StagingSettings",
          "ProductionSettings",
          "Config",
          "Config",
          "Config",
          "Config",
          "get_settings",
          "generate_env_template",
          "validate_database_url",
          "validate_environment",
          "get_database_url",
          "is_production",
          "is_development"
        ],
        "state": "complete",
        "loc": 341,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Environment",
          "LogLevel",
          "Settings",
          "DevelopmentSettings",
          "StagingSettings",
          "ProductionSettings",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_settings",
          "generate_env_template",
          "validate_database_url",
          "validate_environment",
          "get_database_url",
          "is_production",
          "is_development"
        ]
      },
      {
        "name": "database_core_integrated",
        "path": "database_core_integrated.py",
        "purpose": "Third-party imports",
        "dependencies": [
          "asyncio",
          "sqlalchemy.pool",
          "sqlalchemy.exc",
          "structlog",
          "typing",
          "datetime",
          "logging",
          "sqlalchemy.orm",
          "sqlalchemy",
          "contextlib",
          "sqlalchemy.ext.asyncio",
          "json",
          "sqlalchemy.dialects.postgresql",
          "os",
          "uuid",
          "abc",
          "hashlib",
          "pathlib",
          "dataclasses"
        ],
        "public_api": [
          "Base",
          "DatabaseConfig",
          "IntegratedDatabaseManager",
          "BaseRepository",
          "User",
          "Project",
          "Agent",
          "Task",
          "File",
          "AuditLog",
          "TimestampMixin",
          "SoftDeleteMixin",
          "BaseMigration",
          "MigrationInfo",
          "get_database_manager",
          "get_db_session",
          "init_database",
          "close_database"
        ],
        "state": "complete",
        "loc": 797,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DatabaseConfig",
          "EnhancedBase",
          "TimestampMixin",
          "SoftDeleteMixin",
          "User",
          "Project",
          "Agent",
          "Task",
          "File",
          "AuditLog",
          "MigrationInfo",
          "BaseMigration",
          "IntegratedDatabaseManager",
          "BaseRepository"
        ],
        "functions": [
          "get_json_column",
          "is_postgres",
          "is_sqlite",
          "to_dict",
          "update_from_dict",
          "create_from_dict"
        ]
      },
      {
        "name": "knowledge_flow_manager",
        "path": "knowledge_flow_manager.py",
        "purpose": "Knowledge Flow Manager",
        "dependencies": [
          "models",
          "structlog",
          "sqlalchemy",
          "collections",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "shared.utils.message_broker",
          "datetime"
        ],
        "public_api": [
          "KnowledgeFlowManager"
        ],
        "state": "complete",
        "loc": 393,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeFlowManager"
        ],
        "functions": []
      },
      {
        "name": "submission",
        "path": "submission.py",
        "purpose": "Submission",
        "dependencies": [
          "enum",
          "pydantic",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "SubmissionStatus",
          "IssueSeverity",
          "QualityFeedback",
          "AgentSubmission",
          "Config"
        ],
        "state": "complete",
        "loc": 48,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SubmissionStatus",
          "IssueSeverity",
          "QualityFeedback",
          "AgentSubmission",
          "Config"
        ],
        "functions": []
      },
      {
        "name": "security_scanner",
        "path": "security_scanner.py",
        "purpose": "Security Scanner",
        "dependencies": [
          "re",
          "json",
          "hashlib",
          "pathlib",
          "os",
          "typing",
          "datetime"
        ],
        "public_api": [
          "SecurityScanner",
          "SecurityAuditor",
          "scan_directory",
          "check_dependencies",
          "run_full_audit"
        ],
        "state": "complete",
        "loc": 269,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SecurityScanner",
          "SecurityAuditor"
        ],
        "functions": [
          "scan_directory",
          "check_dependencies",
          "run_full_audit"
        ]
      },
      {
        "name": "websocket_manager",
        "path": "websocket_manager.py",
        "purpose": "Websocket Manager",
        "dependencies": [
          "logging",
          "json",
          "asyncio",
          "fastapi",
          "collections",
          "typing",
          "datetime"
        ],
        "public_api": [
          "WebSocketManager"
        ],
        "state": "complete",
        "loc": 221,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "WebSocketManager"
        ],
        "functions": []
      },
      {
        "name": "database",
        "path": "database.py",
        "purpose": "Database",
        "dependencies": [
          "json",
          "logging",
          "contextlib",
          "asyncio",
          "asyncpg",
          "typing",
          "datetime"
        ],
        "public_api": [
          "Database"
        ],
        "state": "complete",
        "loc": 70,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Database"
        ],
        "functions": []
      },
      {
        "name": "monitoring_routes",
        "path": "monitoring_routes.py",
        "purpose": "api/monitoring_routes.py",
        "dependencies": [
          "models",
          "services",
          "fastapi",
          "typing",
          "prometheus_client",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 70,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "performance_monitor",
        "path": "performance_monitor.py",
        "purpose": "Performance Monitor",
        "dependencies": [
          "json",
          "threading",
          "time",
          "collections",
          "typing",
          "datetime",
          "psutil"
        ],
        "public_api": [
          "PerformanceMonitor",
          "RequestTracker",
          "HealthChecker",
          "start_monitoring",
          "stop_monitoring",
          "collect_metrics",
          "get_performance_report",
          "track_request",
          "get_stats",
          "register_check"
        ],
        "state": "complete",
        "loc": 226,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceMonitor",
          "RequestTracker",
          "HealthChecker"
        ],
        "functions": [
          "start_monitoring",
          "stop_monitoring",
          "collect_metrics",
          "get_performance_report",
          "track_request",
          "get_stats",
          "register_check"
        ]
      },
      {
        "name": "example_setup",
        "path": "example_setup.py",
        "purpose": "Core components",
        "dependencies": [
          "sqlalchemy.orm",
          "sqlalchemy",
          "asyncio",
          "os",
          "datetime",
          "DATABASE_CORE",
          "traceback"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 262,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "task_scheduler",
        "path": "task_scheduler.py",
        "purpose": "Task Scheduler",
        "dependencies": [
          "structlog",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "shared.utils.cache_manager",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "TaskScheduler"
        ],
        "state": "complete",
        "loc": 108,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TaskScheduler"
        ],
        "functions": []
      },
      {
        "name": "real_time_monitoring_agent",
        "path": "real_time_monitoring_agent.py",
        "purpose": "Real Time Monitoring Agent",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "time",
          "aiohttp",
          "asyncio",
          "statistics",
          "collections",
          "opentelemetry",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "psutil",
          "base_agent"
        ],
        "public_api": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "RealTimeMonitoringAgent"
        ],
        "state": "complete",
        "loc": 1154,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "RealTimeMonitoringAgent"
        ],
        "functions": []
      },
      {
        "name": "configuration_manager",
        "path": "configuration_manager.py",
        "purpose": "config/configuration_manager.py",
        "dependencies": [
          "logging",
          "json",
          "yaml",
          "aioredis",
          "hashlib",
          "asyncio",
          "os",
          "typing",
          "datetime",
          "cryptography.fernet"
        ],
        "public_api": [
          "ConfigurationManager",
          "get",
          "get_secret"
        ],
        "state": "complete",
        "loc": 232,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ConfigurationManager"
        ],
        "functions": [
          "get",
          "get_secret"
        ]
      },
      {
        "name": "security_monitor",
        "path": "security_monitor.py",
        "purpose": "security/security_monitor.py",
        "dependencies": [
          "re",
          "logging",
          "json",
          "models",
          "sqlalchemy",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "EnhancedSecurityMonitor"
        ],
        "state": "complete",
        "loc": 306,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedSecurityMonitor"
        ],
        "functions": []
      },
      {
        "name": "agent",
        "path": "agent.py",
        "purpose": "Agent",
        "dependencies": [
          "json",
          "logging",
          "models",
          "ml_pipeline",
          "knowledge_manager",
          "database",
          "asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "YmeraAgent"
        ],
        "state": "complete",
        "loc": 232,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "YmeraAgent"
        ],
        "functions": []
      },
      {
        "name": "main_app_production",
        "path": "main_app_production.py",
        "purpose": "Add project root to path",
        "dependencies": [
          "app.API_GATEWAY_CORE_ROUTES.database",
          "fastapi.middleware.cors",
          "fastapi.middleware.trustedhost",
          "time",
          "contextlib",
          "uvicorn",
          "app.API_GATEWAY_CORE_ROUTES",
          "app.CORE_CONFIGURATION.config_settings",
          "pathlib",
          "fastapi",
          "os",
          "sys",
          "structlog",
          "fastapi.middleware.gzip",
          "psutil",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 322,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "database_wrapper",
        "path": "database_wrapper.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "logging",
          "sqlalchemy.orm",
          "structlog",
          "contextlib",
          "asyncio",
          "os",
          "sqlalchemy.pool",
          "typing",
          "sqlalchemy.ext.asyncio",
          "app.CORE_CONFIGURATION.config_settings"
        ],
        "public_api": [
          "Base",
          "DatabaseManager",
          "DatabaseConfig",
          "get_db_session",
          "init_database",
          "close_database",
          "create_tables",
          "drop_tables",
          "transaction",
          "get_database_stats",
          "_db_manager"
        ],
        "state": "complete",
        "loc": 259,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DatabaseConfig",
          "DatabaseManager"
        ],
        "functions": []
      },
      {
        "name": "production_auth_routes",
        "path": "production_auth_routes.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "fastapi.security",
          "pydantic",
          "asyncio",
          "sqlalchemy.exc",
          "structlog",
          "typing",
          "datetime",
          "logging",
          "app.CORE_CONFIGURATION.config_settings",
          "sqlalchemy.ext.asyncio",
          "secrets",
          "jwt",
          "database",
          "fastapi",
          "os",
          "uuid",
          "app.API_GATEWAY_CORE_ROUTES.database",
          "sqlalchemy.future",
          "config.settings",
          "hashlib"
        ],
        "public_api": [
          "router",
          "get_current_user",
          "UserRegistration",
          "UserLogin",
          "AuthResponse"
        ],
        "state": "complete",
        "loc": 322,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UserRegistration",
          "UserLogin",
          "TokenRefresh",
          "PasswordReset",
          "PasswordResetConfirm",
          "AuthResponse",
          "User",
          "UserSession",
          "Settings"
        ],
        "functions": [
          "hash_password",
          "verify_password",
          "create_access_token",
          "create_refresh_token",
          "verify_token",
          "validate_password",
          "get_settings"
        ]
      },
      {
        "name": "test_fixtures",
        "path": "test_fixtures.py",
        "purpose": "Test Fixtures",
        "dependencies": [
          "faker",
          "database_core_integrated",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "random",
          "typing",
          "datetime",
          "argparse"
        ],
        "public_api": [
          "TestDataGenerator",
          "DatabaseFixtures",
          "generate_user",
          "generate_project",
          "generate_agent",
          "generate_task",
          "generate_file",
          "generate_audit_log"
        ],
        "state": "complete",
        "loc": 370,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestDataGenerator",
          "DatabaseFixtures"
        ],
        "functions": [
          "generate_user",
          "generate_project",
          "generate_agent",
          "generate_task",
          "generate_file",
          "generate_audit_log"
        ]
      },
      {
        "name": "quick_start",
        "path": "quick_start.py",
        "purpose": "Add parent directory to path",
        "dependencies": [
          "core.config",
          "asyncio",
          "pathlib",
          "core.system",
          "sys",
          "traceback"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 74,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "agent_manager_enhancements",
        "path": "agent_manager_enhancements.py",
        "purpose": "Structured logging setup",
        "dependencies": [
          "re",
          "logging",
          "enum",
          "asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AgentReportStatus",
          "AgentAction",
          "AdminApproval",
          "MandatoryReportingEnforcer",
          "AgentLifecycleManager",
          "EnhancedSecurityMonitor",
          "DataFlowValidator",
          "EnhancedAuditSystem"
        ],
        "state": "complete",
        "loc": 863,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentReportStatus",
          "AgentAction",
          "AdminApproval",
          "MandatoryReportingEnforcer",
          "AgentLifecycleManager",
          "EnhancedSecurityMonitor",
          "DataFlowValidator",
          "EnhancedAuditSystem"
        ],
        "functions": []
      },
      {
        "name": "config_compat",
        "path": "config_compat.py",
        "purpose": "============================================================================",
        "dependencies": [
          "pathlib",
          "os",
          "dataclasses",
          "typing"
        ],
        "public_api": [
          "Settings",
          "get_settings",
          "get_config_settings",
          "load_settings",
          "reset_settings",
          "get_config_by_environment",
          "DevelopmentConfig",
          "ProductionConfig",
          "TestingConfig",
          "validate_settings",
          "TemporarySettings",
          "export_config_to_env_file",
          "settings"
        ],
        "state": "complete",
        "loc": 357,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Settings",
          "DevelopmentConfig",
          "ProductionConfig",
          "TestingConfig",
          "TemporarySettings"
        ],
        "functions": [
          "get_env",
          "get_bool_env",
          "get_int_env",
          "get_settings",
          "reset_settings",
          "get_config_settings",
          "load_settings",
          "get_config_by_environment",
          "validate_database_url",
          "validate_redis_url",
          "validate_settings",
          "export_config_to_env_file",
          "print_configuration_examples",
          "to_dict",
          "get"
        ]
      },
      {
        "name": "quality_verifier",
        "path": "quality_verifier.py",
        "purpose": "Quality Verifier",
        "dependencies": [
          "logging",
          "json",
          "database",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "QualityVerificationEngine"
        ],
        "state": "incomplete",
        "loc": 283,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "QualityVerificationEngine"
        ],
        "functions": []
      },
      {
        "name": "agent_system",
        "path": "agent_system.py",
        "purpose": "main.py - Production-Ready Agent Management System",
        "dependencies": [
          "fastapi.security",
          "fastapi.middleware.cors",
          "pydantic",
          "asyncio",
          "typing",
          "datetime",
          "logging",
          "sqlalchemy.orm",
          "sqlalchemy",
          "contextlib",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "json",
          "redis.asyncio",
          "fastapi",
          "os",
          "uuid",
          "enum",
          "jose",
          "uvicorn",
          "hashlib",
          "bcrypt",
          "fastapi.responses"
        ],
        "public_api": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task",
          "UserCreate",
          "UserResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "DatabaseManager",
          "AuthService",
          "TaskQueue",
          "AgentManager",
          "hash_password",
          "verify_password",
          "create_access_token"
        ],
        "state": "complete",
        "loc": 534,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task",
          "UserCreate",
          "UserResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "DatabaseManager",
          "AuthService",
          "TaskQueue",
          "AgentManager"
        ],
        "functions": [
          "hash_password",
          "verify_password",
          "create_access_token"
        ]
      },
      {
        "name": "agent_coordinator",
        "path": "agent_coordinator.py",
        "purpose": "Agent Coordinator",
        "dependencies": [
          "json",
          "enum",
          "structlog",
          "time",
          "pydantic",
          "sqlalchemy",
          "asyncio",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ActionType",
          "Priority",
          "WorkflowStatus",
          "UserRequest",
          "AgentTask",
          "WorkflowPlan",
          "AgentCoordinator",
          "CoordinatorAPI",
          "validate_files"
        ],
        "state": "complete",
        "loc": 782,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ActionType",
          "Priority",
          "WorkflowStatus",
          "UserRequest",
          "AgentTask",
          "WorkflowPlan",
          "AgentCoordinator",
          "CoordinatorAPI"
        ],
        "functions": [
          "validate_files"
        ]
      },
      {
        "name": "metrics_collector_fixed",
        "path": "metrics_collector_fixed.py",
        "purpose": "Metrics Collector Fixed",
        "dependencies": [
          "asyncio",
          "concurrent.futures",
          "typing",
          "datetime",
          "psutil",
          "logging",
          "contextlib",
          "statistics",
          "collections",
          "socket",
          "json",
          "threading",
          "redis.asyncio",
          "platform",
          "uuid",
          "enum",
          "time",
          "sys",
          "dataclasses",
          "gc"
        ],
        "public_api": [
          "MetricsCollector",
          "MetricType",
          "MetricScope",
          "MetricPoint",
          "SystemResourceMetrics",
          "AgentPerformanceMetrics",
          "LearningEngineMetrics",
          "OrchestrationMetrics",
          "MetricsAggregator"
        ],
        "state": "complete",
        "loc": 601,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricType",
          "MetricScope",
          "MetricPoint",
          "SystemResourceMetrics",
          "AgentPerformanceMetrics",
          "LearningEngineMetrics",
          "OrchestrationMetrics",
          "MetricsAggregator",
          "MetricsCollector"
        ],
        "functions": [
          "to_dict",
          "add_metric",
          "get_statistics"
        ]
      },
      {
        "name": "file_manager",
        "path": "file_manager.py",
        "purpose": "File Manager",
        "dependencies": [
          "logging",
          "database",
          "hashlib",
          "asyncio",
          "pathlib",
          "aiofiles",
          "typing",
          "uuid",
          "datetime"
        ],
        "public_api": [
          "FileManager"
        ],
        "state": "complete",
        "loc": 161,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FileManager"
        ],
        "functions": []
      },
      {
        "name": "pattern_recognizer",
        "path": "pattern_recognizer.py",
        "purpose": "Pattern Recognizer",
        "dependencies": [
          "re",
          "json",
          "models",
          "structlog",
          "sqlalchemy",
          "collections",
          "sqlalchemy.ext.asyncio",
          "shared.utils.cache_manager",
          "typing",
          "datetime"
        ],
        "public_api": [
          "PatternRecognizer"
        ],
        "state": "complete",
        "loc": 551,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PatternRecognizer"
        ],
        "functions": []
      },
      {
        "name": "admin_routes",
        "path": "admin_routes.py",
        "purpose": "api/admin_routes.py",
        "dependencies": [
          "models",
          "services",
          "fastapi",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 128,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "db_config",
        "path": "db_config.py",
        "purpose": "Database Configuration",
        "dependencies": [
          "logging",
          "sqlalchemy.orm",
          "sqlalchemy",
          "contextlib",
          "sqlalchemy.ext.declarative",
          "os",
          "typing",
          "urllib.parse"
        ],
        "public_api": [
          "DatabaseConfig",
          "DatabaseManager",
          "get_db",
          "init_db",
          "close_db",
          "get_connection_string",
          "initialize",
          "get_session",
          "health_check",
          "dispose",
          "receive_connect",
          "receive_checkout",
          "receive_checkin"
        ],
        "state": "complete",
        "loc": 142,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DatabaseConfig",
          "DatabaseManager"
        ],
        "functions": [
          "get_db",
          "init_db",
          "close_db",
          "get_connection_string",
          "initialize",
          "get_session",
          "health_check",
          "dispose",
          "receive_connect",
          "receive_checkout",
          "receive_checkin"
        ]
      },
      {
        "name": "access_control",
        "path": "access_control.py",
        "purpose": "Access Control",
        "dependencies": [
          "shared.security.encryption",
          "structlog",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "datetime",
          "secrets"
        ],
        "public_api": [
          "AgentAccessController"
        ],
        "state": "complete",
        "loc": 162,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentAccessController"
        ],
        "functions": []
      },
      {
        "name": "editing_agent_testing (1)",
        "path": "editing_agent_testing (1).py",
        "purpose": "Editing Agent Testing (1)",
        "dependencies": [
          "json",
          "unittest.mock",
          "editing_agent",
          "asyncio",
          "uuid",
          "typing",
          "pytest",
          "base_agent"
        ],
        "public_api": [
          "TestEditingAgentLifecycle",
          "TestEditingSession",
          "TestContentAnalysis",
          "TestSuggestions",
          "TestGrammarCheck",
          "TestCollaborativeEditing",
          "TestVersionControl",
          "TestTaskHandling",
          "TestMetrics",
          "TestIntegration",
          "editing_agent_config"
        ],
        "state": "complete",
        "loc": 561,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestEditingAgentLifecycle",
          "TestEditingSession",
          "TestContentAnalysis",
          "TestSuggestions",
          "TestGrammarCheck",
          "TestCollaborativeEditing",
          "TestVersionControl",
          "TestTaskHandling",
          "TestMetrics",
          "TestIntegration"
        ],
        "functions": [
          "editing_agent_config"
        ]
      },
      {
        "name": "ymera_enhanced_auth",
        "path": "ymera_enhanced_auth.py",
        "purpose": "Ymera Enhanced Auth",
        "dependencies": [
          "fastapi.security",
          "pyotp",
          "pydantic",
          "asyncio",
          "dataclasses",
          "typing",
          "datetime",
          "sqlalchemy.orm",
          "sqlalchemy",
          "collections",
          "sqlalchemy.ext.asyncio",
          "secrets",
          "jwt",
          "re",
          "json",
          "io",
          "redis.asyncio",
          "fastapi",
          "enum",
          "qrcode",
          "base64",
          "sqlalchemy.ext.declarative",
          "jinja2",
          "hashlib",
          "bcrypt",
          "functools"
        ],
        "public_api": [],
        "state": "incomplete",
        "loc": 1997,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "metrics_agent",
        "path": "metrics_agent.py",
        "purpose": "Metrics Agent",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "os",
          "collections",
          "typing",
          "base_agent"
        ],
        "public_api": [
          "MetricsAgent"
        ],
        "state": "complete",
        "loc": 101,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricsAgent"
        ],
        "functions": []
      },
      {
        "name": "api_gateway_init",
        "path": "api_gateway_init.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "ymera_api_gateway",
          "project_routes",
          "logging",
          "ymera_auth_routes",
          "ymera_agent_routes",
          "pathlib",
          "sys",
          "websocket_routes",
          "typing",
          "ymera_file_routes"
        ],
        "public_api": [
          "database",
          "APIGateway",
          "GatewayConfig",
          "APIRequest",
          "APIResponse",
          "GatewayStats",
          "LoadBalancer",
          "RateLimitManager",
          "gateway_router",
          "auth_router",
          "agent_router",
          "file_router",
          "project_router",
          "websocket_router",
          "__version__"
        ],
        "state": "complete",
        "loc": 122,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "verify_imports"
        ]
      },
      {
        "name": "data_pipeline.etl_processor",
        "path": "data_pipeline.etl_processor.py",
        "purpose": "data_pipeline/etl_processor.py",
        "dependencies": [
          "avro.schema",
          "logging",
          "json",
          "io",
          "pyarrow",
          "kafka",
          "pandas",
          "avro.io",
          "google.cloud",
          "google.oauth2",
          "sqlalchemy",
          "asyncio",
          "pyarrow.parquet",
          "kafka.admin",
          "typing",
          "snowflake.connector",
          "datetime",
          "numpy"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 504,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "report_enforcer",
        "path": "report_enforcer.py",
        "purpose": "Report Enforcer",
        "dependencies": [
          "structlog",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ReportingEnforcer"
        ],
        "state": "complete",
        "loc": 70,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ReportingEnforcer"
        ],
        "functions": []
      },
      {
        "name": "enhanced_agent_surveillance",
        "path": "enhanced_agent_surveillance.py",
        "purpose": "Enhanced Agent Surveillance",
        "dependencies": [
          "logging",
          "json",
          "sqlalchemy",
          "models.secure_models",
          "ai.multi_modal_ai",
          "config",
          "asyncio",
          "monitoring.alert_manager",
          "collections",
          "sqlalchemy.ext.asyncio",
          "typing",
          "datetime",
          "dataclasses",
          "database.secure_database_manager",
          "numpy"
        ],
        "public_api": [
          "BehaviorPattern",
          "AgentThreatIndicator",
          "ConversationContext",
          "AgentSurveillanceSystem"
        ],
        "state": "complete",
        "loc": 600,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "BehaviorPattern",
          "AgentThreatIndicator",
          "ConversationContext",
          "AgentSurveillanceSystem"
        ],
        "functions": []
      },
      {
        "name": "comprehensive_e2e_test",
        "path": "comprehensive_e2e_test.py",
        "purpose": "Test results tracking",
        "dependencies": [
          "database_core_integrated",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "datetime"
        ],
        "public_api": [
          "log_result",
          "test_category",
          "test_environment",
          "test_core_module",
          "test_file_structure",
          "test_models",
          "test_migration_system",
          "test_operations_scripts",
          "test_documentation",
          "decorator",
          "wrapper"
        ],
        "state": "complete",
        "loc": 366,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "log_result",
          "test_category",
          "test_environment",
          "test_core_module",
          "test_file_structure",
          "test_models",
          "test_migration_system",
          "test_operations_scripts",
          "test_documentation",
          "decorator",
          "wrapper"
        ]
      },
      {
        "name": "migration_manager",
        "path": "migration_manager.py",
        "purpose": "Migration Manager",
        "dependencies": [
          "database_core_integrated",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "pathlib",
          "sys",
          "sqlalchemy.ext.asyncio",
          "argparse",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "importlib.util"
        ],
        "public_api": [
          "MigrationStatus",
          "MigrationManager"
        ],
        "state": "incomplete",
        "loc": 360,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MigrationStatus",
          "MigrationManager"
        ],
        "functions": []
      },
      {
        "name": "protocol",
        "path": "protocol.py",
        "purpose": "communication/protocol.py",
        "dependencies": [
          "json",
          "enum",
          "pydantic",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "MessageType",
          "ProtocolVersion",
          "AgentMessage",
          "ProtocolManager",
          "validate_payload_schema",
          "create_message",
          "validate_message"
        ],
        "state": "complete",
        "loc": 90,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MessageType",
          "ProtocolVersion",
          "AgentMessage",
          "ProtocolManager"
        ],
        "functions": [
          "validate_payload_schema",
          "create_message",
          "validate_message"
        ]
      },
      {
        "name": "test_expansion_readiness",
        "path": "test_expansion_readiness.py",
        "purpose": "Add the parent directory to the path",
        "dependencies": [
          "enhanced_workspace.integration.api_versioning",
          "pathlib",
          "os",
          "sys",
          "expansion_readiness",
          "pytest",
          "enhanced_workspace.integration.config_template",
          "enhanced_workspace.integration.plugin_architecture"
        ],
        "public_api": [
          "TestExpansionManager",
          "TestPluginArchitecture",
          "TestAPIVersioning",
          "TestConfigTemplate",
          "TestPlugin",
          "test_expansion_manager_initialization",
          "test_setup_expansion_framework_creates_files",
          "test_plugin_architecture_file_content",
          "test_plugin_manager_initialization",
          "test_plugin_registration",
          "test_hook_system",
          "test_base_plugin_structure",
          "test_api_version_manager_initialization",
          "test_version_registration",
          "test_get_version",
          "test_version_fallback",
          "test_config_structure",
          "test_plugin_settings",
          "test_api_settings",
          "test_feature_flags",
          "test_expansion_modules",
          "test_callback"
        ],
        "state": "complete",
        "loc": 158,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestExpansionManager",
          "TestPluginArchitecture",
          "TestAPIVersioning",
          "TestConfigTemplate",
          "TestPlugin"
        ],
        "functions": [
          "test_expansion_manager_initialization",
          "test_setup_expansion_framework_creates_files",
          "test_plugin_architecture_file_content",
          "test_plugin_manager_initialization",
          "test_plugin_registration",
          "test_hook_system",
          "test_base_plugin_structure",
          "test_api_version_manager_initialization",
          "test_version_registration",
          "test_get_version",
          "test_version_fallback",
          "test_config_structure",
          "test_plugin_settings",
          "test_api_settings",
          "test_feature_flags",
          "test_expansion_modules",
          "test_callback"
        ]
      },
      {
        "name": "learning_agent_api_integration",
        "path": "learning_agent_api_integration.py",
        "purpose": "Learning Agent Api Integration",
        "dependencies": [
          "json",
          "pydantic",
          "uvicorn",
          "learning_agent_core",
          "asyncio",
          "fastapi",
          "uuid",
          "typing",
          "datetime",
          "learning_agent_database",
          "fastapi.responses"
        ],
        "public_api": [
          "CodeAnalysisRequest",
          "TaskOutcomeRequest",
          "UserFeedbackRequest",
          "KnowledgeQueryRequest",
          "CollaborationRequest",
          "KnowledgeApplicationFeedback",
          "AgentRegistrationRequest",
          "ManagerAgentInterface"
        ],
        "state": "complete",
        "loc": 839,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CodeAnalysisRequest",
          "TaskOutcomeRequest",
          "UserFeedbackRequest",
          "KnowledgeQueryRequest",
          "CollaborationRequest",
          "KnowledgeApplicationFeedback",
          "AgentRegistrationRequest",
          "ManagerAgentInterface"
        ],
        "functions": []
      },
      {
        "name": "session_management",
        "path": "session_management.py",
        "purpose": "security/session_manager.py",
        "dependencies": [
          "json",
          "pydantic",
          "redis",
          "hashlib",
          "fastapi",
          "typing",
          "datetime",
          "secrets",
          "jwt"
        ],
        "public_api": [
          "SessionData",
          "SessionManager",
          "TokenData",
          "TokenManager",
          "create_access_token",
          "create_refresh_token",
          "verify_token",
          "set_auth_cookies",
          "clear_auth_cookies",
          "get_token_from_cookie"
        ],
        "state": "complete",
        "loc": 280,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SessionData",
          "SessionManager",
          "TokenData",
          "TokenManager"
        ],
        "functions": [
          "create_access_token",
          "create_refresh_token",
          "verify_token",
          "set_auth_cookies",
          "clear_auth_cookies",
          "get_token_from_cookie"
        ]
      },
      {
        "name": "config_manager",
        "path": "config_manager.py",
        "purpose": "Config Manager",
        "dependencies": [
          "json",
          "asyncio",
          "os",
          "typing",
          "base_agent"
        ],
        "public_api": [
          "ConfigManager"
        ],
        "state": "complete",
        "loc": 142,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ConfigManager"
        ],
        "functions": []
      },
      {
        "name": "setup",
        "path": "setup.py",
        "purpose": "Read README for long description",
        "dependencies": [
          "setuptools",
          "pathlib"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 82,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "database_monitor",
        "path": "database_monitor.py",
        "purpose": "Database Monitor",
        "dependencies": [
          "json",
          "database_core_integrated",
          "time",
          "sqlalchemy",
          "asyncio",
          "pathlib",
          "typing",
          "datetime",
          "dataclasses",
          "argparse",
          "psutil"
        ],
        "public_api": [
          "HealthCheckResult",
          "PerformanceMetrics",
          "DatabaseMonitor",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 446,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "HealthCheckResult",
          "PerformanceMetrics",
          "DatabaseMonitor"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "example_api",
        "path": "example_api.py",
        "purpose": "Example Api",
        "dependencies": [
          "fastapi.middleware.cors",
          "pydantic",
          "sqlalchemy",
          "uvicorn",
          "hashlib",
          "fastapi",
          "os",
          "typing",
          "sqlalchemy.ext.asyncio",
          "DATABASE_CORE",
          "datetime"
        ],
        "public_api": [
          "UserCreate",
          "UserResponse",
          "ProjectCreate",
          "ProjectResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "HealthResponse",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "state": "complete",
        "loc": 448,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UserCreate",
          "UserResponse",
          "ProjectCreate",
          "ProjectResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "HealthResponse",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": []
      },
      {
        "name": "middleware",
        "path": "middleware.py",
        "purpose": "Middleware",
        "dependencies": [
          "starlette.middleware.base",
          "structlog",
          "time",
          "fastapi",
          "shared.config.settings",
          "typing",
          "fastapi.responses"
        ],
        "public_api": [
          "SecurityMiddleware"
        ],
        "state": "complete",
        "loc": 59,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SecurityMiddleware"
        ],
        "functions": []
      },
      {
        "name": "ProductionConfig (2)",
        "path": "ProductionConfig (2).py",
        "purpose": "Production-ready configuration",
        "dependencies": [
          "cryptography.hazmat.primitives"
        ],
        "public_api": [
          "ProductionConfig",
          "init_config",
          "create_app",
          "validate"
        ],
        "state": "complete",
        "loc": 138,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProductionConfig"
        ],
        "functions": [
          "init_config",
          "create_app",
          "validate"
        ]
      },
      {
        "name": "test_api",
        "path": "test_api.py",
        "purpose": "Mock environment variables for testing",
        "dependencies": [
          "pytest_asyncio",
          "httpx",
          "unittest.mock",
          "fastapi.testclient",
          "os",
          "main",
          "pytest",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 269,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "requirements_and_env",
        "path": "requirements_and_env.py",
        "purpose": "requirements.txt",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 52,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "agent_routes",
        "path": "agent_routes.py",
        "purpose": "api/agent_routes.py",
        "dependencies": [
          "json",
          "models",
          "services",
          "fastapi",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 181,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "behavior_monitor",
        "path": "behavior_monitor.py",
        "purpose": "Behavior Monitor",
        "dependencies": [
          "structlog",
          "sqlalchemy.ext.asyncio",
          "shared.utils.cache_manager",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AgentBehaviorMonitor"
        ],
        "state": "complete",
        "loc": 60,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentBehaviorMonitor"
        ],
        "functions": []
      },
      {
        "name": "lifecycle_manager",
        "path": "lifecycle_manager.py",
        "purpose": "Lifecycle Manager",
        "dependencies": [
          "logging",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "typing",
          "uuid",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "AgentLifecycleManager"
        ],
        "state": "complete",
        "loc": 111,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentLifecycleManager"
        ],
        "functions": []
      },
      {
        "name": "project_integrator",
        "path": "project_integrator.py",
        "purpose": "Project Integrator",
        "dependencies": [
          "quality_verifier",
          "logging",
          "json",
          "database",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ProjectIntegrator"
        ],
        "state": "complete",
        "loc": 260,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProjectIntegrator"
        ],
        "functions": []
      },
      {
        "name": "learning_agent_api",
        "path": "learning_agent_api.py",
        "purpose": "Request/Response Models",
        "dependencies": [
          "pydantic",
          "fastapi",
          "typing",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "KnowledgeStoreRequest",
          "KnowledgeSearchRequest",
          "LearningOutcomeRequest",
          "UserFeedbackRequest",
          "InteractionLogRequest",
          "KnowledgeSubscriptionRequest",
          "KnowledgeShareRequest",
          "RecommendationRequest"
        ],
        "state": "complete",
        "loc": 590,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeStoreRequest",
          "KnowledgeSearchRequest",
          "LearningOutcomeRequest",
          "UserFeedbackRequest",
          "InteractionLogRequest",
          "KnowledgeSubscriptionRequest",
          "KnowledgeShareRequest",
          "RecommendationRequest"
        ],
        "functions": []
      },
      {
        "name": "enhanced_learning_agent",
        "path": "enhanced_learning_agent.py",
        "purpose": "Enhanced Learning Agent",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "structlog",
          "httpx",
          "websockets",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "learning_agent_core",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AgentCapability",
          "KnowledgeRequest",
          "ExternalKnowledgeSource",
          "CollectiveKnowledgeLog",
          "EnhancedLearningAgent",
          "get_agents_with_capability"
        ],
        "state": "complete",
        "loc": 1319,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentCapability",
          "KnowledgeRequest",
          "ExternalKnowledgeSource",
          "CollectiveKnowledgeLog",
          "EnhancedLearningAgent"
        ],
        "functions": [
          "get_agents_with_capability"
        ]
      },
      {
        "name": "manager_client",
        "path": "manager_client.py",
        "purpose": "Manager Client",
        "dependencies": [
          "logging",
          "core.config",
          "httpx",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ManagerClient"
        ],
        "state": "complete",
        "loc": 53,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ManagerClient"
        ],
        "functions": []
      },
      {
        "name": "enhanced_agent_orchestrator",
        "path": "enhanced_agent_orchestrator.py",
        "purpose": "Enhanced Agent Orchestrator",
        "dependencies": [
          "sklearn.preprocessing",
          "logging",
          "json",
          "enum",
          "sklearn.cluster",
          "joblib",
          "config",
          "asyncio",
          "sklearn.ensemble",
          "os",
          "collections",
          "typing",
          "datetime",
          "dataclasses",
          "numpy"
        ],
        "public_api": [
          "TaskPriority",
          "AgentCapability",
          "AgentPerformanceLevel",
          "AgentProfile",
          "TaskRequirement",
          "TaskAssignment",
          "IntelligentAgentOrchestrator",
          "update_agent_profile"
        ],
        "state": "complete",
        "loc": 879,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TaskPriority",
          "AgentCapability",
          "AgentPerformanceLevel",
          "AgentProfile",
          "TaskRequirement",
          "TaskAssignment",
          "IntelligentAgentOrchestrator"
        ],
        "functions": [
          "update_agent_profile"
        ]
      },
      {
        "name": "infrastructure.orchestrator",
        "path": "infrastructure.orchestrator.py",
        "purpose": "infrastructure/orchestrator.py",
        "dependencies": [
          "logging",
          "json",
          "monitoring",
          "time",
          "distributed",
          "security",
          "asyncio",
          "optimization",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "InfrastructureOrchestrator",
          "get_system_status"
        ],
        "state": "complete",
        "loc": 223,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "InfrastructureOrchestrator"
        ],
        "functions": [
          "get_system_status"
        ]
      },
      {
        "name": "agent_client",
        "path": "agent_client.py",
        "purpose": "agent_client.py - Reference implementation for agents to connect to manager",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "platform",
          "aiohttp",
          "ssl",
          "asyncio",
          "os",
          "uuid",
          "typing",
          "datetime",
          "socket",
          "psutil"
        ],
        "public_api": [
          "AgentStatus",
          "AgentClient",
          "register_capability"
        ],
        "state": "complete",
        "loc": 356,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "AgentClient"
        ],
        "functions": [
          "register_capability"
        ]
      },
      {
        "name": "auth",
        "path": "auth.py",
        "purpose": "Auth",
        "dependencies": [
          "fastapi.security",
          "core.config",
          "passlib.context",
          "fastapi",
          "uuid",
          "typing",
          "datetime",
          "jwt"
        ],
        "public_api": [
          "AuthService",
          "verify_password",
          "get_password_hash",
          "create_access_token",
          "decode_access_token"
        ],
        "state": "deprecated",
        "loc": 41,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AuthService"
        ],
        "functions": [
          "verify_password",
          "get_password_hash",
          "create_access_token",
          "decode_access_token"
        ]
      },
      {
        "name": "main",
        "path": "main.py",
        "purpose": "main.py - Production-Ready Agent Management System",
        "dependencies": [
          "fastapi.security",
          "middleware.rate_limiter",
          "fastapi.middleware.cors",
          "pydantic",
          "asyncio",
          "api.main",
          "typing",
          "datetime",
          "logging",
          "sqlalchemy",
          "contextlib",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "core.manager_client",
          "json",
          "core.config",
          "redis.asyncio",
          "core.database",
          "fastapi",
          "os",
          "uuid",
          "core.auth",
          "enum",
          "core.sqlalchemy_models",
          "uvicorn",
          "sys",
          "fastapi.responses"
        ],
        "public_api": [
          "UserCreate",
          "UserResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "TaskQueue",
          "AgentManager",
          "Config"
        ],
        "state": "complete",
        "loc": 462,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "UserCreate",
          "UserResponse",
          "AgentCreate",
          "AgentResponse",
          "TaskCreate",
          "TaskResponse",
          "TaskQueue",
          "AgentManager",
          "Config"
        ],
        "functions": []
      },
      {
        "name": "enhanced_analysis_routes",
        "path": "enhanced_analysis_routes.py",
        "purpose": "Core system imports",
        "dependencies": [
          "fastapi.security",
          "ymera_core.cache.redis_cache",
          "ymera_agents.orchestrator",
          "pydantic",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "typing",
          "datetime",
          "ymera_agents.communication.message_bus",
          "ymera_services.vector_db.pinecone_manager",
          "ymera_agents.core.analysis_agent",
          "ymera_core.exceptions",
          "ymera_core.security.auth_manager",
          "ymera_core.monitoring.metrics",
          "re",
          "json",
          "ymera_services.ai.multi_llm_manager",
          "fastapi",
          "ymera_services.code_analysis.quality_analyzer",
          "uuid",
          "enum",
          "ymera_services.github.repository_analyzer",
          "time",
          "ymera_agents.learning.learning_engine",
          "ymera_core.database.manager",
          "functools"
        ],
        "public_api": [
          "AnalysisType",
          "AnalysisStatus",
          "AnalysisPriority",
          "CodeLanguage",
          "AnalysisRequestBase",
          "CodeAnalysisRequest",
          "RepositoryAnalysisRequest",
          "FileAnalysisRequest",
          "BatchAnalysisRequest",
          "QualityMetrics",
          "SecurityIssue",
          "PerformanceInsight",
          "EnhancementSuggestion",
          "LearningInsights",
          "AnalysisResult",
          "AnalysisListResponse",
          "BatchAnalysisResponse",
          "Config",
          "Config",
          "track_metrics",
          "calculate_overall_score",
          "validate_code",
          "validate_filename",
          "validate_repo_url",
          "validate_patterns",
          "validate_files",
          "validate_requests",
          "decorator"
        ],
        "state": "complete",
        "loc": 970,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AnalysisType",
          "AnalysisStatus",
          "AnalysisPriority",
          "CodeLanguage",
          "AnalysisRequestBase",
          "CodeAnalysisRequest",
          "RepositoryAnalysisRequest",
          "FileAnalysisRequest",
          "BatchAnalysisRequest",
          "QualityMetrics",
          "SecurityIssue",
          "PerformanceInsight",
          "EnhancementSuggestion",
          "LearningInsights",
          "AnalysisResult",
          "AnalysisListResponse",
          "BatchAnalysisResponse",
          "Config",
          "Config"
        ],
        "functions": [
          "track_metrics",
          "calculate_overall_score",
          "validate_code",
          "validate_filename",
          "validate_repo_url",
          "validate_patterns",
          "validate_files",
          "validate_requests",
          "decorator"
        ]
      },
      {
        "name": "expansion_readiness",
        "path": "expansion_readiness.py",
        "purpose": "Expansion Readiness",
        "dependencies": [
          "os",
          "collections"
        ],
        "public_api": [
          "ExpansionManager",
          "setup_expansion_framework",
          "create_plugin_architecture",
          "setup_api_versioning",
          "create_configuration_templates",
          "create_expansion_docs"
        ],
        "state": "deprecated",
        "loc": 180,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ExpansionManager"
        ],
        "functions": [
          "setup_expansion_framework",
          "create_plugin_architecture",
          "setup_api_versioning",
          "create_configuration_templates",
          "create_expansion_docs"
        ]
      },
      {
        "name": "agent_manager_integrated",
        "path": "agent_manager_integrated.py",
        "purpose": "Agent Manager Integrated",
        "dependencies": [
          "fastapi.security",
          "fastapi.middleware.cors",
          "hmac",
          "asyncio",
          "dataclasses",
          "typing",
          "monitoring.alert_manager",
          "datetime",
          "logging",
          "sqlalchemy.orm",
          "performance.scaling_manager",
          "security.zero_trust_complete",
          "performance.caching_manager",
          "sqlalchemy",
          "contextlib",
          "security.advanced_authentication",
          "fastapi.middleware.httpsredirect",
          "opentelemetry",
          "prometheus_client",
          "sqlalchemy.ext.asyncio",
          "opentelemetry.exporter.jaeger.thrift",
          "json",
          "opentelemetry.sdk.trace",
          "redis.asyncio",
          "opentelemetry.sdk.trace.export",
          "fastapi",
          "os",
          "uuid",
          "passlib.context",
          "enum",
          "jose",
          "opentelemetry.sdk.resources",
          "time",
          "opentelemetry.semconv.resource",
          "monitoring.telemetry_manager",
          "monitoring.predictive_analytics",
          "security.compliance_manager",
          "performance.queue_manager",
          "hashlib",
          "functools",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 181,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "tests.unit.test_security",
        "path": "tests.unit.test_security.py",
        "purpose": "tests/unit/test_security.py",
        "dependencies": [
          "src.models.user",
          "unittest.mock",
          "fastapi",
          "src.core.security",
          "pytest"
        ],
        "public_api": [
          "TestSecurityUtils",
          "TestAuthentication",
          "test_hash_password",
          "test_generate_verify_jwt",
          "test_generate_api_key",
          "test_encrypt_decrypt_data",
          "test_mfa_verification"
        ],
        "state": "complete",
        "loc": 73,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestSecurityUtils",
          "TestAuthentication"
        ],
        "functions": [
          "test_hash_password",
          "test_generate_verify_jwt",
          "test_generate_api_key",
          "test_encrypt_decrypt_data",
          "test_mfa_verification"
        ]
      },
      {
        "name": "health_check",
        "path": "health_check.py",
        "purpose": "Health Check",
        "dependencies": [
          "shared.database.connection_pool",
          "asyncio",
          "typing",
          "structlog",
          "datetime"
        ],
        "public_api": [
          "HealthChecker"
        ],
        "state": "complete",
        "loc": 37,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "HealthChecker"
        ],
        "functions": []
      },
      {
        "name": "prod_config_manager",
        "path": "prod_config_manager.py",
        "purpose": "Prod Config Manager",
        "dependencies": [
          "json",
          "time",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "opentelemetry",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 983,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "run_comprehensive_e2e_tests",
        "path": "run_comprehensive_e2e_tests.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "json",
          "core.sqlalchemy_models",
          "database_core_integrated",
          "time",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "collections",
          "main",
          "typing",
          "datetime",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "Colors",
          "print_header",
          "print_section",
          "log_test",
          "test_environment",
          "test_module_structure",
          "test_configuration",
          "test_security",
          "test_documentation",
          "generate_report",
          "generate_markdown_report",
          "main"
        ],
        "state": "complete",
        "loc": 594,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Colors"
        ],
        "functions": [
          "print_header",
          "print_section",
          "log_test",
          "test_environment",
          "test_module_structure",
          "test_configuration",
          "test_security",
          "test_documentation",
          "generate_report",
          "generate_markdown_report",
          "main"
        ]
      },
      {
        "name": "integrations.manager",
        "path": "integrations.manager.py",
        "purpose": "integrations/manager.py",
        "dependencies": [
          "logging",
          "celery",
          "azure.mgmt.resource",
          "slack_sdk",
          "httpx",
          "azure.identity",
          "boto3",
          "json",
          "atlassian",
          "google.cloud",
          "simple_salesforce",
          "github",
          "asyncio",
          "typing",
          "datetime",
          "dataclasses",
          "slack_sdk.errors"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 637,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "analytics",
        "path": "analytics.py",
        "purpose": "Analytics",
        "dependencies": [
          "structlog",
          "core.models",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "shared.utils.cache_manager",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ReportingAnalytics"
        ],
        "state": "complete",
        "loc": 44,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ReportingAnalytics"
        ],
        "functions": []
      },
      {
        "name": "agent_orchestrator",
        "path": "agent_orchestrator.py",
        "purpose": "Agent Orchestrator",
        "dependencies": [
          "logging",
          "json",
          "httpx",
          "database",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AgentOrchestrator"
        ],
        "state": "complete",
        "loc": 247,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentOrchestrator"
        ],
        "functions": []
      },
      {
        "name": "notification_manager",
        "path": "notification_manager.py",
        "purpose": "notification_manager.py - Advanced notification system",
        "dependencies": [
          "logging",
          "json",
          "aioredis",
          "pydantic",
          "asyncio",
          "fastapi",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "NotificationPriority",
          "NotificationChannel",
          "NotificationManager"
        ],
        "state": "complete",
        "loc": 286,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "NotificationPriority",
          "NotificationChannel",
          "NotificationManager"
        ],
        "functions": []
      },
      {
        "name": "connection_pool",
        "path": "connection_pool.py",
        "purpose": "Connection Pool",
        "dependencies": [
          "sqlalchemy.orm",
          "contextlib",
          "asyncio",
          "typing",
          "sqlalchemy.pool",
          "shared.config.settings",
          "structlog",
          "sqlalchemy.ext.asyncio"
        ],
        "public_api": [
          "DatabaseManager",
          "is_healthy"
        ],
        "state": "complete",
        "loc": 92,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DatabaseManager"
        ],
        "functions": [
          "is_healthy"
        ]
      },
      {
        "name": "rate_limiter",
        "path": "middleware/rate_limiter.py",
        "purpose": "Rate Limiter",
        "dependencies": [
          "starlette.middleware.base",
          "starlette.responses",
          "starlette.requests",
          "core.config",
          "redis.asyncio",
          "time",
          "starlette.types"
        ],
        "public_api": [
          "RateLimitMiddleware"
        ],
        "state": "complete",
        "loc": 32,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "RateLimitMiddleware"
        ],
        "functions": []
      },
      {
        "name": "__init__",
        "path": "core/__init__.py",
        "purpose": "  Init  ",
        "dependencies": [
          "core.database",
          "core.sqlalchemy_models",
          "core.config",
          "core.auth"
        ],
        "public_api": [
          "Settings",
          "AuthService",
          "Database",
          "Base",
          "User",
          "Agent",
          "Task",
          "AgentStatus",
          "TaskStatus",
          "TaskPriority"
        ],
        "state": "complete",
        "loc": 20,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "sqlalchemy_models",
        "path": "core/sqlalchemy_models.py",
        "purpose": "Sqlalchemy Models",
        "dependencies": [
          "sqlalchemy.orm",
          "enum",
          "sqlalchemy",
          "uuid",
          "datetime"
        ],
        "public_api": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task"
        ],
        "state": "complete",
        "loc": 69,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "TaskStatus",
          "TaskPriority",
          "User",
          "Agent",
          "Task"
        ],
        "functions": []
      },
      {
        "name": "config",
        "path": "core/config.py",
        "purpose": "============================================================================",
        "dependencies": [
          "pydantic",
          "pathlib",
          "pydantic_settings",
          "os",
          "typing"
        ],
        "public_api": [
          "ProjectAgentSettings",
          "Config",
          "validate_jwt_secret",
          "validate_quality_threshold",
          "validate_quality_weights",
          "parse_cors_origins",
          "parse_kafka_servers",
          "parse_trusted_hosts",
          "ensure_storage_path_exists",
          "ensure_log_directory_exists",
          "get_agent_urls",
          "is_production",
          "is_development"
        ],
        "state": "complete",
        "loc": 224,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ProjectAgentSettings",
          "Config"
        ],
        "functions": [
          "validate_jwt_secret",
          "validate_quality_threshold",
          "validate_quality_weights",
          "parse_cors_origins",
          "parse_kafka_servers",
          "parse_trusted_hosts",
          "ensure_storage_path_exists",
          "ensure_log_directory_exists",
          "get_agent_urls",
          "is_production",
          "is_development"
        ]
      },
      {
        "name": "database",
        "path": "core/database.py",
        "purpose": "Database",
        "dependencies": [
          "json",
          "logging",
          "contextlib",
          "asyncio",
          "asyncpg",
          "typing",
          "datetime"
        ],
        "public_api": [
          "Database"
        ],
        "state": "complete",
        "loc": 70,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Database"
        ],
        "functions": []
      },
      {
        "name": "manager_client",
        "path": "core/manager_client.py",
        "purpose": "Manager Client",
        "dependencies": [
          "logging",
          "core.config",
          "httpx",
          "typing",
          "datetime"
        ],
        "public_api": [
          "ManagerClient"
        ],
        "state": "complete",
        "loc": 53,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ManagerClient"
        ],
        "functions": []
      },
      {
        "name": "auth",
        "path": "core/auth.py",
        "purpose": "Auth",
        "dependencies": [
          "fastapi.security",
          "core.config",
          "passlib.context",
          "fastapi",
          "uuid",
          "typing",
          "datetime",
          "jwt"
        ],
        "public_api": [
          "AuthService",
          "verify_password",
          "get_password_hash",
          "create_access_token",
          "decode_access_token"
        ],
        "state": "deprecated",
        "loc": 41,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AuthService"
        ],
        "functions": [
          "verify_password",
          "get_password_hash",
          "create_access_token",
          "decode_access_token"
        ]
      },
      {
        "name": "init_database",
        "path": "enhanced_workspace/deployment/init_database.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "os",
          "sys",
          "psycopg2",
          "time"
        ],
        "public_api": [
          "wait_for_database",
          "create_tables",
          "seed_initial_data",
          "main"
        ],
        "state": "complete",
        "loc": 186,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "wait_for_database",
          "create_tables",
          "seed_initial_data",
          "main"
        ]
      },
      {
        "name": "validate_deployment",
        "path": "enhanced_workspace/deployment/validate_deployment.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "pathlib",
          "os",
          "sys",
          "subprocess"
        ],
        "public_api": [
          "check_environment_variables",
          "check_docker",
          "check_docker_compose",
          "check_deployment_files",
          "check_integration_directory",
          "main"
        ],
        "state": "complete",
        "loc": 133,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "check_environment_variables",
          "check_docker",
          "check_docker_compose",
          "check_deployment_files",
          "check_integration_directory",
          "main"
        ]
      },
      {
        "name": "plugin_architecture",
        "path": "enhanced_workspace/integration/plugin_architecture.py",
        "purpose": "PLUGIN ARCHITECTURE FOR EXPANSION",
        "dependencies": [
          "collections"
        ],
        "public_api": [
          "PluginManager",
          "BasePlugin",
          "register_plugin",
          "add_hook",
          "execute_hook"
        ],
        "state": "complete",
        "loc": 23,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PluginManager",
          "BasePlugin"
        ],
        "functions": [
          "register_plugin",
          "add_hook",
          "execute_hook"
        ]
      },
      {
        "name": "config_template",
        "path": "enhanced_workspace/integration/config_template.py",
        "purpose": "CONFIGURATION TEMPLATE FOR EXPANSIONS",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 22,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "api_versioning",
        "path": "enhanced_workspace/integration/api_versioning.py",
        "purpose": "API VERSIONING SYSTEM",
        "dependencies": [],
        "public_api": [
          "APIVersionManager",
          "register_version",
          "get_version",
          "deprecate_version"
        ],
        "state": "deprecated",
        "loc": 12,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "APIVersionManager"
        ],
        "functions": [
          "register_version",
          "get_version",
          "deprecate_version"
        ]
      },
      {
        "name": "agents_enhanced",
        "path": "enhanced_workspace/agents/integrated/agents_enhanced.py",
        "purpose": "Agents Enhanced",
        "dependencies": [
          "asyncio",
          "datetime",
          "logging",
          "typing"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 116,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "database_enhanced",
        "path": "enhanced_workspace/database/integrated/database_enhanced.py",
        "purpose": "Database Enhanced",
        "dependencies": [
          "datetime",
          "logging",
          "typing"
        ],
        "public_api": [
          "EnhancedDatabaseManager",
          "EnhancedQueryBuilder",
          "EnhancedMigrationManager",
          "EnhancedConnectionPool"
        ],
        "state": "complete",
        "loc": 89,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedDatabaseManager",
          "EnhancedQueryBuilder",
          "EnhancedMigrationManager",
          "EnhancedConnectionPool"
        ],
        "functions": [
          "select",
          "from_table",
          "where",
          "build"
        ]
      }
    ],
    "agents": [
      {
        "name": "component_enhancement_workflow",
        "path": "component_enhancement_workflow.py",
        "purpose": "Component Enhancement Workflow",
        "dependencies": [
          "json",
          "logging",
          "pathlib",
          "asyncio",
          "os",
          "shutil",
          "collections",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 754,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "editing_agent_v2 (1)",
        "path": "editing_agent_v2 (1).py",
        "purpose": "External libraries (ensure these are in requirements.txt)",
        "dependencies": [
          "textstat",
          "spacy",
          "asyncio",
          "typing",
          "datetime",
          "language_tool_python",
          "difflib",
          "re",
          "nltk",
          "json",
          "os",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "sys",
          "nltk.sentiment",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "EditType",
          "ContentType",
          "EditingMode",
          "EditSuggestion",
          "EditingSession",
          "ContentAnalysis",
          "EditingAgent",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 1144,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EditType",
          "ContentType",
          "EditingMode",
          "EditSuggestion",
          "EditingSession",
          "ContentAnalysis",
          "EditingAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "prod_monitoring_agent",
        "path": "prod_monitoring_agent.py",
        "purpose": "Prod Monitoring Agent",
        "dependencies": [
          "asyncio",
          "typing",
          "datetime",
          "psutil",
          "statistics",
          "collections",
          "prometheus_client",
          "json",
          "sklearn.ensemble",
          "os",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "aiohttp",
          "signal",
          "numpy",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "HealthStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "SLADefinition",
          "RealTimeMonitoringAgent",
          "to_dict",
          "to_dict",
          "can_trigger"
        ],
        "state": "complete",
        "loc": 783,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricType",
          "AlertSeverity",
          "AlertStatus",
          "HealthStatus",
          "Metric",
          "Alert",
          "AlertRule",
          "SLADefinition",
          "RealTimeMonitoringAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "can_trigger"
        ]
      },
      {
        "name": "query_optimization",
        "path": "query_optimization.py",
        "purpose": "Query Optimization",
        "dependencies": [
          "logging",
          "json",
          "time",
          "sqlalchemy",
          "pathlib",
          "collections",
          "typing",
          "datetime",
          "sqlalchemy.engine"
        ],
        "public_api": [
          "QueryPerformanceMonitor",
          "IndexAnalyzer",
          "QueryOptimizer",
          "register_listeners",
          "get_query_statistics",
          "get_slow_queries",
          "clear_statistics",
          "find_missing_indexes",
          "analyze_index_usage",
          "find_unused_indexes",
          "analyze_query_plan",
          "get_expensive_queries",
          "update_statistics",
          "receive_before_cursor_execute",
          "receive_after_cursor_execute",
          "receive_dbapi_error"
        ],
        "state": "complete",
        "loc": 282,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "QueryPerformanceMonitor",
          "IndexAnalyzer",
          "QueryOptimizer"
        ],
        "functions": [
          "register_listeners",
          "get_query_statistics",
          "get_slow_queries",
          "clear_statistics",
          "find_missing_indexes",
          "analyze_index_usage",
          "find_unused_indexes",
          "analyze_query_plan",
          "get_expensive_queries",
          "update_statistics",
          "receive_before_cursor_execute",
          "receive_after_cursor_execute",
          "receive_dbapi_error"
        ]
      },
      {
        "name": "chatting_files_agent_api_system",
        "path": "chatting_files_agent_api_system.py",
        "purpose": "============================================================================",
        "dependencies": [
          "fastapi.staticfiles",
          "json",
          "fastapi.middleware.cors",
          "websockets",
          "logging",
          "pydantic",
          "asyncio",
          "pathlib",
          "os",
          "fastapi",
          "uuid",
          "typing",
          "aiofiles",
          "datetime",
          "mimetypes",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 647,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "examination_agent",
        "path": "examination_agent.py",
        "purpose": "Examination Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "hashlib",
          "asyncio",
          "statistics",
          "os",
          "collections",
          "opentelemetry",
          "typing",
          "numpy",
          "dataclasses",
          "traceback",
          "base_agent",
          "datetime"
        ],
        "public_api": [
          "ExaminationType",
          "QualityLevel",
          "ExaminationResult",
          "ComprehensiveAnalysis",
          "ExaminationAgent"
        ],
        "state": "complete",
        "loc": 1058,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ExaminationType",
          "QualityLevel",
          "ExaminationResult",
          "ComprehensiveAnalysis",
          "ExaminationAgent"
        ],
        "functions": []
      },
      {
        "name": "learning_agent_helpers",
        "path": "learning_agent_helpers.py",
        "purpose": "============================================================================",
        "dependencies": [
          "re",
          "models",
          "structlog",
          "sqlalchemy",
          "sqlalchemy.ext.asyncio",
          "collections",
          "uuid",
          "typing",
          "datetime"
        ],
        "public_api": [
          "AgentCommunicator",
          "ModelTrainer",
          "LearningAnalytics",
          "AgentLifecycleManager",
          "KnowledgeValidator",
          "PerformanceTracker",
          "KnowledgeQualityScorer",
          "PatternAnalyzer",
          "KnowledgeMerger",
          "KnowledgeExporter",
          "calculate_similarity",
          "extract_keywords",
          "normalize_text",
          "calculate_confidence_score",
          "format_insight",
          "calculate_learning_velocity",
          "identify_learning_trends"
        ],
        "state": "complete",
        "loc": 895,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentCommunicator",
          "ModelTrainer",
          "LearningAnalytics",
          "AgentLifecycleManager",
          "KnowledgeValidator",
          "PerformanceTracker",
          "KnowledgeQualityScorer",
          "PatternAnalyzer",
          "KnowledgeMerger",
          "KnowledgeExporter"
        ],
        "functions": [
          "calculate_similarity",
          "extract_keywords",
          "normalize_text",
          "calculate_confidence_score",
          "format_insight",
          "calculate_learning_velocity",
          "identify_learning_trends",
          "record_operation",
          "record_cache_hit",
          "record_cache_miss",
          "get_metrics",
          "reset",
          "score_knowledge",
          "analyze_frequency_pattern",
          "analyze_temporal_pattern",
          "detect_correlation"
        ]
      },
      {
        "name": "agents_management_api",
        "path": "agents_management_api.py",
        "purpose": "Core system imports",
        "dependencies": [
          "fastapi.security",
          "ymera_core.cache.redis_cache",
          "ymera_agents.orchestrator",
          "pydantic",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "typing",
          "datetime",
          "ymera_agents.communication.message_bus",
          "logging",
          "ymera_core.exceptions",
          "ymera_core.security.auth_manager",
          "ymera_agents.lifecycle_manager",
          "json",
          "ymera_services.ai.multi_llm_manager",
          "fastapi",
          "ymera_agents.learning.knowledge_base",
          "uuid",
          "ymera_core.config",
          "enum",
          "ymera_agents.learning.learning_engine",
          "ymera_core.database.manager",
          "ymera_agents.registry"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 1198,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "workflow_engine",
        "path": "workflow_engine.py",
        "purpose": "Workflow Engine",
        "dependencies": [
          "enum",
          "structlog",
          "time",
          "task_orchestrator",
          "asyncio",
          "uuid",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "WorkflowStatus",
          "StepStatus",
          "WorkflowStep",
          "WorkflowDefinition",
          "StepExecution",
          "WorkflowExecution",
          "WorkflowEngine",
          "validate",
          "has_cycle"
        ],
        "state": "incomplete",
        "loc": 437,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "WorkflowStatus",
          "StepStatus",
          "WorkflowStep",
          "WorkflowDefinition",
          "StepExecution",
          "WorkflowExecution",
          "WorkflowEngine"
        ],
        "functions": [
          "validate",
          "has_cycle"
        ]
      },
      {
        "name": "enhanced_base_agent",
        "path": "enhanced_base_agent.py",
        "purpose": "Enhanced Base Agent",
        "dependencies": [
          "logging.handlers",
          "nats",
          "asyncio",
          "nats.aio.client",
          "dataclasses",
          "typing",
          "datetime",
          "logging",
          "asyncpg.exceptions",
          "contextlib",
          "json",
          "redis.asyncio",
          "random",
          "uuid",
          "asyncpg",
          "nats.errors",
          "enum",
          "time",
          "signal",
          "sys",
          "functools",
          "traceback"
        ],
        "public_api": [
          "Priority",
          "AgentState",
          "ConnectionState",
          "CircuitBreakerState",
          "AgentConfig",
          "TaskRequest",
          "AgentMetrics",
          "CircuitBreaker",
          "BaseAgent",
          "ContextFilter",
          "validate",
          "to_dict",
          "from_dict",
          "is_expired",
          "should_retry",
          "to_dict",
          "get_state",
          "is_healthy",
          "signal_handler",
          "filter"
        ],
        "state": "complete",
        "loc": 1125,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Priority",
          "AgentState",
          "ConnectionState",
          "CircuitBreakerState",
          "AgentConfig",
          "TaskRequest",
          "AgentMetrics",
          "CircuitBreaker",
          "BaseAgent",
          "ContextFilter"
        ],
        "functions": [
          "validate",
          "to_dict",
          "from_dict",
          "is_expired",
          "should_retry",
          "to_dict",
          "get_state",
          "is_healthy",
          "signal_handler",
          "filter"
        ]
      },
      {
        "name": "prod_performance_engine",
        "path": "prod_performance_engine.py",
        "purpose": "Prod Performance Engine",
        "dependencies": [
          "asyncio",
          "typing",
          "datetime",
          "psutil",
          "statistics",
          "collections",
          "opentelemetry",
          "prometheus_client",
          "json",
          "redis.asyncio",
          "os",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "signal",
          "sys",
          "numpy",
          "dataclasses",
          "traceback",
          "gc"
        ],
        "public_api": [
          "PerformanceMetric",
          "AlertSeverity",
          "OptimizationStrategy",
          "AnomalyType",
          "PerformanceThreshold",
          "PerformanceAlert",
          "PerformanceSnapshot",
          "OptimizationRecommendation",
          "AnomalyDetection",
          "PerformanceEngine",
          "AnomalyDetector",
          "check_violation",
          "reset",
          "to_dict",
          "to_dict",
          "is_valid",
          "to_dict",
          "to_dict",
          "detect"
        ],
        "state": "complete",
        "loc": 762,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceMetric",
          "AlertSeverity",
          "OptimizationStrategy",
          "AnomalyType",
          "PerformanceThreshold",
          "PerformanceAlert",
          "PerformanceSnapshot",
          "OptimizationRecommendation",
          "AnomalyDetection",
          "PerformanceEngine",
          "AnomalyDetector"
        ],
        "functions": [
          "check_violation",
          "reset",
          "to_dict",
          "to_dict",
          "is_valid",
          "to_dict",
          "to_dict",
          "detect"
        ]
      },
      {
        "name": "final_verification",
        "path": "final_verification.py",
        "purpose": "Final Verification",
        "dependencies": [
          "json",
          "pathlib",
          "os",
          "sys",
          "typing",
          "datetime"
        ],
        "public_api": [
          "FinalVerifier",
          "main",
          "verify_complete_platform",
          "verify_analysis_complete",
          "verify_enhancement_complete",
          "verify_testing_complete",
          "verify_integration_ready",
          "verify_deployment_ready",
          "verify_expansion_ready",
          "generate_success_report",
          "generate_issues_report"
        ],
        "state": "complete",
        "loc": 313,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FinalVerifier"
        ],
        "functions": [
          "main",
          "verify_complete_platform",
          "verify_analysis_complete",
          "verify_enhancement_complete",
          "verify_testing_complete",
          "verify_integration_ready",
          "verify_deployment_ready",
          "verify_expansion_ready",
          "generate_success_report",
          "generate_issues_report"
        ]
      },
      {
        "name": "advanced_features",
        "path": "advanced_features.py",
        "purpose": "advanced_features.py - Enterprise features module",
        "dependencies": [
          "json",
          "logging",
          "redis.asyncio",
          "hashlib",
          "asyncio",
          "fastapi",
          "hmac",
          "typing",
          "prometheus_client",
          "datetime",
          "functools",
          "psutil"
        ],
        "public_api": [
          "ConnectionManager",
          "CacheManager",
          "SecurityManager",
          "TaskScheduler",
          "HealthMonitor",
          "NotificationManager",
          "AnalyticsEngine",
          "disconnect"
        ],
        "state": "complete",
        "loc": 363,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ConnectionManager",
          "CacheManager",
          "SecurityManager",
          "TaskScheduler",
          "HealthMonitor",
          "NotificationManager",
          "AnalyticsEngine"
        ],
        "functions": [
          "disconnect"
        ]
      },
      {
        "name": "test_component_enhancement_workflow",
        "path": "test_component_enhancement_workflow.py",
        "purpose": "Test Component Enhancement Workflow",
        "dependencies": [
          "unittest",
          "json",
          "logging",
          "component_enhancement_workflow",
          "pathlib",
          "asyncio",
          "os",
          "shutil",
          "tempfile",
          "prometheus_client",
          "pytest"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 447,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "test_project_agent",
        "path": "test_project_agent.py",
        "purpose": "Test Project Agent",
        "dependencies": [
          "pytest",
          "agents.project_agent.agent"
        ],
        "public_api": [
          "TestQualityAnalyzer",
          "TestProjectAgent",
          "analyzer"
        ],
        "state": "complete",
        "loc": 33,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestQualityAnalyzer",
          "TestProjectAgent"
        ],
        "functions": [
          "analyzer"
        ]
      },
      {
        "name": "file_routes_complete",
        "path": "file_routes_complete.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "pydantic",
          "app.utils.file_validator",
          "structlog",
          "typing",
          "datetime",
          "mimetypes",
          "app.utils.virus_scanner",
          "sqlalchemy",
          "app.SECURITY.jwt_handler",
          "app.DATABASE_CORE.database_connection",
          "magic",
          "app.CORE_CONFIGURATION.config_settings",
          "sqlalchemy.ext.asyncio",
          "fastapi",
          "os",
          "uuid",
          "PIL",
          "hashlib",
          "pathlib",
          "app.models.user",
          "aiofiles",
          "app.models.file",
          "fastapi.responses"
        ],
        "public_api": [
          "router",
          "FileService",
          "FileUploadRequest",
          "FileUploadResponse",
          "FileMetadataResponse",
          "FileListResponse"
        ],
        "state": "complete",
        "loc": 742,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FileUploadRequest",
          "FileUploadResponse",
          "FileMetadataResponse",
          "FileListResponse",
          "FileShareRequest",
          "FileService",
          "Config",
          "Config"
        ],
        "functions": [
          "validate_folder_path",
          "validate_tags",
          "validate_permission"
        ]
      },
      {
        "name": "agent_discovery",
        "path": "agent_discovery.py",
        "purpose": "Agent Discovery",
        "dependencies": [
          "agent_registry",
          "enum",
          "asyncio",
          "random",
          "typing",
          "structlog",
          "dataclasses"
        ],
        "public_api": [
          "DiscoveryStrategy",
          "DiscoveryRequest",
          "AgentDiscovery"
        ],
        "state": "complete",
        "loc": 230,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DiscoveryStrategy",
          "DiscoveryRequest",
          "AgentDiscovery"
        ],
        "functions": []
      },
      {
        "name": "api_extensions",
        "path": "api_extensions.py",
        "purpose": "api_extensions.py - Complete API routes and WebSocket implementation",
        "dependencies": [
          "json",
          "io",
          "csv",
          "asyncio",
          "fastapi",
          "advanced_features",
          "uuid",
          "typing",
          "datetime",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 509,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "performance_engine_agent",
        "path": "performance_engine_agent.py",
        "purpose": "Performance Engine Agent",
        "dependencies": [
          "asyncio",
          "cProfile",
          "concurrent.futures",
          "typing",
          "datetime",
          "psutil",
          "resource",
          "statistics",
          "collections",
          "multiprocessing",
          "opentelemetry",
          "tracemalloc",
          "opentelemetry.trace",
          "json",
          "threading",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "sys",
          "pstats",
          "dataclasses",
          "gc"
        ],
        "public_api": [
          "PerformanceMetric",
          "OptimizationStrategy",
          "AlertSeverity",
          "PerformanceThreshold",
          "PerformanceAlert",
          "OptimizationRecommendation",
          "PerformanceProfile",
          "PerformanceEngineAgent"
        ],
        "state": "complete",
        "loc": 530,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceMetric",
          "OptimizationStrategy",
          "AlertSeverity",
          "PerformanceThreshold",
          "PerformanceAlert",
          "OptimizationRecommendation",
          "PerformanceProfile",
          "PerformanceEngineAgent"
        ],
        "functions": []
      },
      {
        "name": "coding_agent",
        "path": "coding_agent.py",
        "purpose": "Coding Agent",
        "dependencies": [
          "subprocess",
          "re",
          "json",
          "resource",
          "time",
          "enhanced_base_agent",
          "contextlib",
          "hashlib",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "typing",
          "signal",
          "shutil",
          "tempfile",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "CodeLanguage",
          "ExecutionStatus",
          "CodeExecutionRequest",
          "CodeExecutionResult",
          "CodingAgentMetrics",
          "SecurityValidator",
          "CodeExecutor",
          "CodingAgent",
          "validate",
          "get_cache_key",
          "to_dict",
          "to_dict",
          "validate_code",
          "cleanup"
        ],
        "state": "complete",
        "loc": 934,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CodeLanguage",
          "ExecutionStatus",
          "CodeExecutionRequest",
          "CodeExecutionResult",
          "CodingAgentMetrics",
          "SecurityValidator",
          "CodeExecutor",
          "CodingAgent"
        ],
        "functions": [
          "validate",
          "get_cache_key",
          "to_dict",
          "to_dict",
          "validate_code",
          "cleanup"
        ]
      },
      {
        "name": "test_learning_agent",
        "path": "test_learning_agent.py",
        "purpose": "Test Learning Agent",
        "dependencies": [
          "pytest",
          "agents.learning_agent.agent"
        ],
        "public_api": [
          "TestKnowledgeExtractor",
          "TestLearningAgent",
          "extractor"
        ],
        "state": "complete",
        "loc": 29,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestKnowledgeExtractor",
          "TestLearningAgent"
        ],
        "functions": [
          "extractor"
        ]
      },
      {
        "name": "file_validator_util",
        "path": "file_validator_util.py",
        "purpose": "File Validator Util",
        "dependencies": [
          "PIL",
          "io",
          "mimetypes",
          "zipfile",
          "hashlib",
          "pathlib",
          "magic",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "FileValidator",
          "ValidationResult"
        ],
        "state": "complete",
        "loc": 206,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ValidationResult",
          "FileValidator"
        ],
        "functions": [
          "calculate_checksum"
        ]
      },
      {
        "name": "extensions",
        "path": "extensions.py",
        "purpose": "api_extensions.py - Complete API routes and WebSocket implementation",
        "dependencies": [
          "json",
          "io",
          "csv",
          "asyncio",
          "fastapi",
          "advanced_features",
          "uuid",
          "typing",
          "datetime",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 509,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "tests.security.test_security",
        "path": "tests.security.test_security.py",
        "purpose": "tests/security/test_security.py",
        "dependencies": [
          "fastapi",
          "pytest",
          "json",
          "security_headers"
        ],
        "public_api": [
          "TestSecurityHeaders",
          "TestAPISecurity"
        ],
        "state": "complete",
        "loc": 74,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestSecurityHeaders",
          "TestAPISecurity"
        ],
        "functions": []
      },
      {
        "name": "infrastructure.distributed__init__",
        "path": "infrastructure.distributed__init__.py",
        "purpose": "infrastructure/distributed/__init__.py",
        "dependencies": [
          "logging",
          "enum",
          "time",
          "asyncio",
          "uuid",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "ServiceType",
          "ServiceInstance",
          "ServiceDiscovery",
          "APIGateway",
          "DistributedTrainingManager",
          "MessageQueue"
        ],
        "state": "complete",
        "loc": 254,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ServiceType",
          "ServiceInstance",
          "ServiceDiscovery",
          "APIGateway",
          "DistributedTrainingManager",
          "MessageQueue"
        ],
        "functions": []
      },
      {
        "name": "quickstart_script",
        "path": "quickstart_script.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "typing",
          "subprocess",
          "cryptography.fernet"
        ],
        "public_api": [
          "Colors",
          "QuickStart",
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "main",
          "run_command",
          "check_prerequisites",
          "create_env_file",
          "install_dependencies",
          "verify_files",
          "compile_python_files",
          "start_redis",
          "run_tests",
          "create_docker_compose",
          "create_systemd_service",
          "generate_security_keys",
          "create_health_check_script",
          "print_next_steps",
          "run"
        ],
        "state": "complete",
        "loc": 477,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Colors",
          "QuickStart"
        ],
        "functions": [
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "main",
          "run_command",
          "check_prerequisites",
          "create_env_file",
          "install_dependencies",
          "verify_files",
          "compile_python_files",
          "start_redis",
          "run_tests",
          "create_docker_compose",
          "create_systemd_service",
          "generate_security_keys",
          "create_health_check_script",
          "print_next_steps",
          "run"
        ]
      },
      {
        "name": "static_analysis_examples",
        "path": "static_analysis_examples.py",
        "purpose": "Static Analysis Examples",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "nats.aio.client",
          "uuid",
          "typing"
        ],
        "public_api": [
          "StaticAnalysisClient"
        ],
        "state": "deprecated",
        "loc": 720,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "StaticAnalysisClient"
        ],
        "functions": []
      },
      {
        "name": "metrics_collector",
        "path": "metrics_collector.py",
        "purpose": "Metrics Collector",
        "dependencies": [
          "logging",
          "time",
          "asyncio",
          "collections",
          "typing",
          "datetime"
        ],
        "public_api": [
          "MetricsCollector",
          "MetricsMiddleware",
          "increment_counter",
          "get_counter",
          "set_gauge",
          "get_gauge",
          "observe_histogram",
          "get_histogram_stats",
          "record_response_time",
          "get_response_time_stats",
          "record_submission",
          "record_build",
          "get_project_metrics"
        ],
        "state": "complete",
        "loc": 263,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricsCollector",
          "MetricsMiddleware"
        ],
        "functions": [
          "increment_counter",
          "get_counter",
          "set_gauge",
          "get_gauge",
          "observe_histogram",
          "get_histogram_stats",
          "record_response_time",
          "get_response_time_stats",
          "record_submission",
          "record_build",
          "get_project_metrics"
        ]
      },
      {
        "name": "continuous_learning",
        "path": "continuous_learning.py",
        "purpose": "Continuous Learning",
        "dependencies": [
          "logging",
          "enum",
          "asyncio",
          "typing",
          "datetime",
          "dataclasses",
          "numpy"
        ],
        "public_api": [
          "DriftType",
          "DriftDetection",
          "ContinuousLearningEngine",
          "set_learning_engine",
          "set_knowledge_base",
          "set_pattern_recognizer"
        ],
        "state": "complete",
        "loc": 235,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DriftType",
          "DriftDetection",
          "ContinuousLearningEngine"
        ],
        "functions": [
          "set_learning_engine",
          "set_knowledge_base",
          "set_pattern_recognizer"
        ]
      },
      {
        "name": "infrastructure.security__init__",
        "path": "infrastructure.security__init__.py",
        "purpose": "infrastructure/security/__init__.py",
        "dependencies": [
          "re",
          "logging",
          "enum",
          "time",
          "asyncio",
          "string",
          "typing",
          "bcrypt",
          "dataclasses",
          "secrets",
          "cryptography.fernet",
          "jwt"
        ],
        "public_api": [
          "SecurityLevel",
          "User",
          "AuthenticationManager",
          "EncryptionManager",
          "DataMasker",
          "SecurityScanner",
          "AuditLogger",
          "register_user",
          "authenticate_user",
          "verify_token",
          "blacklist_token",
          "has_permission",
          "has_role",
          "generate_key",
          "encrypt_data",
          "decrypt_data",
          "rotate_key",
          "detect_pii",
          "mask_pii",
          "log_event",
          "get_events",
          "generate_compliance_report"
        ],
        "state": "complete",
        "loc": 280,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SecurityLevel",
          "User",
          "AuthenticationManager",
          "EncryptionManager",
          "DataMasker",
          "SecurityScanner",
          "AuditLogger"
        ],
        "functions": [
          "register_user",
          "authenticate_user",
          "verify_token",
          "blacklist_token",
          "has_permission",
          "has_role",
          "generate_key",
          "encrypt_data",
          "decrypt_data",
          "rotate_key",
          "detect_pii",
          "mask_pii",
          "log_event",
          "get_events",
          "generate_compliance_report"
        ]
      },
      {
        "name": "communication_agent",
        "path": "communication_agent.py",
        "purpose": "Communication Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "zlib",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "opentelemetry",
          "uuid",
          "typing",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "MessageType",
          "MessagePriority",
          "DeliveryMode",
          "Message",
          "MessageRoute",
          "ConversationContext",
          "CommunicationAgent"
        ],
        "state": "complete",
        "loc": 787,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MessageType",
          "MessagePriority",
          "DeliveryMode",
          "Message",
          "MessageRoute",
          "ConversationContext",
          "CommunicationAgent"
        ],
        "functions": []
      },
      {
        "name": "validation_agent",
        "path": "validation_agent.py",
        "purpose": "Validation Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "pydantic",
          "sqlalchemy.dialects",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "opentelemetry",
          "jsonschema",
          "uuid",
          "typing",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "ValidationLevel",
          "ValidationResult",
          "ValidationRule",
          "ValidationIssue",
          "ValidationReport",
          "ValidationAgent"
        ],
        "state": "complete",
        "loc": 533,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ValidationLevel",
          "ValidationResult",
          "ValidationRule",
          "ValidationIssue",
          "ValidationReport",
          "ValidationAgent"
        ],
        "functions": []
      },
      {
        "name": "enhanced_chat_routes",
        "path": "enhanced_chat_routes.py",
        "purpose": "Enhanced Chat Routes",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "ymera_core.cache.redis_cache",
          "ymera_services.ai.multi_llm_manager",
          "ymera_agents.learning.learning_engine",
          "pydantic",
          "ymera_agents.orchestrator",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "fastapi",
          "ymera_core.database.manager",
          "ymera_core.security.auth_manager",
          "uuid",
          "typing",
          "datetime",
          "fastapi.responses"
        ],
        "public_api": [
          "ChatMode",
          "MessageType",
          "MessageStatus",
          "CreateSessionRequest",
          "SendMessageRequest",
          "UpdateSessionRequest",
          "SessionResponse",
          "MessageResponse",
          "ChatAnalyticsResponse",
          "ChatConnectionManager",
          "Config",
          "Config",
          "Config",
          "validate_title",
          "validate_content",
          "get_active_users",
          "get_user_sessions",
          "get_connection_count"
        ],
        "state": "complete",
        "loc": 938,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ChatMode",
          "MessageType",
          "MessageStatus",
          "CreateSessionRequest",
          "SendMessageRequest",
          "UpdateSessionRequest",
          "SessionResponse",
          "MessageResponse",
          "ChatAnalyticsResponse",
          "ChatConnectionManager",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "validate_title",
          "validate_content",
          "get_active_users",
          "get_user_sessions",
          "get_connection_count"
        ]
      },
      {
        "name": "external_learning",
        "path": "external_learning.py",
        "purpose": "External Learning",
        "dependencies": [
          "logging",
          "enum",
          "aiohttp",
          "asyncio",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "ExternalSource",
          "ExternalKnowledge",
          "ExternalLearningIntegrator",
          "set_learning_engine",
          "set_knowledge_base"
        ],
        "state": "complete",
        "loc": 249,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ExternalSource",
          "ExternalKnowledge",
          "ExternalLearningIntegrator"
        ],
        "functions": [
          "set_learning_engine",
          "set_knowledge_base"
        ]
      },
      {
        "name": "monitoring.alerting",
        "path": "monitoring.alerting.py",
        "purpose": "monitoring/alerting.py",
        "dependencies": [
          "logging",
          "slack_sdk",
          "httpx",
          "time",
          "asyncio",
          "smtplib",
          "email.mime.text",
          "typing",
          "datetime",
          "dataclasses",
          "slack_sdk.errors"
        ],
        "public_api": [
          "Alert",
          "AlertRule",
          "IntelligentAlertingSystem",
          "AnomalyDetector",
          "IncidentManager"
        ],
        "state": "complete",
        "loc": 380,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Alert",
          "AlertRule",
          "IntelligentAlertingSystem",
          "AnomalyDetector",
          "IncidentManager"
        ],
        "functions": []
      },
      {
        "name": "prod_communication_agent",
        "path": "prod_communication_agent.py",
        "purpose": "Prod Communication Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "zlib",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "opentelemetry",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "MessageType",
          "MessagePriority",
          "DeliveryMode",
          "MessageStatus",
          "Message",
          "MessageRoute",
          "ConversationContext",
          "CommunicationAgent",
          "is_expired",
          "should_retry",
          "size_bytes",
          "matches",
          "is_active",
          "add_message"
        ],
        "state": "complete",
        "loc": 1691,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MessageType",
          "MessagePriority",
          "DeliveryMode",
          "MessageStatus",
          "Message",
          "MessageRoute",
          "ConversationContext",
          "CommunicationAgent"
        ],
        "functions": [
          "is_expired",
          "should_retry",
          "size_bytes",
          "matches",
          "is_active",
          "add_message"
        ]
      },
      {
        "name": "metrics_agent_production",
        "path": "metrics_agent_production.py",
        "purpose": "Metrics Agent Production",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "statistics",
          "os",
          "collections",
          "typing",
          "datetime",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "MetricDataPoint",
          "MetricSummary",
          "MetricsAgent",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 615,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricDataPoint",
          "MetricSummary",
          "MetricsAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "main_project_agent_reference",
        "path": "main_project_agent_reference.py",
        "purpose": "Main Project Agent Reference",
        "dependencies": [
          "fastapi.security",
          "core.quality_verifier",
          "fastapi.middleware.cors",
          "fastapi.middleware.trustedhost",
          "pydantic",
          "core.report_generator",
          "models.user",
          "asyncio",
          "core.agent_orchestrator",
          "typing",
          "datetime",
          "core.file_manager",
          "starlette.responses",
          "logging",
          "httpx",
          "contextlib",
          "core.project_integrator",
          "middleware.monitoring",
          "models.file",
          "models.submission",
          "prometheus_client",
          "models.project",
          "json",
          "core.config",
          "core.database",
          "fastapi",
          "uuid",
          "core.auth",
          "core.chat_interface",
          "middleware.security",
          "uvicorn",
          "hashlib",
          "pathlib",
          "middleware.rate_limiting",
          "aiofiles",
          "fastapi.responses"
        ],
        "public_api": [
          "HealthResponse",
          "SubmitOutputRequest",
          "SubmissionResponse",
          "ProjectStatusResponse",
          "ChatMessage",
          "ChatResponse",
          "ConnectionManager",
          "disconnect"
        ],
        "state": "complete",
        "loc": 809,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "HealthResponse",
          "SubmitOutputRequest",
          "SubmissionResponse",
          "ProjectStatusResponse",
          "ChatMessage",
          "ChatResponse",
          "ConnectionManager"
        ],
        "functions": [
          "disconnect"
        ]
      },
      {
        "name": "static_analysis_agent",
        "path": "static_analysis_agent.py",
        "purpose": "External analysis libraries (mocked for sandbox environment, actual libraries would be installed)",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "asyncio",
          "pathlib",
          "os",
          "ast",
          "opentelemetry",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "AnalysisType",
          "Severity",
          "Finding",
          "AnalysisResult",
          "StaticAnalysisRule",
          "StaticAnalysisAgent"
        ],
        "state": "complete",
        "loc": 679,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AnalysisType",
          "Severity",
          "Finding",
          "AnalysisResult",
          "StaticAnalysisRule",
          "StaticAnalysisAgent"
        ],
        "functions": []
      },
      {
        "name": "code_of_conduct_complete",
        "path": "code_of_conduct_complete.py",
        "purpose": "Code Of Conduct Complete",
        "dependencies": [
          "logging",
          "json",
          "enum",
          "sqlalchemy.orm",
          "sqlalchemy",
          "config",
          "hashlib",
          "asyncio",
          "monitoring.alert_manager",
          "collections",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "database.secure_database_manager"
        ],
        "public_api": [
          "RiskLevel",
          "ActivityType",
          "SystemAction",
          "AgentActivityLog",
          "AdminNotification",
          "SystemFreezeLog",
          "ActivityLogEntry",
          "RiskAssessment",
          "AgentCodeOfConduct",
          "log_agent_activity",
          "check_agent_frozen",
          "check_module_frozen",
          "check_system_frozen",
          "decorator"
        ],
        "state": "complete",
        "loc": 1108,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "RiskLevel",
          "ActivityType",
          "SystemAction",
          "AgentActivityLog",
          "AdminNotification",
          "SystemFreezeLog",
          "ActivityLogEntry",
          "RiskAssessment",
          "AgentCodeOfConduct"
        ],
        "functions": [
          "log_agent_activity",
          "check_agent_frozen",
          "check_module_frozen",
          "check_system_frozen",
          "decorator"
        ]
      },
      {
        "name": "monitoring.metrics",
        "path": "monitoring.metrics.py",
        "purpose": "monitoring/metrics.py",
        "dependencies": [
          "logging",
          "opentelemetry.sdk.trace",
          "opentelemetry.sdk.resources",
          "opentelemetry.trace.propagation.tracecontext",
          "time",
          "opentelemetry.sdk.trace.export",
          "elasticsearch",
          "opentelemetry.exporter.jaeger.thrift",
          "asyncio",
          "prometheus_client.exposition",
          "opentelemetry",
          "typing",
          "prometheus_client",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AdvancedMetricsCollector",
          "StructuredLogger",
          "DistributedTracer",
          "ELKIntegration",
          "start_metrics_server",
          "record_http_request",
          "record_db_query",
          "record_business_event",
          "record_error",
          "info",
          "error",
          "warning",
          "start_span",
          "inject_context",
          "extract_context"
        ],
        "state": "complete",
        "loc": 218,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AdvancedMetricsCollector",
          "StructuredLogger",
          "DistributedTracer",
          "ELKIntegration"
        ],
        "functions": [
          "start_metrics_server",
          "record_http_request",
          "record_db_query",
          "record_business_event",
          "record_error",
          "info",
          "error",
          "warning",
          "start_span",
          "inject_context",
          "extract_context"
        ]
      },
      {
        "name": "test_client",
        "path": "test_client.py",
        "purpose": "Test Client",
        "dependencies": [
          "json",
          "nats",
          "time",
          "asyncio",
          "sys",
          "nats.aio.client",
          "typing",
          "traceback"
        ],
        "public_api": [
          "CodingAgentClient",
          "TestRunner",
          "print_header",
          "print_result",
          "print_summary"
        ],
        "state": "complete",
        "loc": 606,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CodingAgentClient",
          "TestRunner"
        ],
        "functions": [
          "print_header",
          "print_result",
          "print_summary"
        ]
      },
      {
        "name": "agent_management_api",
        "path": "agent_management_api.py",
        "purpose": "Import your existing models and managers",
        "dependencies": [
          "json",
          "sqlalchemy.orm",
          "enum",
          "structlog",
          "pydantic",
          "sqlalchemy",
          "asyncio",
          "fastapi",
          "uuid",
          "typing",
          "main",
          "sqlalchemy.ext.asyncio",
          "fastapi.responses",
          "datetime"
        ],
        "public_api": [
          "AgentStatus",
          "AgentType",
          "AgentCapability",
          "AgentCreateRequest",
          "AgentUpdateRequest",
          "AgentResponse",
          "AgentListResponse",
          "AgentPerformanceMetrics",
          "TaskAssignmentRequest",
          "AgentManagementService",
          "name_must_be_alphanumeric"
        ],
        "state": "complete",
        "loc": 525,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "AgentType",
          "AgentCapability",
          "AgentCreateRequest",
          "AgentUpdateRequest",
          "AgentResponse",
          "AgentListResponse",
          "AgentPerformanceMetrics",
          "TaskAssignmentRequest",
          "AgentManagementService"
        ],
        "functions": [
          "name_must_be_alphanumeric"
        ]
      },
      {
        "name": "learning_agent_core",
        "path": "learning_agent_core.py",
        "purpose": "Learning Agent Core",
        "dependencies": [
          "re",
          "logging",
          "json",
          "enum",
          "structlog",
          "sqlalchemy",
          "hashlib",
          "asyncio",
          "collections",
          "sqlalchemy.ext.asyncio",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AgentRole",
          "KnowledgeType",
          "LearningSource",
          "KnowledgeQuality",
          "KnowledgeItem",
          "LearningEvent",
          "AgentLearningProfile",
          "KnowledgeFlow",
          "YMERALearningAgent"
        ],
        "state": "complete",
        "loc": 1427,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentRole",
          "KnowledgeType",
          "LearningSource",
          "KnowledgeQuality",
          "KnowledgeItem",
          "LearningEvent",
          "AgentLearningProfile",
          "KnowledgeFlow",
          "YMERALearningAgent"
        ],
        "functions": []
      },
      {
        "name": "example_component_enhancement",
        "path": "example_component_enhancement.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "json",
          "component_enhancement_workflow",
          "pathlib",
          "os",
          "sys",
          "traceback"
        ],
        "public_api": [
          "main"
        ],
        "state": "complete",
        "loc": 63,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "main"
        ]
      },
      {
        "name": "learning_engine",
        "path": "learning_engine.py",
        "purpose": "Learning Engine",
        "dependencies": [
          "asyncio",
          "anthropic",
          "concurrent.futures",
          "typing",
          "config_manager",
          "datetime",
          "intelligence_engine",
          "openai",
          "logging",
          "queue",
          "groq",
          "chromadb",
          "google.generativeai",
          "json",
          "threading",
          "pinecone",
          "uuid",
          "abc",
          "base_agent",
          "pickle",
          "enum",
          "time",
          "hashlib",
          "numpy",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "AgentType",
          "LearningMode",
          "TaskPriority",
          "Experience",
          "Task",
          "KnowledgeGraph",
          "VectorStore",
          "LearningAgent",
          "MultiAgentLearningEngine",
          "create_learning_engine",
          "to_dict",
          "to_dict",
          "add_knowledge",
          "add_relationship",
          "query",
          "find_similar",
          "get_performance_metrics",
          "register_agent"
        ],
        "state": "complete",
        "loc": 512,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentType",
          "LearningMode",
          "TaskPriority",
          "Experience",
          "Task",
          "KnowledgeGraph",
          "VectorStore",
          "LearningAgent",
          "MultiAgentLearningEngine"
        ],
        "functions": [
          "create_learning_engine",
          "to_dict",
          "to_dict",
          "add_knowledge",
          "add_relationship",
          "query",
          "find_similar",
          "get_performance_metrics",
          "register_agent"
        ]
      },
      {
        "name": "metrics",
        "path": "metrics.py",
        "purpose": "Metrics",
        "dependencies": [
          "prometheus_client",
          "structlog"
        ],
        "public_api": [
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "observe_histogram"
        ],
        "state": "complete",
        "loc": 101,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MetricsCollector"
        ],
        "functions": [
          "increment_counter",
          "set_gauge",
          "observe_histogram"
        ]
      },
      {
        "name": "learning-agent-production",
        "path": "learning-agent-production.py",
        "purpose": "requirements.txt",
        "dependencies": [
          "functools",
          "pydantic",
          "asyncio",
          "security.vault_manager",
          "ml.model_loader",
          "knowledge.knowledge_manager",
          "typing",
          "security.encryption_service",
          "datetime",
          "communication.websocket_manager",
          "logging",
          "sqlalchemy",
          "contextlib",
          "utils.decorators",
          "alembic",
          "knowledge.vector_store",
          "collections",
          "opentelemetry",
          "ml.model_factory",
          "knowledge.knowledge_graph",
          "secrets",
          "json",
          "database.connection_pool",
          "fastapi",
          "os",
          "uuid",
          "ml.model_registry",
          "database.redis_manager",
          "utils.metrics",
          "time",
          "config.settings",
          "hashlib",
          "database.models",
          "dataclasses"
        ],
        "public_api": [
          "Settings",
          "AgentState",
          "UltraAdvancedLearningAgent",
          "Config",
          "get_settings",
          "retry_on_failure",
          "cache_result",
          "run_migrations_offline",
          "run_migrations_online",
          "decorator",
          "decorator"
        ],
        "state": "complete",
        "loc": 832,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Settings",
          "AgentState",
          "UltraAdvancedLearningAgent",
          "Config"
        ],
        "functions": [
          "get_settings",
          "retry_on_failure",
          "cache_result",
          "run_migrations_offline",
          "run_migrations_online",
          "decorator",
          "decorator"
        ]
      },
      {
        "name": "prod_drafting_agent",
        "path": "prod_drafting_agent.py",
        "purpose": "Prod Drafting Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "ssl",
          "asyncio",
          "difflib",
          "os",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [],
        "state": "incomplete",
        "loc": 1459,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "ml_pipeline",
        "path": "ml_pipeline.py",
        "purpose": "Ml Pipeline",
        "dependencies": [
          "json",
          "logging",
          "pickle",
          "sklearn.feature_extraction.text",
          "asyncio",
          "os",
          "typing",
          "datetime",
          "sklearn.metrics.pairwise",
          "numpy"
        ],
        "public_api": [
          "MLPipeline"
        ],
        "state": "complete",
        "loc": 203,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MLPipeline"
        ],
        "functions": []
      },
      {
        "name": "integration_preparation",
        "path": "integration_preparation.py",
        "purpose": "Integration Preparation",
        "dependencies": [
          "pathlib",
          "os"
        ],
        "public_api": [
          "IntegrationPreparer",
          "prepare_for_integration",
          "create_api_gateway",
          "setup_communication_layer",
          "create_unified_config",
          "generate_deployment_packages",
          "create_integration_docs"
        ],
        "state": "complete",
        "loc": 479,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "IntegrationPreparer"
        ],
        "functions": [
          "prepare_for_integration",
          "create_api_gateway",
          "setup_communication_layer",
          "create_unified_config",
          "generate_deployment_packages",
          "create_integration_docs"
        ]
      },
      {
        "name": "monitoring.health",
        "path": "monitoring.health.py",
        "purpose": "monitoring/health.py",
        "dependencies": [
          "logging",
          "httpx",
          "time",
          "kafka",
          "redis",
          "boto3",
          "asyncio",
          "asyncpg",
          "typing",
          "datetime",
          "dataclasses",
          "socket"
        ],
        "public_api": [
          "HealthCheckResult",
          "SLAStatus",
          "HealthCheckManager",
          "generate_health_report"
        ],
        "state": "complete",
        "loc": 337,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "HealthCheckResult",
          "SLAStatus",
          "HealthCheckManager"
        ],
        "functions": [
          "generate_health_report"
        ]
      },
      {
        "name": "example_integration_usage",
        "path": "example_integration_usage.py",
        "purpose": "Example 1: Basic usage with sample data",
        "dependencies": [
          "integration_preparation"
        ],
        "public_api": [
          "main"
        ],
        "state": "complete",
        "loc": 83,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "main"
        ]
      },
      {
        "name": "learning_engine_fixed",
        "path": "learning_engine_fixed.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "networkx",
          "pydantic",
          "asyncio",
          "structlog",
          "typing",
          "datetime",
          "logging",
          "sklearn.feature_extraction.text",
          "contextlib",
          "collections",
          "json",
          "aioredis",
          "fastapi",
          "uuid",
          "sklearn.metrics.pairwise",
          "abc",
          "enum",
          "sklearn.cluster",
          "time",
          "hashlib",
          "pathlib",
          "numpy",
          "dataclasses"
        ],
        "public_api": [
          "KnowledgeGraph",
          "ExperienceProcessor",
          "PatternDiscoveryEngine",
          "InterAgentKnowledgeTransfer",
          "Experience",
          "KnowledgeItem",
          "LearningPattern",
          "LearningMetrics",
          "LearningType",
          "KnowledgeStatus",
          "initialize_learning_engine",
          "calculate_learning_metrics",
          "health_check"
        ],
        "state": "deprecated",
        "loc": 734,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LearningType",
          "KnowledgeStatus",
          "Experience",
          "KnowledgeItem",
          "LearningPattern",
          "LearningMetrics",
          "KnowledgeGraph",
          "ExperienceProcessor",
          "PatternDiscoveryEngine",
          "InterAgentKnowledgeTransfer"
        ],
        "functions": []
      },
      {
        "name": "enhanced_ai_routes",
        "path": "enhanced_ai_routes.py",
        "purpose": "Enhanced Ai Routes",
        "dependencies": [
          "json",
          "ymera_services.ai.multi_llm_manager",
          "enum",
          "pydantic",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "fastapi",
          "ymera_core.database.manager",
          "ymera_core.security.auth_manager",
          "ymera_services.kibana.kibana_service",
          "typing",
          "datetime",
          "fastapi.responses"
        ],
        "public_api": [
          "AIProvider",
          "ChatRequest",
          "AIResponse",
          "EmbeddingRequest",
          "EmbeddingResponse",
          "KibanaAlertRequest",
          "KibanaAlertResponse",
          "KibanaDashboardRequest",
          "KibanaResponse",
          "Config",
          "get_all_routers",
          "validate_context",
          "validate_params"
        ],
        "state": "complete",
        "loc": 682,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AIProvider",
          "ChatRequest",
          "AIResponse",
          "EmbeddingRequest",
          "EmbeddingResponse",
          "KibanaAlertRequest",
          "KibanaAlertResponse",
          "KibanaDashboardRequest",
          "KibanaResponse",
          "Config"
        ],
        "functions": [
          "get_all_routers",
          "validate_context",
          "validate_params"
        ]
      },
      {
        "name": "monitoring_compatibility",
        "path": "monitoring_compatibility.py",
        "purpose": "Monitoring Compatibility",
        "dependencies": [
          "logging",
          "time",
          "typing",
          "datetime",
          "functools"
        ],
        "public_api": [
          "track_performance",
          "PerformanceTracker",
          "get_performance_tracker"
        ],
        "state": "complete",
        "loc": 124,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PerformanceTracker"
        ],
        "functions": [
          "track_performance",
          "get_performance_tracker",
          "sync_wrapper",
          "start_tracking",
          "end_tracking",
          "get_metrics",
          "clear_metrics"
        ]
      },
      {
        "name": "task_orchestrator",
        "path": "task_orchestrator.py",
        "purpose": "Task Orchestrator",
        "dependencies": [
          "agent_discovery",
          "agent_registry",
          "enum",
          "structlog",
          "time",
          "asyncio",
          "uuid",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "TaskStatus",
          "TaskPriority",
          "TaskRequest",
          "TaskResult",
          "TaskContext",
          "TaskOrchestrator",
          "register_callback"
        ],
        "state": "complete",
        "loc": 383,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TaskStatus",
          "TaskPriority",
          "TaskRequest",
          "TaskResult",
          "TaskContext",
          "TaskOrchestrator"
        ],
        "functions": [
          "register_callback"
        ]
      },
      {
        "name": "core_engine_complete",
        "path": "core_engine_complete.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "logging",
          "aioredis",
          "structlog",
          "asyncio",
          "CORE_CONFIGURATION.config_settings",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "CoreEngine",
          "LearningEngineConfig",
          "LearningCycle",
          "BaseEngine"
        ],
        "state": "complete",
        "loc": 493,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LearningEngineConfig",
          "LearningCycle",
          "BaseEngine",
          "CoreEngine"
        ],
        "functions": [
          "to_dict",
          "get_statistics"
        ]
      },
      {
        "name": "engine",
        "path": "engine.py",
        "purpose": "Engine",
        "dependencies": [
          "logging",
          "enum",
          "asyncio",
          "uuid",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "LearningTaskType",
          "LearningTaskStatus",
          "LearningTask",
          "LearningResult",
          "LearningEngine",
          "set_pattern_recognizer",
          "set_knowledge_base",
          "set_adaptive_learner",
          "set_message_broker"
        ],
        "state": "complete",
        "loc": 381,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LearningTaskType",
          "LearningTaskStatus",
          "LearningTask",
          "LearningResult",
          "LearningEngine"
        ],
        "functions": [
          "set_pattern_recognizer",
          "set_knowledge_base",
          "set_adaptive_learner",
          "set_message_broker"
        ]
      },
      {
        "name": "enhancement_agent",
        "path": "enhancement_agent.py",
        "purpose": "Enhancement Agent",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "asyncio",
          "difflib",
          "os",
          "collections",
          "opentelemetry",
          "typing",
          "numpy",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "EnhancementType",
          "EnhancementLevel",
          "Enhancement",
          "EnhancementResult",
          "EnhancementAgent"
        ],
        "state": "complete",
        "loc": 760,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancementType",
          "EnhancementLevel",
          "Enhancement",
          "EnhancementResult",
          "EnhancementAgent"
        ],
        "functions": []
      },
      {
        "name": "learning_system",
        "path": "learning_system.py",
        "purpose": "Learning System",
        "dependencies": [
          "logging",
          "enum",
          "external_learning",
          "knowledge_base",
          "asyncio",
          "pattern_recognition",
          "typing",
          "datetime",
          "dataclasses",
          "continuous_learning"
        ],
        "public_api": [
          "LearningTaskType",
          "PatternType",
          "EntityType",
          "RelationType",
          "LearningResult",
          "UnifiedLearningSystem",
          "create_unified_learning_system"
        ],
        "state": "complete",
        "loc": 294,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LearningTaskType",
          "PatternType",
          "EntityType",
          "RelationType",
          "LearningResult",
          "UnifiedLearningSystem"
        ],
        "functions": [
          "create_unified_learning_system"
        ]
      },
      {
        "name": "health",
        "path": "health.py",
        "purpose": "Store startup time",
        "dependencies": [
          "time",
          "shared.cache",
          "shared.database.connection_pool",
          "shared.queue",
          "fastapi",
          "typing",
          "structlog",
          "psutil",
          "shared.patterns"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 215,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "drafting_agent",
        "path": "drafting_agent.py",
        "purpose": "Drafting Agent",
        "dependencies": [
          "textstat",
          "spacy",
          "asyncio",
          "typing",
          "datetime",
          "difflib",
          "opentelemetry",
          "re",
          "nltk",
          "json",
          "os",
          "nltk.corpus",
          "uuid",
          "base_agent",
          "enum",
          "time",
          "nltk.tokenize",
          "ssl",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "DocumentType",
          "ContentTone",
          "DraftStatus",
          "ContentTemplate",
          "DocumentDraft",
          "ContentAnalysis",
          "DraftingAgent"
        ],
        "state": "complete",
        "loc": 597,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DocumentType",
          "ContentTone",
          "DraftStatus",
          "ContentTemplate",
          "DocumentDraft",
          "ContentAnalysis",
          "DraftingAgent"
        ],
        "functions": []
      },
      {
        "name": "editing_agent",
        "path": "editing_agent.py",
        "purpose": "Editing Agent",
        "dependencies": [
          "re",
          "nltk",
          "json",
          "textstat",
          "enum",
          "language_tool_python",
          "time",
          "spacy",
          "asyncio",
          "difflib",
          "os",
          "opentelemetry",
          "uuid",
          "typing",
          "nltk.sentiment",
          "datetime",
          "dataclasses",
          "base_agent"
        ],
        "public_api": [
          "EditType",
          "ContentType",
          "EditingMode",
          "EditSuggestion",
          "EditingSession",
          "ContentAnalysis",
          "EditingAgent"
        ],
        "state": "deprecated",
        "loc": 746,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EditType",
          "ContentType",
          "EditingMode",
          "EditSuggestion",
          "EditingSession",
          "ContentAnalysis",
          "EditingAgent"
        ],
        "functions": []
      },
      {
        "name": "optimizing_engine",
        "path": "optimizing_engine.py",
        "purpose": "Optimizing Engine",
        "dependencies": [
          "asyncio",
          "typing",
          "datetime",
          "psutil",
          "statistics",
          "collections",
          "opentelemetry",
          "json",
          "redis.asyncio",
          "os",
          "random",
          "uuid",
          "asyncpg",
          "base_agent",
          "enum",
          "time",
          "numpy",
          "dataclasses",
          "gc"
        ],
        "public_api": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CacheStrategy",
          "OptimizingEngine"
        ],
        "state": "complete",
        "loc": 1635,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CacheStrategy",
          "OptimizingEngine"
        ],
        "functions": []
      },
      {
        "name": "enhancement_agent_v3",
        "path": "enhancement_agent_v3.py",
        "purpose": "Enhancement Agent V3",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "enhanced_base_agent",
          "math",
          "hashlib",
          "asyncio",
          "os",
          "collections",
          "sys",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "EnhancementType",
          "EnhancementLevel",
          "FeedbackType",
          "Enhancement",
          "EnhancementResult",
          "LRUCache",
          "EnhancementAgent",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 1817,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancementType",
          "EnhancementLevel",
          "FeedbackType",
          "Enhancement",
          "EnhancementResult",
          "LRUCache",
          "EnhancementAgent"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "optimization_engine",
        "path": "optimization_engine.py",
        "purpose": "Optimization Engine",
        "dependencies": [
          "asyncio",
          "typing",
          "datetime",
          "psutil",
          "statistics",
          "collections",
          "opentelemetry",
          "json",
          "redis.asyncio",
          "os",
          "random",
          "uuid",
          "asyncpg",
          "base_agent",
          "enum",
          "time",
          "numpy",
          "dataclasses",
          "gc"
        ],
        "public_api": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CacheStrategy",
          "OptimizingEngine"
        ],
        "state": "complete",
        "loc": 1641,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CacheStrategy",
          "OptimizingEngine"
        ],
        "functions": []
      },
      {
        "name": "generator_engine_prod",
        "path": "generator_engine_prod.py",
        "purpose": "Generator Engine Prod",
        "dependencies": [
          "re",
          "json",
          "logging",
          "enum",
          "time",
          "jinja2",
          "hashlib",
          "asyncio",
          "pathlib",
          "typing",
          "datetime",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "CodeStyle",
          "GenerationType",
          "GenerationSpec",
          "GeneratedArtifact",
          "GeneratorEngine",
          "to_dict",
          "to_dict",
          "get_metrics",
          "get_supported_languages",
          "get_supported_patterns",
          "get_pattern_info"
        ],
        "state": "incomplete",
        "loc": 1015,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CodeStyle",
          "GenerationType",
          "GenerationSpec",
          "GeneratedArtifact",
          "GeneratorEngine"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "get_metrics",
          "get_supported_languages",
          "get_supported_patterns",
          "get_pattern_info"
        ]
      },
      {
        "name": "explainability__init__",
        "path": "explainability__init__.py",
        "purpose": "Compute fairness metric",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 167,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "enhanced_base_agent (1)",
        "path": "enhanced_base_agent (1).py",
        "purpose": "Enhanced Base Agent (1)",
        "dependencies": [
          "logging.handlers",
          "nats",
          "asyncio",
          "nats.aio.client",
          "dataclasses",
          "typing",
          "datetime",
          "logging",
          "asyncpg.exceptions",
          "contextlib",
          "collections",
          "json",
          "redis.asyncio",
          "random",
          "os",
          "uuid",
          "asyncpg",
          "nats.errors",
          "enum",
          "time",
          "signal",
          "sys",
          "functools",
          "traceback"
        ],
        "public_api": [
          "Priority",
          "AgentState",
          "ConnectionState",
          "CircuitBreakerState",
          "AgentConfig",
          "TaskRequest",
          "AgentMetrics",
          "CircuitBreaker",
          "BaseAgent",
          "ContextFilter",
          "JsonFormatter",
          "validate",
          "to_dict",
          "from_dict",
          "is_expired",
          "should_retry",
          "to_dict",
          "get_state",
          "get_stats",
          "is_healthy",
          "signal_handler",
          "filter",
          "format"
        ],
        "state": "complete",
        "loc": 1207,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Priority",
          "AgentState",
          "ConnectionState",
          "CircuitBreakerState",
          "AgentConfig",
          "TaskRequest",
          "AgentMetrics",
          "CircuitBreaker",
          "BaseAgent",
          "ContextFilter",
          "JsonFormatter"
        ],
        "functions": [
          "validate",
          "to_dict",
          "from_dict",
          "is_expired",
          "should_retry",
          "to_dict",
          "get_state",
          "get_stats",
          "is_healthy",
          "signal_handler",
          "filter",
          "format"
        ]
      },
      {
        "name": "enhanced_llm_agent",
        "path": "enhanced_llm_agent.py",
        "purpose": "Enhanced Llm Agent",
        "dependencies": [
          "qdrant_client",
          "json",
          "enum",
          "time",
          "enhanced_base_agent",
          "asyncio",
          "anthropic",
          "os",
          "collections",
          "qdrant_client.http.models",
          "sys",
          "uuid",
          "typing",
          "tiktoken",
          "dataclasses",
          "abc",
          "openai",
          "sentence_transformers"
        ],
        "public_api": [
          "LLMProvider",
          "MessageRole",
          "ConversationMessage",
          "ConversationMemory",
          "RAGDocument",
          "LLMConfig",
          "BaseLLMProvider",
          "OpenAIProvider",
          "AnthropicProvider",
          "LLMProviderManager",
          "LLMAgent",
          "to_dict",
          "add_message",
          "get_context_messages",
          "get_token_count",
          "get_provider"
        ],
        "state": "complete",
        "loc": 1394,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "LLMProvider",
          "MessageRole",
          "ConversationMessage",
          "ConversationMemory",
          "RAGDocument",
          "LLMConfig",
          "BaseLLMProvider",
          "OpenAIProvider",
          "AnthropicProvider",
          "LLMProviderManager",
          "LLMAgent"
        ],
        "functions": [
          "to_dict",
          "add_message",
          "get_context_messages",
          "get_token_count",
          "get_provider"
        ]
      },
      {
        "name": "agent_registry",
        "path": "agent_registry.py",
        "purpose": "Agent Registry",
        "dependencies": [
          "enum",
          "structlog",
          "time",
          "asyncio",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "AgentStatus",
          "AgentRecord",
          "AgentRegistry",
          "to_dict",
          "is_healthy",
          "is_available"
        ],
        "state": "complete",
        "loc": 386,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AgentStatus",
          "AgentRecord",
          "AgentRegistry"
        ],
        "functions": [
          "to_dict",
          "is_healthy",
          "is_available"
        ]
      },
      {
        "name": "resource_allocator",
        "path": "resource_allocator.py",
        "purpose": "Resource Allocator",
        "dependencies": [
          "agent_registry",
          "enum",
          "structlog",
          "time",
          "asyncio",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "ResourceType",
          "ResourceQuota",
          "AgentResources",
          "ResourceAllocation",
          "ResourceAllocator",
          "fits_within",
          "available",
          "utilization_percent"
        ],
        "state": "complete",
        "loc": 412,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ResourceType",
          "ResourceQuota",
          "AgentResources",
          "ResourceAllocation",
          "ResourceAllocator"
        ],
        "functions": [
          "fits_within",
          "available",
          "utilization_percent"
        ]
      },
      {
        "name": "ymera__init__",
        "path": "ymera__init__.py",
        "purpose": "ymera/__init__.py",
        "dependencies": [
          "infrastructure",
          "logging",
          "json",
          "enum",
          "time",
          "pandas",
          "asyncio",
          "explainability",
          "automl",
          "typing",
          "analytics",
          "dataclasses",
          "multimodal"
        ],
        "public_api": [
          "YmeraEnterprise"
        ],
        "state": "complete",
        "loc": 158,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "YmeraEnterprise"
        ],
        "functions": []
      },
      {
        "name": "analytics.engine",
        "path": "analytics.engine.py",
        "purpose": "analytics/engine.py",
        "dependencies": [
          "sklearn.preprocessing",
          "logging",
          "json",
          "pickle",
          "sklearn.cluster",
          "warnings",
          "pandas",
          "asyncio",
          "sklearn.ensemble",
          "scipy",
          "typing",
          "datetime",
          "sklearn.linear_model",
          "numpy",
          "sklearn.metrics"
        ],
        "public_api": [
          "AdvancedAnalyticsEngine",
          "RealTimeAnalyticsDashboard",
          "PredictiveAnalytics"
        ],
        "state": "complete",
        "loc": 470,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AdvancedAnalyticsEngine",
          "RealTimeAnalyticsDashboard",
          "PredictiveAnalytics"
        ],
        "functions": []
      },
      {
        "name": "test_e2e_comprehensive",
        "path": "test_e2e_comprehensive.py",
        "purpose": "Add project to path",
        "dependencies": [
          "json",
          "time",
          "unified_system",
          "asyncio",
          "pathlib",
          "sys",
          "typing",
          "datetime",
          "traceback",
          "base_agent",
          "document_generation_engine"
        ],
        "public_api": [
          "TestAgent",
          "log_test"
        ],
        "state": "complete",
        "loc": 504,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestAgent"
        ],
        "functions": [
          "log_test"
        ]
      },
      {
        "name": "data_flow_validator",
        "path": "data_flow_validator.py",
        "purpose": "security/data_flow_validator.py",
        "dependencies": [
          "re",
          "logging",
          "json",
          "enum",
          "models",
          "base64",
          "hashlib",
          "asyncio",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "DataValidationLevel",
          "DataClassification",
          "ValidationRule",
          "DataFlowValidator",
          "register_schema_validator",
          "register_validation_callback"
        ],
        "state": "complete",
        "loc": 289,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DataValidationLevel",
          "DataClassification",
          "ValidationRule",
          "DataFlowValidator"
        ],
        "functions": [
          "register_schema_validator",
          "register_validation_callback"
        ]
      },
      {
        "name": "ymera_templates",
        "path": ".github/.github/.github/ISSUE_TEMPLATE/.github/.github/mcp/ymera_templates.py",
        "purpose": ".github/mcp/ymera_templates.py",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 24,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      }
    ],
    "engines": [
      {
        "name": "production_custom_engines_full",
        "path": "production_custom_engines_full.py",
        "purpose": "Cache result",
        "dependencies": [
          "opentelemetry.sdk.metrics",
          "json",
          "logging",
          "enum",
          "time",
          "opentelemetry.sdk.metrics.export",
          "opentelemetry.exporter.prometheus",
          "asyncio",
          "statistics",
          "collections",
          "opentelemetry",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "psutil",
          "base_agent"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 983,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "prod_analyzer_engine",
        "path": "prod_analyzer_engine.py",
        "purpose": "Prod Analyzer Engine",
        "dependencies": [
          "re",
          "json",
          "enum",
          "time",
          "numpy",
          "math",
          "hashlib",
          "asyncio",
          "sklearn.ensemble",
          "os",
          "collections",
          "ast",
          "typing",
          "datetime",
          "dataclasses",
          "traceback",
          "base_agent"
        ],
        "public_api": [
          "Severity",
          "Category",
          "FixStrategy",
          "Issue",
          "Metric",
          "QualityGate",
          "AnalysisReport",
          "AnalyzerEngine",
          "to_dict",
          "to_dict",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 772,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Severity",
          "Category",
          "FixStrategy",
          "Issue",
          "Metric",
          "QualityGate",
          "AnalysisReport",
          "AnalyzerEngine"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "core_engine_utils",
        "path": "core_engine_utils.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "json",
          "logging",
          "structlog",
          "time",
          "hashlib",
          "asyncio",
          "uuid",
          "typing",
          "datetime",
          "functools"
        ],
        "public_api": [
          "generate_unique_id",
          "generate_cycle_id",
          "generate_task_id",
          "get_utc_timestamp",
          "format_timestamp",
          "timestamp_to_seconds",
          "calculate_hash",
          "verify_integrity",
          "safe_json_loads",
          "safe_json_dumps",
          "deep_merge_dict",
          "flatten_dict",
          "retry_async_operation",
          "run_with_timeout",
          "measure_time",
          "format_file_size",
          "format_duration",
          "validate_config",
          "sanitize_string"
        ],
        "state": "complete",
        "loc": 447,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "generate_unique_id",
          "generate_cycle_id",
          "generate_task_id",
          "get_utc_timestamp",
          "format_timestamp",
          "timestamp_to_seconds",
          "calculate_hash",
          "verify_integrity",
          "safe_json_loads",
          "safe_json_dumps",
          "deep_merge_dict",
          "flatten_dict",
          "measure_time",
          "format_file_size",
          "format_duration",
          "validate_config",
          "sanitize_string",
          "json_serializer",
          "sync_wrapper"
        ]
      },
      {
        "name": "prod_optimizing_engine",
        "path": "prod_optimizing_engine.py",
        "purpose": "Prod Optimizing Engine",
        "dependencies": [
          "asyncio",
          "typing",
          "datetime",
          "psutil",
          "statistics",
          "collections",
          "opentelemetry",
          "prometheus_client",
          "opentelemetry.trace",
          "json",
          "redis.asyncio",
          "os",
          "uuid",
          "asyncpg",
          "base_agent",
          "enum",
          "time",
          "signal",
          "sys",
          "numpy",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "CacheStrategy",
          "HealthStatus",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CircuitBreakerState",
          "PrometheusMetrics",
          "OptimizingEngine",
          "success_rate",
          "can_apply",
          "is_valid",
          "to_dict",
          "should_attempt",
          "record_success",
          "record_failure"
        ],
        "state": "complete",
        "loc": 819,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "OptimizationType",
          "OptimizationLevel",
          "MetricType",
          "CacheStrategy",
          "HealthStatus",
          "OptimizationRule",
          "PerformanceMetric",
          "OptimizationResult",
          "CircuitBreakerState",
          "PrometheusMetrics",
          "OptimizingEngine"
        ],
        "functions": [
          "success_rate",
          "can_apply",
          "is_valid",
          "to_dict",
          "should_attempt",
          "record_success",
          "record_failure"
        ]
      },
      {
        "name": "knowledge_graph",
        "path": "knowledge_graph.py",
        "purpose": "Knowledge Graph",
        "dependencies": [
          "logging",
          "networkx",
          "enum",
          "json",
          "community",
          "hashlib",
          "asyncio",
          "collections",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "EntityType",
          "RelationType",
          "Entity",
          "Relationship",
          "KnowledgeGraphEngine",
          "to_dict",
          "to_dict"
        ],
        "state": "complete",
        "loc": 469,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EntityType",
          "RelationType",
          "Entity",
          "Relationship",
          "KnowledgeGraphEngine"
        ],
        "functions": [
          "to_dict",
          "to_dict"
        ]
      },
      {
        "name": "intelligence_engine",
        "path": "intelligence_engine.py",
        "purpose": "Intelligence Engine",
        "dependencies": [
          "asyncio",
          "concurrent.futures",
          "typing",
          "datetime",
          "logging",
          "collections",
          "opentelemetry",
          "json",
          "aioredis",
          "threading",
          "os",
          "uuid",
          "asyncpg",
          "weakref",
          "base_agent",
          "enum",
          "time",
          "hashlib",
          "numpy",
          "dataclasses"
        ],
        "public_api": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "SystemMetric",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "state": "complete",
        "loc": 957,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "SystemMetric",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "functions": []
      },
      {
        "name": "pattern_recognition",
        "path": "pattern_recognition.py",
        "purpose": "Pattern Recognition",
        "dependencies": [
          "logging",
          "enum",
          "hashlib",
          "asyncio",
          "collections",
          "typing",
          "datetime",
          "dataclasses",
          "numpy"
        ],
        "public_api": [
          "PatternType",
          "Pattern",
          "PatternRecognitionEngine",
          "to_dict"
        ],
        "state": "complete",
        "loc": 322,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "PatternType",
          "Pattern",
          "PatternRecognitionEngine"
        ],
        "functions": [
          "to_dict"
        ]
      },
      {
        "name": "document_generation_engine",
        "path": "document_generation_engine.py",
        "purpose": "Document Generation Engine",
        "dependencies": [
          "json",
          "csv",
          "io",
          "enum",
          "structlog",
          "asyncio",
          "pathlib",
          "typing",
          "datetime",
          "dataclasses",
          "xml.etree.ElementTree"
        ],
        "public_api": [
          "DocumentGenerationEngine",
          "DocumentFormat",
          "DocumentMetadata",
          "DocumentSection",
          "DocumentTable",
          "DocumentContent"
        ],
        "state": "complete",
        "loc": 218,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DocumentFormat",
          "DocumentMetadata",
          "DocumentSection",
          "DocumentTable",
          "DocumentContent",
          "DocumentGenerationEngine"
        ],
        "functions": []
      },
      {
        "name": "analytics__init__",
        "path": "analytics__init__.py",
        "purpose": "For demonstration, we'll extract simple subject-verb-object relations",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 272,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": ".github.workflows.load-test",
        "path": ".github.workflows.load-test.py",
        "purpose": ".github/workflows/load-test.yml",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 42,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "infrastructure.optimization__init__",
        "path": "infrastructure.optimization__init__.py",
        "purpose": "infrastructure/optimization/__init__.py",
        "dependencies": [
          "logging",
          "enum",
          "threading",
          "functools",
          "time",
          "asyncio",
          "typing",
          "numpy",
          "dataclasses",
          "gc"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 330,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "intelligence_engine_enhanced",
        "path": "intelligence_engine_enhanced.py",
        "purpose": "Intelligence Engine Enhanced",
        "dependencies": [
          "asyncio",
          "concurrent.futures",
          "typing",
          "sqlalchemy.dialects",
          "logging",
          "sqlalchemy",
          "collections",
          "opentelemetry",
          "json",
          "threading",
          "random",
          "uuid",
          "asyncpg",
          "weakref",
          "base_agent",
          "enum",
          "pickle",
          "time",
          "hashlib",
          "numpy",
          "dataclasses"
        ],
        "public_api": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "SystemMetric",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "state": "complete",
        "loc": 1004,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "DecisionStrategy",
          "SystemState",
          "AgentCapability",
          "SystemMetric",
          "DecisionContext",
          "AgentRecommendation",
          "IntelligenceEngine"
        ],
        "functions": []
      },
      {
        "name": "parser_engine_prod",
        "path": "parser_engine_prod.py",
        "purpose": "Third-party imports with fallback handling",
        "dependencies": [
          "tree_sitter_languages",
          "tokenize",
          "logging",
          "re",
          "enum",
          "esprima",
          "io",
          "time",
          "hashlib",
          "asyncio",
          "collections",
          "ast",
          "concurrent.futures",
          "typing",
          "numpy",
          "dataclasses",
          "traceback"
        ],
        "public_api": [
          "NodeType",
          "Location",
          "Symbol",
          "Dependency",
          "ParseResult",
          "ParserEngine",
          "SymbolExtractor",
          "np",
          "to_dict",
          "to_dict",
          "to_dict",
          "to_dict",
          "get_metrics",
          "clear_cache",
          "supported_languages",
          "get_language_info",
          "shutdown",
          "traverse",
          "visit_FunctionDef",
          "visit_AsyncFunctionDef",
          "visit_ClassDef",
          "visit_Assign",
          "mean"
        ],
        "state": "complete",
        "loc": 1039,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "NodeType",
          "Location",
          "Symbol",
          "Dependency",
          "ParseResult",
          "ParserEngine",
          "SymbolExtractor",
          "np"
        ],
        "functions": [
          "to_dict",
          "to_dict",
          "to_dict",
          "to_dict",
          "get_metrics",
          "clear_cache",
          "supported_languages",
          "get_language_info",
          "shutdown",
          "traverse",
          "visit_FunctionDef",
          "visit_AsyncFunctionDef",
          "visit_ClassDef",
          "visit_Assign",
          "mean"
        ]
      },
      {
        "name": "core_engine_init",
        "path": "core_engine_init.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "logging",
          "aioredis",
          "utils",
          "asyncio",
          "typing",
          "structlog",
          "core_engine"
        ],
        "public_api": [
          "CoreEngine",
          "LearningEngineConfig",
          "utils",
          "__version__"
        ],
        "state": "complete",
        "loc": 104,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "get_version",
          "check_dependencies"
        ]
      },
      {
        "name": "engines_enhanced",
        "path": "enhanced_workspace/engines/integrated/engines_enhanced.py",
        "purpose": "Engines Enhanced",
        "dependencies": [
          "logging",
          "time",
          "asyncio",
          "typing",
          "datetime"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 139,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      }
    ],
    "utilities": [
      {
        "name": "task_queue",
        "path": "task_queue.py",
        "purpose": "Task Queue",
        "dependencies": [
          "enum",
          "structlog",
          "time",
          "asyncio",
          "uuid",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "TaskPriority",
          "TaskStatus",
          "Task",
          "AsyncTaskQueue",
          "get_metrics"
        ],
        "state": "complete",
        "loc": 271,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TaskPriority",
          "TaskStatus",
          "Task",
          "AsyncTaskQueue"
        ],
        "functions": [
          "get_metrics"
        ]
      },
      {
        "name": "BaseEvent",
        "path": "BaseEvent.py",
        "purpose": "Event Sourcing Implementation",
        "dependencies": [
          "kafka"
        ],
        "public_api": [
          "BaseEvent",
          "ProjectEvent",
          "TaskEvent",
          "UserEvent",
          "EventStore",
          "MessageQueueSystem",
          "SagaManager",
          "init_kafka_consumers",
          "get_saga_steps"
        ],
        "state": "complete",
        "loc": 308,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "BaseEvent",
          "ProjectEvent",
          "TaskEvent",
          "UserEvent",
          "EventStore",
          "MessageQueueSystem",
          "SagaManager"
        ],
        "functions": [
          "init_kafka_consumers",
          "get_saga_steps"
        ]
      },
      {
        "name": "HSMCrypto",
        "path": "HSMCrypto.py",
        "purpose": "Enhanced encryption utilities with HSM integration",
        "dependencies": [],
        "public_api": [
          "HSMCrypto",
          "EncryptedField",
          "UserRecord",
          "DLPEngine",
          "ssn",
          "ssn"
        ],
        "state": "complete",
        "loc": 168,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "HSMCrypto",
          "EncryptedField",
          "UserRecord",
          "DLPEngine"
        ],
        "functions": [
          "ssn",
          "ssn"
        ]
      },
      {
        "name": "disaster_recovery__init__",
        "path": "disaster_recovery__init__.py",
        "purpose": "Execute recovery steps for each resource",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 296,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "infrastructure__init__",
        "path": "infrastructure__init__.py",
        "purpose": "infrastructure/__init__.py",
        "dependencies": [],
        "public_api": [],
        "state": "incomplete",
        "loc": 2,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "response_aggregator_fixed",
        "path": "response_aggregator_fixed.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "aioredis",
          "structlog",
          "monitoring.performance_tracker",
          "pydantic",
          "config.settings",
          "asyncio",
          "statistics",
          "fastapi",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "abc"
        ],
        "public_api": [
          "ProductionResponseAggregator",
          "ResponseAggregator",
          "ResponseCollector",
          "AggregatorConfig",
          "AggregationRequest",
          "AggregatedResponse",
          "AggregationResult",
          "AggregationStrategy",
          "AggregationStatus",
          "ResponseMetrics",
          "AggregationRequestSchema",
          "ResponseSubmissionSchema",
          "create_response_aggregator",
          "health_check"
        ],
        "state": "complete",
        "loc": 679,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AggregationStrategy",
          "AggregationStatus",
          "ResponseMetrics",
          "AggregatedResponse",
          "AggregationRequest",
          "AggregationResult",
          "AggregationRequestSchema",
          "ResponseSubmissionSchema",
          "AggregatorConfig",
          "ProductionResponseAggregator"
        ],
        "functions": [
          "validate_expected_responses"
        ]
      },
      {
        "name": "knowledge_base",
        "path": "knowledge_base.py",
        "purpose": "Knowledge Base",
        "dependencies": [
          "logging",
          "json",
          "hashlib",
          "asyncio",
          "collections",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "KnowledgeEntry",
          "KnowledgeBase",
          "to_dict"
        ],
        "state": "complete",
        "loc": 343,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeEntry",
          "KnowledgeBase"
        ],
        "functions": [
          "to_dict"
        ]
      },
      {
        "name": "kg_fixed",
        "path": "kg_fixed.py",
        "purpose": "Kg Fixed",
        "dependencies": [
          "json",
          "logging",
          "enum",
          "networkx",
          "redis.asyncio",
          "hashlib",
          "asyncio",
          "collections",
          "uuid",
          "typing",
          "datetime",
          "dataclasses",
          "numpy"
        ],
        "public_api": [
          "KnowledgeGraph",
          "KnowledgeGraphConfig",
          "KnowledgeItem",
          "KnowledgeQuery",
          "KnowledgeSearchResult",
          "KnowledgeEmbedding",
          "NodeType",
          "create_knowledge_graph",
          "validate_knowledge_item",
          "health_check",
          "KnowledgeGraphError",
          "NodeNotFoundError",
          "ConnectionError",
          "QueryError"
        ],
        "state": "complete",
        "loc": 959,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "KnowledgeGraphSettings",
          "NodeType",
          "KnowledgeGraphConfig",
          "KnowledgeItem",
          "KnowledgeQuery",
          "KnowledgeSearchResult",
          "KnowledgeEmbedding",
          "KnowledgeGraph",
          "KnowledgeGraphError",
          "NodeNotFoundError",
          "ConnectionError",
          "QueryError"
        ],
        "functions": [
          "validate_knowledge_item",
          "to_dict",
          "calculate_similarity"
        ]
      },
      {
        "name": "SIEMIntegration",
        "path": "SIEMIntegration.py",
        "purpose": "Enhanced SIEM integration",
        "dependencies": [],
        "public_api": [
          "SIEMIntegration",
          "ComplianceAuditLogger"
        ],
        "state": "complete",
        "loc": 205,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "SIEMIntegration",
          "ComplianceAuditLogger"
        ],
        "functions": []
      },
      {
        "name": "MultiLevelCache",
        "path": "MultiLevelCache.py",
        "purpose": "Multi-Level Caching Strategy",
        "dependencies": [
          "redis"
        ],
        "public_api": [
          "MultiLevelCache",
          "OptimizedDatabaseUtils",
          "MaterializedViewManager",
          "ConnectionPoolManager",
          "init_redis",
          "init_engines",
          "get_session_factory",
          "get_shard_for_entity",
          "init_pools"
        ],
        "state": "complete",
        "loc": 331,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "MultiLevelCache",
          "OptimizedDatabaseUtils",
          "MaterializedViewManager",
          "ConnectionPoolManager"
        ],
        "functions": [
          "init_redis",
          "init_engines",
          "get_session_factory",
          "get_shard_for_entity",
          "init_pools"
        ]
      },
      {
        "name": "chat_service",
        "path": "chat_service.py",
        "purpose": "chat_service.py (continued from previous implementation)",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 327,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "generate_component_inventory",
        "path": "generate_component_inventory.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "re",
          "json",
          "pathlib",
          "os",
          "collections",
          "ast",
          "typing",
          "datetime",
          "dataclasses"
        ],
        "public_api": [
          "ComponentInfo",
          "PlatformAuditor",
          "main",
          "scan_repository",
          "categorize_file",
          "extract_imports",
          "extract_public_api",
          "determine_state",
          "find_test_file",
          "analyze_component",
          "extract_purpose",
          "find_orphaned_files",
          "generate_inventory_json",
          "generate_inventory_markdown",
          "run_audit"
        ],
        "state": "deprecated",
        "loc": 419,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:26:58",
        "classes": [
          "ComponentInfo",
          "PlatformAuditor"
        ],
        "functions": [
          "main",
          "scan_repository",
          "categorize_file",
          "extract_imports",
          "extract_public_api",
          "determine_state",
          "find_test_file",
          "analyze_component",
          "extract_purpose",
          "find_orphaned_files",
          "generate_inventory_json",
          "generate_inventory_markdown",
          "run_audit"
        ]
      },
      {
        "name": "graceful_shutdown",
        "path": "graceful_shutdown.py",
        "purpose": "Graceful Shutdown",
        "dependencies": [
          "asyncio",
          "signal",
          "structlog",
          "typing"
        ],
        "public_api": [
          "GracefulShutdown",
          "initiate_shutdown",
          "is_shutting_down"
        ],
        "state": "complete",
        "loc": 27,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "GracefulShutdown"
        ],
        "functions": [
          "initiate_shutdown",
          "is_shutting_down"
        ]
      },
      {
        "name": "modules_enhanced",
        "path": "enhanced_workspace/modules/integrated/modules_enhanced.py",
        "purpose": "Modules Enhanced",
        "dependencies": [
          "logging",
          "typing"
        ],
        "public_api": [
          "EnhancedModuleBase",
          "EnhancedCacheModule",
          "EnhancedMessagingModule",
          "EnhancedWorkflowModule"
        ],
        "state": "complete",
        "loc": 56,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedModuleBase",
          "EnhancedCacheModule",
          "EnhancedMessagingModule",
          "EnhancedWorkflowModule"
        ],
        "functions": []
      },
      {
        "name": "systems_enhanced",
        "path": "enhanced_workspace/systems/integrated/systems_enhanced.py",
        "purpose": "Systems Enhanced",
        "dependencies": [
          "datetime",
          "logging",
          "typing"
        ],
        "public_api": [
          "EnhancedSystemBase",
          "EnhancedMonitoringSystem",
          "EnhancedDeploymentSystem",
          "EnhancedIntegrationSystem",
          "EnhancedBackupSystem",
          "EnhancedSecuritySystem"
        ],
        "state": "complete",
        "loc": 112,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedSystemBase",
          "EnhancedMonitoringSystem",
          "EnhancedDeploymentSystem",
          "EnhancedIntegrationSystem",
          "EnhancedBackupSystem",
          "EnhancedSecuritySystem"
        ],
        "functions": []
      }
    ],
    "testing": [
      {
        "name": "testing_framework",
        "path": "testing_framework.py",
        "purpose": "Testing Framework",
        "dependencies": [
          "re",
          "json",
          "time",
          "unittest.mock",
          "asyncio",
          "pathlib",
          "os",
          "sys",
          "inspect",
          "typing",
          "pytest",
          "importlib.util",
          "datetime"
        ],
        "public_api": [
          "EnhancedComponentTester",
          "import_component",
          "generate_test_report"
        ],
        "state": "complete",
        "loc": 386,
        "has_tests": true,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnhancedComponentTester"
        ],
        "functions": [
          "import_component",
          "generate_test_report"
        ]
      },
      {
        "name": "pytest.ini",
        "path": "pytest.ini.py",
        "purpose": "Pytest.Ini",
        "dependencies": [],
        "public_api": [],
        "state": "complete",
        "loc": 12,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "test_integration_preparation",
        "path": "test_integration_preparation.py",
        "purpose": "Test Integration Preparation",
        "dependencies": [
          "pathlib",
          "os",
          "shutil",
          "tempfile",
          "pytest",
          "integration_preparation"
        ],
        "public_api": [
          "TestIntegrationPreparer",
          "TestGeneratedFiles",
          "temp_workspace",
          "sample_enhancement_progress",
          "sample_test_results",
          "preparer",
          "test_initialization",
          "test_ensure_workspace",
          "test_create_api_gateway",
          "test_setup_communication_layer",
          "test_create_unified_config",
          "test_generate_deployment_packages",
          "test_create_integration_docs",
          "test_prepare_for_integration",
          "test_only_passed_components_in_gateway",
          "test_empty_enhancement_progress",
          "preparer_with_files",
          "test_api_gateway_syntax",
          "test_communication_layer_syntax",
          "test_unified_config_syntax"
        ],
        "state": "complete",
        "loc": 198,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestIntegrationPreparer",
          "TestGeneratedFiles"
        ],
        "functions": [
          "temp_workspace",
          "sample_enhancement_progress",
          "sample_test_results",
          "preparer",
          "test_initialization",
          "test_ensure_workspace",
          "test_create_api_gateway",
          "test_setup_communication_layer",
          "test_create_unified_config",
          "test_generate_deployment_packages",
          "test_create_integration_docs",
          "test_prepare_for_integration",
          "test_only_passed_components_in_gateway",
          "test_empty_enhancement_progress",
          "preparer_with_files",
          "test_api_gateway_syntax",
          "test_communication_layer_syntax",
          "test_unified_config_syntax"
        ]
      },
      {
        "name": "test_e2e_standalone",
        "path": "test_e2e_standalone.py",
        "purpose": "Test results tracking",
        "dependencies": [
          "json",
          "time",
          "asyncio",
          "pathlib",
          "sys",
          "typing",
          "datetime",
          "traceback"
        ],
        "public_api": [
          "log_test"
        ],
        "state": "complete",
        "loc": 392,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "log_test"
        ]
      },
      {
        "name": "tests.utils.test_helpers",
        "path": "tests.utils.test_helpers.py",
        "purpose": "tests/utils/test_helpers.py",
        "dependencies": [
          "pytest",
          "json",
          "datetime",
          "typing"
        ],
        "public_api": [
          "TestDataFactory",
          "AssertionHelpers",
          "PerformanceHelpers",
          "create_user_data",
          "create_project_data",
          "create_task_data",
          "assert_datetime_recent",
          "assert_response_structure",
          "assert_response_time",
          "measure_throughput",
          "assert_throughput",
          "check_structure"
        ],
        "state": "complete",
        "loc": 81,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestDataFactory",
          "AssertionHelpers",
          "PerformanceHelpers"
        ],
        "functions": [
          "create_user_data",
          "create_project_data",
          "create_task_data",
          "assert_datetime_recent",
          "assert_response_structure",
          "assert_response_time",
          "measure_throughput",
          "assert_throughput",
          "check_structure"
        ]
      },
      {
        "name": "test_final_verification",
        "path": "test_final_verification.py",
        "purpose": "Add parent directory to path",
        "dependencies": [
          "json",
          "pathlib",
          "os",
          "sys",
          "shutil",
          "final_verification",
          "tempfile",
          "traceback"
        ],
        "public_api": [
          "test_verifier_initialization",
          "test_repository_analysis_verification",
          "test_component_enhancement_verification",
          "test_testing_verification",
          "test_deployment_readiness_verification",
          "test_complete_platform_verification",
          "test_report_generation",
          "run_all_tests"
        ],
        "state": "complete",
        "loc": 257,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "test_verifier_initialization",
          "test_repository_analysis_verification",
          "test_component_enhancement_verification",
          "test_testing_verification",
          "test_deployment_readiness_verification",
          "test_complete_platform_verification",
          "test_report_generation",
          "run_all_tests"
        ]
      },
      {
        "name": "test_testing_framework",
        "path": "test_testing_framework.py",
        "purpose": "Add parent directory to path for imports",
        "dependencies": [
          "json",
          "enhanced_workspace.engines.integrated.engines_enhanced",
          "enhanced_workspace.agents.integrated.agents_enhanced",
          "testing_framework",
          "asyncio",
          "pathlib",
          "sys",
          "pytest",
          "enhanced_workspace.api.integrated.api_enhanced"
        ],
        "public_api": [
          "TestEnhancedComponentTester",
          "TestEnhancedComponents",
          "tester",
          "test_initialization",
          "test_generate_test_report"
        ],
        "state": "complete",
        "loc": 175,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "TestEnhancedComponentTester",
          "TestEnhancedComponents"
        ],
        "functions": [
          "tester",
          "test_initialization",
          "test_generate_test_report"
        ]
      }
    ],
    "middleware": [
      {
        "name": "api.gateway",
        "path": "api.gateway.py",
        "purpose": "api/gateway.py",
        "dependencies": [
          "fastapi.openapi.utils",
          "logging",
          "fastapi.openapi.docs",
          "fastapi.middleware.cors",
          "json",
          "yaml",
          "httpx",
          "opentelemetry.trace.propagation.tracecontext",
          "asyncio",
          "fastapi",
          "opentelemetry",
          "uuid",
          "typing",
          "cachetools",
          "datetime",
          "fastapi.middleware.gzip",
          "fastapi.routing"
        ],
        "public_api": [
          "EnterpriseAPIGateway",
          "APIVersionManager",
          "RateLimiter",
          "RequestResponseTransformer",
          "APIMonetization",
          "DeveloperPortal",
          "get_available_versions",
          "get_latest_stable_version",
          "is_version_supported",
          "is_version_deprecated"
        ],
        "state": "deprecated",
        "loc": 518,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnterpriseAPIGateway",
          "APIVersionManager",
          "RateLimiter",
          "RequestResponseTransformer",
          "APIMonetization",
          "DeveloperPortal"
        ],
        "functions": [
          "get_available_versions",
          "get_latest_stable_version",
          "is_version_supported",
          "is_version_deprecated"
        ]
      },
      {
        "name": "request_tracking",
        "path": "request_tracking.py",
        "purpose": "Request Tracking",
        "dependencies": [
          "starlette.middleware.base",
          "time",
          "fastapi",
          "uuid",
          "structlog"
        ],
        "public_api": [
          "RequestTrackingMiddleware"
        ],
        "state": "complete",
        "loc": 64,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "RequestTrackingMiddleware"
        ],
        "functions": []
      },
      {
        "name": "gateway",
        "path": "gateway.py",
        "purpose": "api/gateway.py",
        "dependencies": [
          "fastapi.openapi.utils",
          "logging",
          "fastapi.openapi.docs",
          "fastapi.middleware.cors",
          "json",
          "yaml",
          "httpx",
          "opentelemetry.trace.propagation.tracecontext",
          "asyncio",
          "fastapi",
          "opentelemetry",
          "uuid",
          "typing",
          "cachetools",
          "datetime",
          "fastapi.middleware.gzip",
          "fastapi.routing"
        ],
        "public_api": [
          "EnterpriseAPIGateway",
          "APIVersionManager",
          "RateLimiter",
          "RequestResponseTransformer",
          "APIMonetization",
          "DeveloperPortal",
          "get_available_versions",
          "get_latest_stable_version",
          "is_version_supported",
          "is_version_deprecated"
        ],
        "state": "deprecated",
        "loc": 518,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "EnterpriseAPIGateway",
          "APIVersionManager",
          "RateLimiter",
          "RequestResponseTransformer",
          "APIMonetization",
          "DeveloperPortal"
        ],
        "functions": [
          "get_available_versions",
          "get_latest_stable_version",
          "is_version_supported",
          "is_version_deprecated"
        ]
      },
      {
        "name": "code_editor_agent_api",
        "path": "code_editor_agent_api.py",
        "purpose": "Code Editor Agent Api",
        "dependencies": [
          "fastapi.security",
          "fastapi.middleware.cors",
          "ymera_core.cache.redis_cache",
          "pydantic",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "typing",
          "datetime",
          "ymera_agents.communication.message_bus",
          "starlette.middleware.base",
          "starlette.responses",
          "logging",
          "ymera_core.exceptions",
          "starlette.middleware.sessions",
          "json",
          "ymera_services.ai.multi_llm_manager",
          "ymera_services.security.vulnerability_scanner",
          "fastapi",
          "ymera_agents.learning.knowledge_base",
          "ymera_services.code_analysis.quality_analyzer",
          "uuid",
          "ymera_core.config",
          "time",
          "ymera_agents.learning.learning_engine",
          "uvicorn",
          "pathlib",
          "ymera_core.database.manager",
          "code_editing_agent",
          "fastapi.middleware.gzip",
          "traceback",
          "fastapi.responses"
        ],
        "public_api": [],
        "state": "incomplete",
        "loc": 1214,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "circuit_breaker",
        "path": "circuit_breaker.py",
        "purpose": "Circuit Breaker",
        "dependencies": [
          "enum",
          "structlog",
          "time",
          "asyncio",
          "collections",
          "typing",
          "dataclasses"
        ],
        "public_api": [
          "CircuitState",
          "CircuitBreakerConfig",
          "CircuitBreakerOpenError",
          "CircuitBreaker",
          "CircuitBreakerRegistry",
          "get_metrics",
          "reset",
          "get_or_create",
          "get",
          "get_all_metrics",
          "reset_all",
          "list_open_breakers"
        ],
        "state": "complete",
        "loc": 301,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "CircuitState",
          "CircuitBreakerConfig",
          "CircuitBreakerOpenError",
          "CircuitBreaker",
          "CircuitBreakerRegistry"
        ],
        "functions": [
          "get_metrics",
          "reset",
          "get_or_create",
          "get",
          "get_all_metrics",
          "reset_all",
          "list_open_breakers"
        ]
      },
      {
        "name": "production_main_app",
        "path": "production_main_app.py",
        "purpose": "Core imports",
        "dependencies": [
          "fastapi.middleware.trustedhost",
          "fastapi.middleware.cors",
          "ymera_core.cache.redis_cache",
          "ymera_agents.orchestrator",
          "routes.chat_routes",
          "routes.ai_routes",
          "ymera_core.logging.structured_logger",
          "asyncio",
          "typing",
          "routes.analysis_routes",
          "ymera_core.exceptions",
          "contextlib",
          "ymera_core.security.auth_manager",
          "fastapi.exceptions",
          "ymera_core.monitoring.metrics",
          "ymera_services.ai.multi_llm_manager",
          "fastapi",
          "ymera_services.kibana.kibana_service",
          "uuid",
          "ymera_core.config",
          "ymera_services.github.repository_analyzer",
          "time",
          "ymera_agents.learning.learning_engine",
          "uvicorn",
          "ymera_core.database.manager",
          "fastapi.middleware.gzip",
          "fastapi.responses"
        ],
        "public_api": [
          "AppState",
          "get_db_manager",
          "get_cache_manager",
          "get_auth_manager",
          "get_ai_manager",
          "get_orchestrator",
          "get_learning_engine",
          "get_github_analyzer",
          "get_kibana_service",
          "get_metrics",
          "create_app"
        ],
        "state": "complete",
        "loc": 459,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AppState"
        ],
        "functions": [
          "get_db_manager",
          "get_cache_manager",
          "get_auth_manager",
          "get_ai_manager",
          "get_orchestrator",
          "get_learning_engine",
          "get_github_analyzer",
          "get_kibana_service",
          "get_metrics",
          "create_app"
        ]
      },
      {
        "name": "input_validation",
        "path": "input_validation.py",
        "purpose": "Input Validation",
        "dependencies": [
          "re",
          "fastapi",
          "starlette.middleware.base",
          "structlog"
        ],
        "public_api": [
          "InputValidationMiddleware"
        ],
        "state": "complete",
        "loc": 90,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "InputValidationMiddleware"
        ],
        "functions": []
      },
      {
        "name": "__init__",
        "path": "middleware/__init__.py",
        "purpose": "  Init  ",
        "dependencies": [
          "middleware.rate_limiter"
        ],
        "public_api": [
          "RateLimitMiddleware"
        ],
        "state": "complete",
        "loc": 6,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      },
      {
        "name": "api_enhanced",
        "path": "enhanced_workspace/api/integrated/api_enhanced.py",
        "purpose": "Api Enhanced",
        "dependencies": [
          "asyncio",
          "datetime",
          "logging",
          "typing"
        ],
        "public_api": [],
        "state": "complete",
        "loc": 190,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": []
      }
    ],
    "deployment": [
      {
        "name": "deployment_script",
        "path": "deployment_script.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "time",
          "pathlib",
          "os",
          "sys",
          "shutil",
          "typing",
          "subprocess",
          "argparse"
        ],
        "public_api": [
          "Colors",
          "IssueDetector",
          "FixApplier",
          "Verifier",
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "main",
          "check_database_import",
          "check_database_module",
          "check_encoding_issues",
          "check_import_consistency",
          "run_all_checks",
          "create_backup",
          "fix_database_import",
          "create_database_module",
          "fix_encoding_issues",
          "apply_all_fixes",
          "verify_imports",
          "verify_syntax",
          "run_all_verifications"
        ],
        "state": "complete",
        "loc": 416,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "Colors",
          "IssueDetector",
          "FixApplier",
          "Verifier"
        ],
        "functions": [
          "print_header",
          "print_success",
          "print_error",
          "print_warning",
          "print_info",
          "main",
          "check_database_import",
          "check_database_module",
          "check_encoding_issues",
          "check_import_consistency",
          "run_all_checks",
          "create_backup",
          "fix_database_import",
          "create_database_module",
          "fix_encoding_issues",
          "apply_all_fixes",
          "verify_imports",
          "verify_syntax",
          "run_all_verifications"
        ]
      },
      {
        "name": "verify_deployment",
        "path": "verify_deployment.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "core.config",
          "pathlib",
          "sys",
          "main",
          "subprocess",
          "core.auth"
        ],
        "public_api": [
          "print_header",
          "print_status",
          "check_dependencies",
          "check_structure",
          "check_imports",
          "run_tests",
          "main"
        ],
        "state": "complete",
        "loc": 144,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "print_header",
          "print_status",
          "check_dependencies",
          "check_structure",
          "check_imports",
          "run_tests",
          "main"
        ]
      },
      {
        "name": "health_check",
        "path": "enhanced_workspace/deployment/health_check.py",
        "purpose": "!/usr/bin/env python3",
        "dependencies": [
          "time",
          "redis",
          "os",
          "sys",
          "psycopg2",
          "requests",
          "socket"
        ],
        "public_api": [
          "check_port",
          "check_redis",
          "check_postgres",
          "check_api_gateway",
          "main"
        ],
        "state": "complete",
        "loc": 123,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "check_port",
          "check_redis",
          "check_postgres",
          "check_api_gateway",
          "main"
        ]
      }
    ],
    "api": [
      {
        "name": "complete_file_routes",
        "path": "complete_file_routes.py",
        "purpose": "===============================================================================",
        "dependencies": [
          "pydantic",
          "asyncio",
          "structlog",
          "typing",
          "datetime",
          "mimetypes",
          "sqlalchemy",
          "app.CORE_CONFIGURATION.config_settings",
          "sqlalchemy.ext.asyncio",
          "json",
          "database",
          "fastapi",
          "os",
          "uuid",
          "app.API_GATEWAY_CORE_ROUTES.database",
          "enum",
          "sqlalchemy.future",
          "config.settings",
          "hashlib",
          "pathlib",
          "aiofiles",
          "fastapi.responses"
        ],
        "public_api": [
          "FileType",
          "FileStatus",
          "ProcessingType",
          "FileConfig",
          "FileUploadRequest",
          "FileResponse",
          "FileSearchRequest",
          "BulkOperation",
          "FileRecord",
          "User",
          "FileManager",
          "Settings",
          "get_settings"
        ],
        "state": "complete",
        "loc": 675,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "FileType",
          "FileStatus",
          "ProcessingType",
          "FileConfig",
          "FileUploadRequest",
          "FileResponse",
          "FileSearchRequest",
          "BulkOperation",
          "FileRecord",
          "User",
          "FileManager",
          "Settings"
        ],
        "functions": [
          "get_settings"
        ]
      },
      {
        "name": "demo_expansion_framework",
        "path": "demo_expansion_framework.py",
        "purpose": "Demo Expansion Framework",
        "dependencies": [
          "enhanced_workspace.integration.api_versioning",
          "asyncio",
          "pathlib",
          "expansion_readiness",
          "enhanced_workspace.integration.config_template",
          "enhanced_workspace.integration.plugin_architecture"
        ],
        "public_api": [
          "AnalyticsPlugin",
          "print_section",
          "pre_request_hook",
          "post_request_hook"
        ],
        "state": "complete",
        "loc": 139,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "AnalyticsPlugin"
        ],
        "functions": [
          "print_section",
          "pre_request_hook",
          "post_request_hook"
        ]
      },
      {
        "name": "documentation",
        "path": "documentation.py",
        "purpose": "api/documentation.py",
        "dependencies": [
          "fastapi.openapi.utils",
          "fastapi",
          "pydantic",
          "fastapi.openapi.docs"
        ],
        "public_api": [
          "setup_documentation",
          "get_custom_openapi"
        ],
        "state": "deprecated",
        "loc": 128,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [],
        "functions": [
          "setup_documentation",
          "get_custom_openapi"
        ]
      },
      {
        "name": "gateway_routing_fixed",
        "path": "gateway_routing_fixed.py",
        "purpose": "Gateway Routing Fixed",
        "dependencies": [
          "fastapi.staticfiles",
          "fastapi.security",
          "fastapi.middleware.cors",
          "pydantic",
          "asyncio",
          "typing",
          "structlog",
          "datetime",
          "fastapi.websockets",
          "contextlib",
          "collections",
          "re",
          "json",
          "fastapi.middleware.gzip",
          "fastapi",
          "random",
          "uuid",
          "weakref",
          "enum",
          "time",
          "aiohttp",
          "hashlib",
          "pathlib",
          "aiofiles",
          "dataclasses",
          "traceback",
          "fastapi.responses"
        ],
        "public_api": [
          "YMERAAPIGateway",
          "ServiceRegistry",
          "LoadBalancer",
          "RequestRouter",
          "FileManager",
          "WebSocketManager",
          "ServiceEndpoint",
          "RoutingRule",
          "create_gateway"
        ],
        "state": "complete",
        "loc": 556,
        "has_tests": false,
        "test_coverage": null,
        "last_modified": "2025-10-19 22:22:06",
        "classes": [
          "ServiceStatus",
          "RoutingStrategy",
          "ServiceEndpoint",
          "RoutingRule",
          "CircuitBreaker",
          "ServiceRegistry",
          "LoadBalancer",
          "RequestRouter",
          "FileManager",
          "WebSocketManager",
          "YMERAAPIGateway"
        ],
        "functions": [
          "register_service",
          "unregister_service",
          "get_healthy_endpoints",
          "select_endpoint",
          "add_route",
          "find_route",
          "get_file_metadata",
          "list_user_files",
          "disconnect",
          "register_agent_service",
          "avg_response_time"
        ]
      }
    ]
  },
  "dependency_graph": {
    "prod_agent_manager": [
      "functools",
      "pydantic",
      "circuitbreaker",
      "asyncio",
      "sqlalchemy.pool",
      "sqlalchemy.exc",
      "typing",
      "structlog",
      "datetime",
      "shared.security.encryption",
      "logging",
      "sqlalchemy",
      "contextlib",
      "shared.utils.cache_manager",
      "shared.utils.message_broker",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "secrets",
      "json",
      "core.models",
      "tenacity",
      "uuid",
      "enum",
      "time",
      "shared.database.models",
      "dataclasses"
    ],
    "integration": [
      "pathlib",
      "os",
      "sys",
      "database_core_integrated"
    ],
    "component_enhancement_workflow": [
      "logging",
      "json",
      "asyncio",
      "pathlib",
      "os",
      "shutil",
      "collections",
      "typing",
      "datetime"
    ],
    "ai_agents_production": [
      "logging",
      "json",
      "enum",
      "time",
      "hashlib",
      "asyncio",
      "anthropic",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "production_custom_engines_full": [
      "logging",
      "json",
      "enum",
      "time",
      "opentelemetry.sdk.metrics.export",
      "opentelemetry.exporter.prometheus",
      "traceback",
      "asyncio",
      "statistics",
      "collections",
      "opentelemetry",
      "typing",
      "datetime",
      "dataclasses",
      "opentelemetry.sdk.metrics",
      "psutil",
      "base_agent"
    ],
    "models": [
      "re",
      "pydantic",
      "uuid",
      "typing",
      "datetime"
    ],
    "file_handler": [
      "structlog",
      "hashlib",
      "pathlib",
      "shared.config.settings",
      "typing",
      "datetime",
      "mimetypes"
    ],
    "read_replica_config": [
      "logging",
      "sqlalchemy.orm",
      "enum",
      "sqlalchemy",
      "random",
      "os",
      "sqlalchemy.pool",
      "typing"
    ],
    "production_intelligence_engine": [
      "json",
      "enum",
      "time",
      "asyncio",
      "os",
      "collections",
      "typing",
      "numpy",
      "dataclasses",
      "base_agent",
      "datetime"
    ],
    "editing_agent_v2 (1)": [
      "textstat",
      "spacy",
      "asyncio",
      "typing",
      "datetime",
      "language_tool_python",
      "difflib",
      "re",
      "nltk",
      "json",
      "os",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "sys",
      "nltk.sentiment",
      "dataclasses",
      "traceback"
    ],
    "backup_manager": [
      "subprocess",
      "json",
      "database_core_integrated",
      "hashlib",
      "asyncio",
      "pathlib",
      "os",
      "shutil",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "argparse",
      "gzip"
    ],
    "production_specialized_engines": [
      "json",
      "enum",
      "time",
      "asyncio",
      "statistics",
      "os",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "psutil",
      "base_agent",
      "gc"
    ],
    "tests.unit.test_models": [
      "src.models.user",
      "src.models.task",
      "src.models.project",
      "pytest",
      "datetime"
    ],
    "report_generator": [
      "logging",
      "json",
      "database",
      "asyncio",
      "typing",
      "datetime"
    ],
    "monitoring": [
      "logging",
      "asyncio",
      "typing",
      "prometheus_client",
      "datetime"
    ],
    "test_database": [
      "sqlalchemy.orm",
      "sqlalchemy",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "DATABASE_CORE",
      "traceback"
    ],
    "prod_monitoring_agent": [
      "asyncio",
      "typing",
      "datetime",
      "psutil",
      "statistics",
      "collections",
      "prometheus_client",
      "json",
      "sklearn.ensemble",
      "os",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "aiohttp",
      "signal",
      "numpy",
      "dataclasses",
      "traceback"
    ],
    "task_queue": [
      "enum",
      "time",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "dataclasses"
    ],
    "ymera_api_system": [
      "pydantic",
      "models.user",
      "asyncio",
      "anthropic",
      "typing",
      "structlog",
      "datetime",
      "openai",
      "logging",
      "database.base",
      "groq",
      "sqlalchemy",
      "contextlib",
      "sqlalchemy.ext.asyncio",
      "google.generativeai",
      "json",
      "aioredis",
      "sqlalchemy.dialects.postgresql",
      "fastapi",
      "uuid",
      "security.jwt_handler",
      "enum",
      "time",
      "database.connection",
      "base64",
      "aiohttp",
      "config.settings",
      "hashlib",
      "dataclasses",
      "fastapi.responses"
    ],
    "llm_agent": [
      "asyncio",
      "anthropic",
      "typing",
      "openai",
      "tiktoken",
      "opentelemetry",
      "qdrant_client.http.models",
      "sentence_transformers",
      "re",
      "qdrant_client",
      "json",
      "os",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "hashlib",
      "numpy",
      "dataclasses",
      "traceback"
    ],
    "testing_framework": [
      "re",
      "json",
      "time",
      "unittest.mock",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "inspect",
      "typing",
      "pytest",
      "importlib.util",
      "datetime"
    ],
    "static_analysis_prod": [
      "re",
      "json",
      "enum",
      "time",
      "contextlib",
      "hashlib",
      "asyncio",
      "ast",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "base_agent"
    ],
    "BaseEvent": [
      "kafka"
    ],
    "quickstart": [
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "DATABASE_CORE",
      "traceback"
    ],
    "query_optimization": [
      "logging",
      "json",
      "time",
      "sqlalchemy",
      "pathlib",
      "collections",
      "typing",
      "datetime",
      "sqlalchemy.engine"
    ],
    "chat_handler": [
      "shared.database.connection_pool",
      "asyncio",
      "typing",
      "shared.config.settings",
      "structlog",
      "datetime"
    ],
    "tests.performance.test_load": [
      "json",
      "asyncio",
      "locust",
      "pytest",
      "datetime"
    ],
    "chatting_files_agent_api_system": [
      "fastapi.staticfiles",
      "json",
      "fastapi.middleware.cors",
      "websockets",
      "logging",
      "pydantic",
      "asyncio",
      "pathlib",
      "os",
      "fastapi",
      "uuid",
      "typing",
      "aiofiles",
      "datetime",
      "mimetypes",
      "fastapi.responses"
    ],
    "examination_agent": [
      "re",
      "json",
      "enum",
      "time",
      "hashlib",
      "asyncio",
      "statistics",
      "os",
      "collections",
      "opentelemetry",
      "typing",
      "numpy",
      "dataclasses",
      "traceback",
      "base_agent",
      "datetime"
    ],
    "batch_processor": [
      "asyncio",
      "dataclasses",
      "typing",
      "structlog"
    ],
    "learning-agent-security": [
      "cryptography.hazmat.backends",
      "asyncio",
      "prometheus_client.exposition",
      "sqlalchemy.pool",
      "typing",
      "datetime",
      "psutil",
      "logging",
      "transformers",
      "sqlalchemy",
      "contextlib",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "hvac",
      "secrets",
      "json",
      "redis.asyncio",
      "os",
      "base64",
      "torch",
      "cryptography.hazmat.primitives.kdf.pbkdf2",
      "torch.nn",
      "cryptography.hazmat.primitives",
      "cryptography.hazmat.primitives.ciphers"
    ],
    "prod_analyzer_engine": [
      "re",
      "json",
      "enum",
      "time",
      "math",
      "hashlib",
      "asyncio",
      "sklearn.ensemble",
      "os",
      "collections",
      "ast",
      "typing",
      "numpy",
      "dataclasses",
      "traceback",
      "base_agent",
      "datetime"
    ],
    "logger": [
      "logging",
      "sys",
      "typing",
      "pythonjsonlogger"
    ],
    "connection_manager": [
      "logging",
      "json",
      "asyncio",
      "fastapi",
      "uuid",
      "typing",
      "datetime"
    ],
    "001_initial_schema": [
      "sqlalchemy.ext.asyncio",
      "sqlalchemy",
      "database_core_integrated"
    ],
    "settings": [
      "pydantic",
      "pydantic_settings",
      "os",
      "typing"
    ],
    "agent_manager_integrated (1)": [
      "agent_surveillance",
      "logging",
      "enum",
      "monitoring.telemetry_manager",
      "agent_lifecycle_manager",
      "agent_code_of_conduct",
      "ai.multi_modal_ai",
      "agent_orchestrator",
      "asyncio",
      "typing",
      "security.rbac_manager",
      "monitoring.alert_manager",
      "datetime",
      "config",
      "database.secure_database_manager"
    ],
    "log_manager": [
      "logging",
      "json",
      "asyncio",
      "pathlib",
      "collections",
      "typing",
      "datetime"
    ],
    "learning_agent_helpers": [
      "re",
      "models",
      "sqlalchemy",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "env": [
      "core.sqlalchemy_models",
      "sqlalchemy",
      "asyncio",
      "alembic",
      "logging.config",
      "sqlalchemy.ext.asyncio"
    ],
    "agents_management_api": [
      "fastapi.security",
      "ymera_core.cache.redis_cache",
      "ymera_agents.orchestrator",
      "pydantic",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "typing",
      "datetime",
      "ymera_agents.communication.message_bus",
      "logging",
      "ymera_core.exceptions",
      "ymera_core.security.auth_manager",
      "ymera_agents.lifecycle_manager",
      "json",
      "ymera_services.ai.multi_llm_manager",
      "fastapi",
      "ymera_agents.learning.knowledge_base",
      "uuid",
      "ymera_core.config",
      "enum",
      "ymera_agents.learning.learning_engine",
      "ymera_core.database.manager",
      "ymera_agents.registry"
    ],
    "core_engine_utils": [
      "logging",
      "json",
      "time",
      "hashlib",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "datetime",
      "functools"
    ],
    "production_base_agent": [
      "nats",
      "asyncio",
      "typing",
      "datetime",
      "logging",
      "contextlib",
      "opentelemetry",
      "asyncpg.pool",
      "opentelemetry.sdk.metrics",
      "json",
      "opentelemetry.sdk.trace",
      "redis.asyncio",
      "opentelemetry.exporter.prometheus",
      "opentelemetry.sdk.trace.export",
      "uuid",
      "asyncpg",
      "nats.errors",
      "abc",
      "enum",
      "time",
      "dataclasses",
      "traceback"
    ],
    "api.gateway": [
      "fastapi.openapi.utils",
      "logging",
      "fastapi.middleware.cors",
      "fastapi.openapi.docs",
      "json",
      "yaml",
      "httpx",
      "opentelemetry.trace.propagation.tracecontext",
      "asyncio",
      "fastapi",
      "opentelemetry",
      "uuid",
      "typing",
      "cachetools",
      "datetime",
      "fastapi.middleware.gzip",
      "fastapi.routing"
    ],
    "db_monitoring": [
      "logging",
      "json",
      "asyncio",
      "smtplib",
      "email.mime.text",
      "pathlib",
      "email.mime.multipart",
      "fastapi",
      "typing",
      "datetime"
    ],
    "workflow_engine": [
      "enum",
      "time",
      "task_orchestrator",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "dataclasses"
    ],
    "learning_agent": [
      "json",
      "shared.database.connection_pool",
      "sqlalchemy",
      "shared.communication.agent_communicator",
      "asyncio",
      "pathlib",
      "typing",
      "shared.config.settings",
      "structlog",
      "shared.utils.metrics",
      "sqlalchemy.ext.asyncio",
      "numpy",
      "datetime"
    ],
    "__init__": [
      "middleware.rate_limiter",
      "core.sqlalchemy_models",
      "core.config",
      "core.database",
      "agent",
      "core.auth"
    ],
    "performance_engine": [
      "logging",
      "json",
      "enum",
      "time",
      "asyncio",
      "statistics",
      "os",
      "collections",
      "opentelemetry",
      "random",
      "asyncpg",
      "typing",
      "numpy",
      "dataclasses",
      "base_agent"
    ],
    "learning_agent_database": [
      "json",
      "sqlalchemy.orm",
      "redis.asyncio",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "uuid",
      "typing",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "base_agent 2": [
      "logging",
      "enum",
      "time",
      "typing",
      "dataclasses"
    ],
    "test_integration_preparation": [
      "pathlib",
      "os",
      "shutil",
      "tempfile",
      "pytest",
      "integration_preparation"
    ],
    "security_agent": [
      "cryptography.hazmat.primitives.asymmetric",
      "hmac",
      "asyncio",
      "typing",
      "datetime",
      "cryptography.fernet",
      "opentelemetry",
      "secrets",
      "jwt",
      "re",
      "json",
      "aioredis",
      "os",
      "uuid",
      "ipaddress",
      "base_agent",
      "enum",
      "time",
      "base64",
      "cryptography.hazmat.primitives.kdf.pbkdf2",
      "cryptography.hazmat.primitives",
      "hashlib",
      "bcrypt",
      "dataclasses"
    ],
    "enhanced_base_agent": [
      "logging.handlers",
      "nats",
      "functools",
      "asyncio",
      "nats.aio.client",
      "typing",
      "datetime",
      "logging",
      "asyncpg.exceptions",
      "contextlib",
      "json",
      "redis.asyncio",
      "random",
      "uuid",
      "asyncpg",
      "nats.errors",
      "enum",
      "time",
      "signal",
      "sys",
      "dataclasses",
      "traceback"
    ],
    "user": [
      "re",
      "enum",
      "pydantic",
      "uuid",
      "typing",
      "datetime"
    ],
    "workflow_manager": [
      "logging",
      "json",
      "enum",
      "async_timeout",
      "networkx",
      "models",
      "pydantic",
      "asyncio",
      "uuid",
      "typing",
      "security.rbac_manager",
      "datetime",
      "dataclasses"
    ],
    "production_monitoring_agent": [
      "logging",
      "json",
      "enum",
      "time",
      "enhanced_base_agent",
      "aiohttp",
      "asyncio",
      "statistics",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "psutil"
    ],
    "ServiceRegistry": [
      "io",
      "boto3",
      "consul",
      "elasticsearch",
      "azure.storage.blob"
    ],
    "insight_generator": [
      "models",
      "sqlalchemy",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "live_chatting_manager": [
      "logging",
      "json",
      "enum",
      "websockets",
      "time",
      "aiohttp",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "opentelemetry",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "conftest": [
      "core.config",
      "httpx",
      "core.database",
      "asyncio",
      "os",
      "main",
      "typing",
      "pytest"
    ],
    "prod_performance_engine": [
      "asyncio",
      "typing",
      "datetime",
      "psutil",
      "statistics",
      "collections",
      "opentelemetry",
      "prometheus_client",
      "json",
      "redis.asyncio",
      "os",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "signal",
      "sys",
      "numpy",
      "dataclasses",
      "traceback",
      "gc"
    ],
    "router": [
      "json",
      "io",
      "pydantic",
      "fastapi",
      "typing",
      "structlog",
      "datetime",
      "fastapi.responses"
    ],
    "prod_optimizing_engine": [
      "asyncio",
      "typing",
      "datetime",
      "psutil",
      "statistics",
      "collections",
      "opentelemetry",
      "prometheus_client",
      "opentelemetry.trace",
      "json",
      "redis.asyncio",
      "os",
      "uuid",
      "asyncpg",
      "base_agent",
      "enum",
      "time",
      "signal",
      "sys",
      "numpy",
      "dataclasses",
      "traceback"
    ],
    "example_agent": [
      "asyncio",
      "logging",
      "agent_client"
    ],
    "agent_lifecycle_manager": [
      "logging",
      "models",
      "enum",
      "monitoring.telemetry_manager",
      "json",
      "sqlalchemy",
      "asyncio",
      "uuid",
      "typing",
      "datetime"
    ],
    "agent_manager_production": [
      "fastapi.security",
      "fastapi.middleware.cors",
      "pydantic",
      "cryptography.hazmat.backends",
      "asyncio",
      "dataclasses",
      "monitoring.alert_manager",
      "typing",
      "datetime",
      "cryptography.fernet",
      "logging",
      "sqlalchemy.orm",
      "performance.scaling_manager",
      "performance.caching_manager",
      "security.zero_trust_complete",
      "sqlalchemy",
      "security.advanced_authentication",
      "opentelemetry",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "opentelemetry.exporter.jaeger.thrift",
      "secrets",
      "jwt",
      "json",
      "opentelemetry.sdk.trace",
      "redis.asyncio",
      "opentelemetry.sdk.trace.export",
      "fastapi",
      "os",
      "uuid",
      "asyncpg",
      "passlib.context",
      "enum",
      "opentelemetry.sdk.resources",
      "opentelemetry.semconv.resource",
      "time",
      "base64",
      "monitoring.telemetry_manager",
      "cryptography.hazmat.primitives.kdf.pbkdf2",
      "monitoring.predictive_analytics",
      "security.compliance_manager",
      "cryptography.hazmat.primitives",
      "hashlib",
      "signal",
      "performance.queue_manager",
      "traceback",
      "fastapi.responses"
    ],
    "alembic_setup": [
      "app.models",
      "app.database",
      "sqlalchemy",
      "pathlib",
      "alembic",
      "os",
      "sys",
      "logging.config"
    ],
    "tests.unit.test_services": [
      "unittest.mock",
      "src.models.task",
      "src.models.project",
      "src.services.project_service",
      "src.services.task_service",
      "pytest"
    ],
    "final_verification": [
      "json",
      "pathlib",
      "os",
      "sys",
      "typing",
      "datetime"
    ],
    "task_routes": [
      "models",
      "services",
      "fastapi",
      "uuid",
      "typing",
      "datetime"
    ],
    "request_tracking": [
      "starlette.middleware.base",
      "time",
      "fastapi",
      "uuid",
      "structlog"
    ],
    "advanced_features": [
      "logging",
      "json",
      "redis.asyncio",
      "hashlib",
      "asyncio",
      "fastapi",
      "hmac",
      "typing",
      "prometheus_client",
      "datetime",
      "functools",
      "psutil"
    ],
    "test_component_enhancement_workflow": [
      "logging",
      "unittest",
      "json",
      "component_enhancement_workflow",
      "pathlib",
      "asyncio",
      "os",
      "shutil",
      "tempfile",
      "prometheus_client",
      "pytest"
    ],
    "unified_system": [
      "logging",
      "learning_agent.agent",
      "project_agent.agent",
      "asyncio",
      "signal",
      "pathlib",
      "sys",
      "typing",
      "structlog",
      "prometheus_client",
      "agent_manager.agent",
      "base_agent",
      "datetime"
    ],
    "test_project_agent": [
      "pytest",
      "agents.project_agent.agent"
    ],
    "file_routes_complete": [
      "pydantic",
      "app.utils.file_validator",
      "structlog",
      "typing",
      "datetime",
      "mimetypes",
      "app.utils.virus_scanner",
      "sqlalchemy",
      "app.SECURITY.jwt_handler",
      "app.DATABASE_CORE.database_connection",
      "magic",
      "app.CORE_CONFIGURATION.config_settings",
      "sqlalchemy.ext.asyncio",
      "fastapi",
      "os",
      "uuid",
      "PIL",
      "hashlib",
      "pathlib",
      "app.models.user",
      "aiofiles",
      "app.models.file",
      "fastapi.responses"
    ],
    "tests.e2e.test_user_journeys": [
      "pytest",
      "fastapi",
      "asyncio",
      "datetime"
    ],
    "agent_discovery": [
      "agent_registry",
      "enum",
      "structlog",
      "asyncio",
      "random",
      "typing",
      "dataclasses"
    ],
    "gateway": [
      "fastapi.openapi.utils",
      "logging",
      "fastapi.middleware.cors",
      "fastapi.openapi.docs",
      "json",
      "yaml",
      "httpx",
      "opentelemetry.trace.propagation.tracecontext",
      "asyncio",
      "fastapi",
      "opentelemetry",
      "uuid",
      "typing",
      "cachetools",
      "datetime",
      "fastapi.middleware.gzip",
      "fastapi.routing"
    ],
    "cache_manager": [
      "json",
      "enum",
      "pickle",
      "redis.asyncio",
      "hashlib",
      "asyncio",
      "typing",
      "structlog",
      "datetime",
      "functools"
    ],
    "api_extensions": [
      "json",
      "csv",
      "io",
      "asyncio",
      "fastapi",
      "advanced_features",
      "uuid",
      "typing",
      "datetime",
      "fastapi.responses"
    ],
    "sqlalchemy_models": [
      "sqlalchemy.orm",
      "enum",
      "sqlalchemy",
      "uuid",
      "datetime"
    ],
    "performance_engine_agent": [
      "asyncio",
      "cProfile",
      "concurrent.futures",
      "typing",
      "datetime",
      "psutil",
      "resource",
      "statistics",
      "collections",
      "multiprocessing",
      "opentelemetry",
      "tracemalloc",
      "opentelemetry.trace",
      "json",
      "threading",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "sys",
      "pstats",
      "dataclasses",
      "gc"
    ],
    "deployment_script": [
      "subprocess",
      "time",
      "pathlib",
      "os",
      "sys",
      "shutil",
      "typing",
      "argparse"
    ],
    "enhanced_agent_lifecycle": [
      "logging",
      "json",
      "enum",
      "monitoring.telemetry_manager",
      "pydantic",
      "sqlalchemy",
      "models.secure_models",
      "asyncio",
      "typing",
      "uuid",
      "monitoring.alert_manager",
      "security.rbac_manager",
      "sqlalchemy.ext.asyncio",
      "config",
      "database.secure_database_manager",
      "datetime"
    ],
    "knowledge_graph": [
      "logging",
      "json",
      "enum",
      "networkx",
      "community",
      "hashlib",
      "asyncio",
      "collections",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "verify_deployment": [
      "core.config",
      "pathlib",
      "sys",
      "main",
      "subprocess",
      "core.auth"
    ],
    "coding_agent": [
      "re",
      "tempfile",
      "json",
      "time",
      "resource",
      "enhanced_base_agent",
      "contextlib",
      "hashlib",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "typing",
      "signal",
      "shutil",
      "subprocess",
      "datetime",
      "dataclasses"
    ],
    "file": [
      "pydantic",
      "datetime",
      "uuid",
      "typing"
    ],
    "fastapi_integration": [
      "logging",
      "fastapi.middleware.cors",
      "app.database",
      "app.backup_recovery",
      "sqlalchemy.orm",
      "contextlib",
      "app.query_optimization",
      "uvicorn",
      "asyncio",
      "fastapi",
      "app.migration_manager",
      "os",
      "app.read_replica_config",
      "app.db_monitoring",
      "typing"
    ],
    "agent_lifecycle_mgr": [
      "logging",
      "enum",
      "monitoring.telemetry_manager",
      "pydantic",
      "sqlalchemy",
      "models.secure_models",
      "asyncio",
      "fastapi",
      "typing",
      "uuid",
      "monitoring.alert_manager",
      "security.rbac_manager",
      "sqlalchemy.ext.asyncio",
      "config",
      "database.secure_database_manager",
      "datetime"
    ],
    "orchestrator": [
      "core.models",
      "sqlalchemy",
      "typing",
      "uuid",
      "structlog",
      "shared.utils.message_broker",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "rate_limiter": [
      "starlette.middleware.base",
      "starlette.responses",
      "starlette.requests",
      "core.config",
      "redis.asyncio",
      "time",
      "starlette.types"
    ],
    "agent_surveillance": [
      "logging",
      "sqlalchemy",
      "models.secure_models",
      "ai.multi_modal_ai",
      "asyncio",
      "typing",
      "monitoring.alert_manager",
      "sqlalchemy.ext.asyncio",
      "config",
      "database.secure_database_manager",
      "datetime"
    ],
    "backup_recovery": [
      "logging",
      "azure.identity",
      "azure.mgmt.sql",
      "os",
      "typing",
      "datetime"
    ],
    "learning_agent_models": [
      "sqlalchemy.orm",
      "enum",
      "sqlalchemy",
      "dataclasses",
      "typing",
      "datetime",
      "shared.database.models"
    ],
    "orchestrator_agent": [
      "json",
      "time",
      "asyncio",
      "random",
      "collections",
      "heapq",
      "opentelemetry",
      "typing",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "audit_manager": [
      "logging",
      "aioredis",
      "enum",
      "json",
      "hashlib",
      "asyncio",
      "hmac",
      "random",
      "uuid",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "test_learning_agent": [
      "pytest",
      "agents.learning_agent.agent"
    ],
    "file_validator_util": [
      "PIL",
      "io",
      "zipfile",
      "hashlib",
      "pathlib",
      "magic",
      "typing",
      "dataclasses",
      "mimetypes"
    ],
    "knowledge_store": [
      "json",
      "models",
      "sqlalchemy",
      "shared.utils.cache_manager",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "extensions": [
      "json",
      "csv",
      "io",
      "asyncio",
      "fastapi",
      "advanced_features",
      "uuid",
      "typing",
      "datetime",
      "fastapi.responses"
    ],
    "enterprise_agent_manager": [
      "fastapi.security",
      "fastapi.middleware.cors",
      "pydantic",
      "cryptography.hazmat.backends",
      "asyncio",
      "typing",
      "datetime",
      "cryptography.fernet",
      "logging",
      "sqlalchemy.orm",
      "sqlalchemy",
      "opentelemetry",
      "prometheus_client",
      "opentelemetry.exporter.jaeger.thrift",
      "sqlalchemy.ext.asyncio",
      "secrets",
      "jwt",
      "re",
      "json",
      "opentelemetry.sdk.trace",
      "redis.asyncio",
      "opentelemetry.sdk.trace.export",
      "fastapi",
      "os",
      "uuid",
      "passlib.context",
      "enum",
      "opentelemetry.sdk.resources",
      "opentelemetry.semconv.resource",
      "time",
      "base64",
      "cryptography.hazmat.primitives.kdf.pbkdf2",
      "cryptography.hazmat.primitives",
      "uvicorn",
      "hashlib",
      "signal",
      "dataclasses",
      "traceback",
      "fastapi.responses"
    ],
    "tests.conftest": [
      "src.models.user",
      "src.main",
      "sqlalchemy.orm",
      "src.database",
      "unittest.mock",
      "fastapi.testclient",
      "asyncio",
      "os",
      "sys",
      "src.core.security",
      "typing",
      "pytest",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "scaling.auto_scaler": [
      "logging",
      "prometheus_api_client",
      "time",
      "asyncio",
      "scipy",
      "kubernetes",
      "typing",
      "datetime",
      "dataclasses",
      "numpy"
    ],
    "mandatory_reporting": [
      "logging",
      "models",
      "json",
      "sqlalchemy",
      "asyncio",
      "typing",
      "datetime"
    ],
    "project_agent_main": [
      "services.project_builder_agent",
      "core.quality_verifier",
      "fastapi.middleware.cors",
      "core.report_generator",
      "asyncio",
      "core.agent_orchestrator",
      "typing",
      "datetime",
      "core.file_manager",
      "logging",
      "contextlib",
      "core.project_integrator",
      "json",
      "core.config",
      "utils.websocket_manager",
      "core.database",
      "fastapi",
      "uuid",
      "core.auth",
      "utils.metrics",
      "utils.log_manager",
      "core.chat_interface",
      "uvicorn",
      "hashlib",
      "fastapi.responses"
    ],
    "intelligence_engine": [
      "asyncio",
      "concurrent.futures",
      "typing",
      "datetime",
      "logging",
      "collections",
      "opentelemetry",
      "json",
      "aioredis",
      "threading",
      "os",
      "uuid",
      "asyncpg",
      "weakref",
      "base_agent",
      "enum",
      "time",
      "hashlib",
      "numpy",
      "dataclasses"
    ],
    "chat_interface": [
      "logging",
      "json",
      "database",
      "agent_orchestrator",
      "asyncio",
      "typing",
      "datetime"
    ],
    "agent_communicator": [
      "json",
      "structlog",
      "shared.database.connection_pool",
      "asyncio",
      "shared.config.settings",
      "typing",
      "datetime"
    ],
    "system": [
      "logger",
      "logging",
      "infrastructure.message_broker",
      "enum",
      "infrastructure.monitoring",
      "learning.engine",
      "learning.external_learning",
      "asyncio",
      "learning.knowledge_base",
      "learning.pattern_recognition",
      "uuid",
      "typing",
      "dataclasses",
      "datetime",
      "config",
      "learning.continuous_learning"
    ],
    "knowledge_manager": [
      "logging",
      "json",
      "models",
      "database",
      "asyncio",
      "uuid",
      "typing",
      "datetime"
    ],
    "encryption": [
      "structlog",
      "base64",
      "cryptography.hazmat.primitives.kdf.pbkdf2",
      "cryptography.hazmat.primitives",
      "hashlib",
      "os",
      "shared.config.settings",
      "typing",
      "cryptography.fernet"
    ],
    "routes": [
      "pydantic",
      "fastapi",
      "typing",
      "structlog",
      "datetime"
    ],
    "tests.security.test_security": [
      "pytest",
      "fastapi",
      "json",
      "security_headers"
    ],
    "message_broker": [
      "logging",
      "json",
      "aiokafka.errors",
      "asyncio",
      "typing",
      "datetime",
      "aiokafka"
    ],
    "recommendation_engine": [
      "models",
      "sqlalchemy",
      "collections",
      "typing",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "test_e2e_standalone": [
      "json",
      "time",
      "asyncio",
      "pathlib",
      "sys",
      "typing",
      "datetime",
      "traceback"
    ],
    "external_integration": [
      "logging",
      "json",
      "monitoring.telemetry_manager",
      "time",
      "datadog",
      "aiohttp",
      "asyncio",
      "os",
      "newrelic.agent",
      "typing",
      "datetime",
      "splunklib.client"
    ],
    "app_agent_mgmt_endpoints": [
      "agent_lifecycle_manager"
    ],
    "api_gateway": [
      "logging",
      "json",
      "enum",
      "time",
      "aiohttp",
      "asyncio",
      "os",
      "collections",
      "nats.aio.client",
      "uuid",
      "typing",
      "dataclasses",
      "datetime",
      "nats.errors",
      "jwt"
    ],
    "audit_system": [
      "logging",
      "models",
      "json",
      "sqlalchemy",
      "asyncio",
      "uuid",
      "typing",
      "datetime"
    ],
    "tests.integration.test_api_endpoints": [
      "pytest",
      "fastapi",
      "src.models.user",
      "src.models.project"
    ],
    "infrastructure.distributed__init__": [
      "logging",
      "enum",
      "time",
      "asyncio",
      "uuid",
      "typing",
      "dataclasses"
    ],
    "test_suite (1)": [
      "app.database",
      "sqlalchemy.orm",
      "threading",
      "app.backup_recovery",
      "time",
      "sqlalchemy",
      "app.query_optimization",
      "asyncio",
      "app.migration_manager",
      "os",
      "app.read_replica_config",
      "app.db_monitoring",
      "pytest",
      "datetime"
    ],
    "learning_agent_main": [
      "logging",
      "json",
      "enum",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "datetime",
      "dataclasses"
    ],
    "project": [
      "enum",
      "pydantic",
      "uuid",
      "typing",
      "datetime"
    ],
    "quickstart_script": [
      "subprocess",
      "json",
      "time",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "typing",
      "cryptography.fernet"
    ],
    "static_analysis_examples": [
      "json",
      "time",
      "asyncio",
      "nats.aio.client",
      "uuid",
      "typing"
    ],
    "metrics_collector": [
      "logging",
      "time",
      "asyncio",
      "collections",
      "typing",
      "datetime"
    ],
    "code_editor_agent_api": [
      "fastapi.security",
      "fastapi.middleware.cors",
      "ymera_core.cache.redis_cache",
      "pydantic",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "typing",
      "datetime",
      "ymera_agents.communication.message_bus",
      "starlette.middleware.base",
      "starlette.responses",
      "logging",
      "ymera_core.exceptions",
      "starlette.middleware.sessions",
      "json",
      "ymera_services.ai.multi_llm_manager",
      "ymera_services.security.vulnerability_scanner",
      "fastapi",
      "ymera_agents.learning.knowledge_base",
      "ymera_services.code_analysis.quality_analyzer",
      "uuid",
      "ymera_core.config",
      "time",
      "ymera_agents.learning.learning_engine",
      "uvicorn",
      "pathlib",
      "ymera_core.database.manager",
      "code_editing_agent",
      "fastapi.middleware.gzip",
      "traceback",
      "fastapi.responses"
    ],
    "agent_manager_integration": [
      "agent_surveillance",
      "logging",
      "json",
      "enum",
      "monitoring.telemetry_manager",
      "yaml",
      "agent_lifecycle_manager",
      "ai.multi_modal_ai",
      "agent_orchestrator",
      "asyncio",
      "typing",
      "security.rbac_manager",
      "monitoring.alert_manager",
      "datetime",
      "config",
      "database.secure_database_manager"
    ],
    "continuous_learning": [
      "logging",
      "enum",
      "asyncio",
      "typing",
      "datetime",
      "dataclasses",
      "numpy"
    ],
    "infrastructure.security__init__": [
      "re",
      "logging",
      "enum",
      "time",
      "asyncio",
      "string",
      "typing",
      "bcrypt",
      "dataclasses",
      "secrets",
      "cryptography.fernet",
      "jwt"
    ],
    "communication_agent": [
      "re",
      "json",
      "enum",
      "time",
      "zlib",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "opentelemetry",
      "uuid",
      "typing",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "validation_agent_complete": [
      "re",
      "json",
      "enum",
      "time",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "base_agent"
    ],
    "circuit_breaker": [
      "enum",
      "time",
      "asyncio",
      "collections",
      "typing",
      "structlog",
      "dataclasses"
    ],
    "base_agent": [
      "nats",
      "asyncio",
      "nats.aio.client",
      "typing",
      "structlog",
      "logging",
      "consul",
      "contextlib",
      "opentelemetry",
      "prometheus_client",
      "opentelemetry.exporter.jaeger.thrift",
      "opentelemetry.sdk.metrics",
      "opentelemetry.trace",
      "json",
      "aioredis",
      "opentelemetry.sdk.trace",
      "opentelemetry.exporter.prometheus",
      "opentelemetry.sdk.trace.export",
      "uuid",
      "asyncpg",
      "abc",
      "enum",
      "opentelemetry.sdk.resources",
      "time",
      "signal",
      "sys",
      "nats.js.api",
      "dataclasses",
      "traceback"
    ],
    "config": [
      "json",
      "pydantic",
      "pathlib",
      "pydantic_settings",
      "os",
      "typing"
    ],
    "test_deployment_preparation": [
      "pathlib",
      "os",
      "sys"
    ],
    "test_comprehensive": [
      "core.config",
      "learning.engine",
      "asyncio",
      "pathlib",
      "core.system",
      "sys",
      "traceback"
    ],
    "validation_agent": [
      "re",
      "json",
      "enum",
      "time",
      "pydantic",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "opentelemetry",
      "jsonschema",
      "uuid",
      "sqlalchemy.dialects",
      "typing",
      "dataclasses",
      "base_agent"
    ],
    "task_worker": [
      "logging",
      "json",
      "app.database",
      "kafka",
      "app.config",
      "app.schemas",
      "asyncio",
      "signal",
      "sys",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "complete_deployment_script": [
      "subprocess",
      "time",
      "pathlib",
      "os",
      "sys",
      "shutil",
      "typing"
    ],
    "enhanced_chat_routes": [
      "logging",
      "json",
      "ymera_services.ai.multi_llm_manager",
      "enum",
      "ymera_core.cache.redis_cache",
      "ymera_agents.learning.learning_engine",
      "pydantic",
      "ymera_agents.orchestrator",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "fastapi",
      "ymera_core.database.manager",
      "ymera_core.security.auth_manager",
      "uuid",
      "typing",
      "datetime",
      "fastapi.responses"
    ],
    "pattern_recognition": [
      "logging",
      "enum",
      "hashlib",
      "asyncio",
      "collections",
      "typing",
      "datetime",
      "dataclasses",
      "numpy"
    ],
    "enhanced_api_endpoints": [
      "json",
      "fastapi.middleware.cors",
      "httpx",
      "pydantic",
      "uvicorn",
      "asyncio",
      "fastapi",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "learning_agent_database",
      "enhanced_learning_agent"
    ],
    "production_config": [
      "enum",
      "pydantic",
      "pydantic_settings",
      "os",
      "typing"
    ],
    "complete_file_routes": [
      "pydantic",
      "asyncio",
      "structlog",
      "typing",
      "datetime",
      "mimetypes",
      "sqlalchemy",
      "app.CORE_CONFIGURATION.config_settings",
      "sqlalchemy.ext.asyncio",
      "json",
      "database",
      "fastapi",
      "os",
      "uuid",
      "app.API_GATEWAY_CORE_ROUTES.database",
      "enum",
      "sqlalchemy.future",
      "config.settings",
      "hashlib",
      "pathlib",
      "aiofiles",
      "fastapi.responses"
    ],
    "external_learning": [
      "logging",
      "enum",
      "aiohttp",
      "asyncio",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "document_generation_engine": [
      "json",
      "enum",
      "csv",
      "io",
      "asyncio",
      "pathlib",
      "typing",
      "structlog",
      "datetime",
      "dataclasses",
      "xml.etree.ElementTree"
    ],
    "monitoring.alerting": [
      "logging",
      "slack_sdk",
      "httpx",
      "time",
      "asyncio",
      "smtplib",
      "email.mime.text",
      "typing",
      "datetime",
      "dataclasses",
      "slack_sdk.errors"
    ],
    "database_core_integrated": [
      "asyncio",
      "sqlalchemy.pool",
      "sqlalchemy.exc",
      "structlog",
      "typing",
      "datetime",
      "logging",
      "sqlalchemy.orm",
      "sqlalchemy",
      "contextlib",
      "sqlalchemy.ext.asyncio",
      "json",
      "sqlalchemy.dialects.postgresql",
      "os",
      "uuid",
      "abc",
      "hashlib",
      "pathlib",
      "dataclasses"
    ],
    "knowledge_flow_manager": [
      "models",
      "sqlalchemy",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "shared.utils.message_broker",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "submission": [
      "enum",
      "pydantic",
      "uuid",
      "typing",
      "datetime"
    ],
    "demo_expansion_framework": [
      "enhanced_workspace.integration.api_versioning",
      "asyncio",
      "pathlib",
      "expansion_readiness",
      "enhanced_workspace.integration.config_template",
      "enhanced_workspace.integration.plugin_architecture"
    ],
    "security_scanner": [
      "re",
      "json",
      "hashlib",
      "pathlib",
      "os",
      "typing",
      "datetime"
    ],
    "production_main_app": [
      "fastapi.middleware.cors",
      "fastapi.middleware.trustedhost",
      "ymera_core.cache.redis_cache",
      "ymera_agents.orchestrator",
      "routes.chat_routes",
      "routes.ai_routes",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "typing",
      "routes.analysis_routes",
      "ymera_core.exceptions",
      "contextlib",
      "ymera_core.security.auth_manager",
      "fastapi.exceptions",
      "ymera_core.monitoring.metrics",
      "ymera_services.ai.multi_llm_manager",
      "fastapi",
      "ymera_services.kibana.kibana_service",
      "uuid",
      "ymera_core.config",
      "ymera_services.github.repository_analyzer",
      "time",
      "ymera_agents.learning.learning_engine",
      "uvicorn",
      "ymera_core.database.manager",
      "fastapi.middleware.gzip",
      "fastapi.responses"
    ],
    "websocket_manager": [
      "logging",
      "json",
      "asyncio",
      "fastapi",
      "collections",
      "typing",
      "datetime"
    ],
    "tests.utils.test_helpers": [
      "pytest",
      "json",
      "datetime",
      "typing"
    ],
    "prod_communication_agent": [
      "re",
      "json",
      "enum",
      "time",
      "zlib",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "opentelemetry",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "metrics_agent_production": [
      "json",
      "time",
      "asyncio",
      "statistics",
      "os",
      "collections",
      "typing",
      "datetime",
      "dataclasses",
      "base_agent"
    ],
    "database": [
      "logging",
      "json",
      "contextlib",
      "asyncio",
      "asyncpg",
      "typing",
      "datetime"
    ],
    "monitoring_routes": [
      "models",
      "services",
      "fastapi",
      "typing",
      "prometheus_client",
      "datetime"
    ],
    "main_project_agent_reference": [
      "fastapi.security",
      "core.quality_verifier",
      "fastapi.middleware.cors",
      "fastapi.middleware.trustedhost",
      "pydantic",
      "core.report_generator",
      "models.user",
      "asyncio",
      "core.agent_orchestrator",
      "typing",
      "datetime",
      "core.file_manager",
      "starlette.responses",
      "logging",
      "httpx",
      "contextlib",
      "core.project_integrator",
      "middleware.monitoring",
      "models.file",
      "models.submission",
      "prometheus_client",
      "models.project",
      "json",
      "core.config",
      "core.database",
      "fastapi",
      "uuid",
      "core.auth",
      "core.chat_interface",
      "middleware.security",
      "uvicorn",
      "hashlib",
      "pathlib",
      "middleware.rate_limiting",
      "aiofiles",
      "fastapi.responses"
    ],
    "static_analysis_agent": [
      "re",
      "json",
      "enum",
      "time",
      "asyncio",
      "pathlib",
      "os",
      "ast",
      "opentelemetry",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "base_agent"
    ],
    "response_aggregator_fixed": [
      "logging",
      "json",
      "aioredis",
      "enum",
      "monitoring.performance_tracker",
      "pydantic",
      "config.settings",
      "asyncio",
      "statistics",
      "fastapi",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "datetime",
      "dataclasses",
      "abc"
    ],
    "code_of_conduct_complete": [
      "logging",
      "sqlalchemy.orm",
      "enum",
      "json",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "collections",
      "typing",
      "uuid",
      "monitoring.alert_manager",
      "dataclasses",
      "sqlalchemy.ext.asyncio",
      "config",
      "database.secure_database_manager",
      "datetime"
    ],
    "monitoring.metrics": [
      "logging",
      "opentelemetry.sdk.trace",
      "opentelemetry.sdk.resources",
      "opentelemetry.trace.propagation.tracecontext",
      "time",
      "opentelemetry.sdk.trace.export",
      "elasticsearch",
      "asyncio",
      "prometheus_client.exposition",
      "opentelemetry",
      "typing",
      "prometheus_client",
      "opentelemetry.exporter.jaeger.thrift",
      "dataclasses",
      "datetime"
    ],
    "performance_monitor": [
      "json",
      "threading",
      "time",
      "collections",
      "typing",
      "datetime",
      "psutil"
    ],
    "test_client": [
      "json",
      "nats",
      "time",
      "asyncio",
      "sys",
      "nats.aio.client",
      "typing",
      "traceback"
    ],
    "knowledge_base": [
      "logging",
      "json",
      "hashlib",
      "asyncio",
      "collections",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "example_setup": [
      "sqlalchemy.orm",
      "sqlalchemy",
      "asyncio",
      "os",
      "datetime",
      "DATABASE_CORE",
      "traceback"
    ],
    "task_scheduler": [
      "core.models",
      "sqlalchemy",
      "shared.utils.cache_manager",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "real_time_monitoring_agent": [
      "logging",
      "json",
      "enum",
      "time",
      "aiohttp",
      "asyncio",
      "statistics",
      "collections",
      "opentelemetry",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "psutil",
      "base_agent"
    ],
    "configuration_manager": [
      "logging",
      "aioredis",
      "json",
      "yaml",
      "hashlib",
      "asyncio",
      "os",
      "typing",
      "datetime",
      "cryptography.fernet"
    ],
    "agent_management_api": [
      "json",
      "sqlalchemy.orm",
      "enum",
      "pydantic",
      "sqlalchemy",
      "asyncio",
      "fastapi",
      "typing",
      "uuid",
      "structlog",
      "main",
      "sqlalchemy.ext.asyncio",
      "fastapi.responses",
      "datetime"
    ],
    "learning_agent_core": [
      "re",
      "logging",
      "json",
      "enum",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "dataclasses",
      "datetime"
    ],
    "example_component_enhancement": [
      "json",
      "component_enhancement_workflow",
      "pathlib",
      "os",
      "sys",
      "traceback"
    ],
    "security_monitor": [
      "re",
      "logging",
      "models",
      "json",
      "sqlalchemy",
      "asyncio",
      "typing",
      "datetime"
    ],
    "agent": [
      "logging",
      "json",
      "models",
      "ml_pipeline",
      "knowledge_manager",
      "database",
      "asyncio",
      "uuid",
      "typing",
      "datetime"
    ],
    "main_app_production": [
      "app.API_GATEWAY_CORE_ROUTES.database",
      "fastapi.middleware.trustedhost",
      "fastapi.middleware.cors",
      "structlog",
      "time",
      "contextlib",
      "uvicorn",
      "app.API_GATEWAY_CORE_ROUTES",
      "pathlib",
      "fastapi",
      "os",
      "sys",
      "app.CORE_CONFIGURATION.config_settings",
      "fastapi.middleware.gzip",
      "psutil",
      "fastapi.responses"
    ],
    "learning_engine": [
      "asyncio",
      "anthropic",
      "concurrent.futures",
      "typing",
      "config_manager",
      "datetime",
      "intelligence_engine",
      "openai",
      "logging",
      "queue",
      "groq",
      "chromadb",
      "google.generativeai",
      "json",
      "threading",
      "pinecone",
      "uuid",
      "abc",
      "base_agent",
      "pickle",
      "enum",
      "time",
      "hashlib",
      "numpy",
      "dataclasses",
      "traceback"
    ],
    "metrics": [
      "prometheus_client",
      "structlog"
    ],
    "database_wrapper": [
      "logging",
      "sqlalchemy.orm",
      "contextlib",
      "asyncio",
      "os",
      "sqlalchemy.pool",
      "typing",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "app.CORE_CONFIGURATION.config_settings"
    ],
    "production_auth_routes": [
      "fastapi.security",
      "pydantic",
      "asyncio",
      "sqlalchemy.exc",
      "typing",
      "structlog",
      "datetime",
      "logging",
      "app.CORE_CONFIGURATION.config_settings",
      "sqlalchemy.ext.asyncio",
      "secrets",
      "jwt",
      "database",
      "fastapi",
      "os",
      "uuid",
      "app.API_GATEWAY_CORE_ROUTES.database",
      "sqlalchemy.future",
      "config.settings",
      "hashlib"
    ],
    "test_fixtures": [
      "faker",
      "database_core_integrated",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "random",
      "typing",
      "datetime",
      "argparse"
    ],
    "quick_start": [
      "core.config",
      "asyncio",
      "pathlib",
      "sys",
      "core.system",
      "traceback"
    ],
    "learning-agent-production": [
      "pydantic",
      "asyncio",
      "security.vault_manager",
      "ml.model_loader",
      "knowledge.knowledge_manager",
      "dataclasses",
      "typing",
      "security.encryption_service",
      "communication.websocket_manager",
      "datetime",
      "logging",
      "sqlalchemy",
      "contextlib",
      "utils.decorators",
      "alembic",
      "knowledge.vector_store",
      "collections",
      "opentelemetry",
      "ml.model_factory",
      "knowledge.knowledge_graph",
      "secrets",
      "json",
      "database.connection_pool",
      "fastapi",
      "os",
      "uuid",
      "ml.model_registry",
      "database.redis_manager",
      "utils.metrics",
      "time",
      "config.settings",
      "hashlib",
      "database.models",
      "functools"
    ],
    "prod_drafting_agent": [
      "re",
      "json",
      "enum",
      "time",
      "ssl",
      "asyncio",
      "difflib",
      "os",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "documentation": [
      "fastapi",
      "fastapi.openapi.utils",
      "pydantic",
      "fastapi.openapi.docs"
    ],
    "ml_pipeline": [
      "logging",
      "json",
      "pickle",
      "sklearn.feature_extraction.text",
      "asyncio",
      "os",
      "typing",
      "datetime",
      "sklearn.metrics.pairwise",
      "numpy"
    ],
    "agent_manager_enhancements": [
      "re",
      "logging",
      "enum",
      "asyncio",
      "uuid",
      "typing",
      "datetime"
    ],
    "kg_fixed": [
      "logging",
      "json",
      "enum",
      "networkx",
      "redis.asyncio",
      "hashlib",
      "asyncio",
      "collections",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "numpy"
    ],
    "config_compat": [
      "pathlib",
      "os",
      "dataclasses",
      "typing"
    ],
    "quality_verifier": [
      "logging",
      "json",
      "database",
      "asyncio",
      "typing",
      "datetime"
    ],
    "integration_preparation": [
      "pathlib",
      "os"
    ],
    "agent_system": [
      "fastapi.security",
      "fastapi.middleware.cors",
      "pydantic",
      "asyncio",
      "typing",
      "datetime",
      "logging",
      "sqlalchemy.orm",
      "sqlalchemy",
      "contextlib",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "json",
      "redis.asyncio",
      "fastapi",
      "os",
      "uuid",
      "enum",
      "jose",
      "uvicorn",
      "hashlib",
      "bcrypt",
      "fastapi.responses"
    ],
    "agent_coordinator": [
      "json",
      "enum",
      "time",
      "pydantic",
      "sqlalchemy",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "monitoring.health": [
      "logging",
      "httpx",
      "kafka",
      "time",
      "redis",
      "boto3",
      "asyncio",
      "asyncpg",
      "typing",
      "datetime",
      "dataclasses",
      "socket"
    ],
    "test_final_verification": [
      "json",
      "pathlib",
      "os",
      "sys",
      "shutil",
      "final_verification",
      "tempfile",
      "traceback"
    ],
    "test_testing_framework": [
      "json",
      "enhanced_workspace.engines.integrated.engines_enhanced",
      "enhanced_workspace.agents.integrated.agents_enhanced",
      "testing_framework",
      "asyncio",
      "pathlib",
      "sys",
      "pytest",
      "enhanced_workspace.api.integrated.api_enhanced"
    ],
    "metrics_collector_fixed": [
      "asyncio",
      "concurrent.futures",
      "typing",
      "datetime",
      "psutil",
      "logging",
      "contextlib",
      "statistics",
      "collections",
      "socket",
      "json",
      "threading",
      "redis.asyncio",
      "platform",
      "uuid",
      "enum",
      "time",
      "sys",
      "dataclasses",
      "gc"
    ],
    "file_manager": [
      "logging",
      "database",
      "hashlib",
      "asyncio",
      "pathlib",
      "aiofiles",
      "typing",
      "uuid",
      "datetime"
    ],
    "pattern_recognizer": [
      "re",
      "json",
      "models",
      "sqlalchemy",
      "collections",
      "shared.utils.cache_manager",
      "typing",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "example_integration_usage": [
      "integration_preparation"
    ],
    "admin_routes": [
      "models",
      "services",
      "fastapi",
      "typing",
      "datetime"
    ],
    "db_config": [
      "logging",
      "sqlalchemy.orm",
      "sqlalchemy",
      "contextlib",
      "sqlalchemy.ext.declarative",
      "os",
      "typing",
      "urllib.parse"
    ],
    "learning_engine_fixed": [
      "networkx",
      "pydantic",
      "asyncio",
      "structlog",
      "typing",
      "datetime",
      "logging",
      "sklearn.feature_extraction.text",
      "contextlib",
      "collections",
      "json",
      "aioredis",
      "fastapi",
      "uuid",
      "sklearn.metrics.pairwise",
      "abc",
      "enum",
      "sklearn.cluster",
      "time",
      "hashlib",
      "pathlib",
      "numpy",
      "dataclasses"
    ],
    "input_validation": [
      "re",
      "fastapi",
      "starlette.middleware.base",
      "structlog"
    ],
    "access_control": [
      "shared.security.encryption",
      "core.models",
      "sqlalchemy",
      "typing",
      "uuid",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "secrets",
      "datetime"
    ],
    "editing_agent_testing (1)": [
      "json",
      "unittest.mock",
      "editing_agent",
      "asyncio",
      "uuid",
      "typing",
      "pytest",
      "base_agent"
    ],
    "ymera_enhanced_auth": [
      "fastapi.security",
      "functools",
      "pyotp",
      "pydantic",
      "asyncio",
      "typing",
      "datetime",
      "sqlalchemy.orm",
      "sqlalchemy",
      "collections",
      "sqlalchemy.ext.asyncio",
      "secrets",
      "jwt",
      "re",
      "json",
      "io",
      "redis.asyncio",
      "fastapi",
      "enum",
      "qrcode",
      "base64",
      "sqlalchemy.ext.declarative",
      "jinja2",
      "hashlib",
      "bcrypt",
      "dataclasses"
    ],
    "enhanced_ai_routes": [
      "json",
      "ymera_services.ai.multi_llm_manager",
      "enum",
      "pydantic",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "fastapi",
      "ymera_core.database.manager",
      "ymera_core.security.auth_manager",
      "ymera_services.kibana.kibana_service",
      "typing",
      "datetime",
      "fastapi.responses"
    ],
    "metrics_agent": [
      "json",
      "time",
      "asyncio",
      "os",
      "collections",
      "typing",
      "base_agent"
    ],
    "api_gateway_init": [
      "ymera_api_gateway",
      "logging",
      "project_routes",
      "ymera_auth_routes",
      "ymera_agent_routes",
      "pathlib",
      "sys",
      "websocket_routes",
      "typing",
      "ymera_file_routes"
    ],
    "monitoring_compatibility": [
      "logging",
      "time",
      "typing",
      "datetime",
      "functools"
    ],
    "MultiLevelCache": [
      "redis"
    ],
    "data_pipeline.etl_processor": [
      "avro.schema",
      "logging",
      "json",
      "io",
      "pyarrow",
      "kafka",
      "numpy",
      "pandas",
      "google.cloud",
      "google.oauth2",
      "sqlalchemy",
      "asyncio",
      "pyarrow.parquet",
      "kafka.admin",
      "typing",
      "snowflake.connector",
      "datetime",
      "avro.io"
    ],
    "task_orchestrator": [
      "agent_discovery",
      "agent_registry",
      "enum",
      "time",
      "asyncio",
      "typing",
      "uuid",
      "structlog",
      "dataclasses"
    ],
    "report_enforcer": [
      "structlog",
      "core.models",
      "sqlalchemy",
      "typing",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "core_engine_complete": [
      "logging",
      "aioredis",
      "asyncio",
      "CORE_CONFIGURATION.config_settings",
      "typing",
      "structlog",
      "datetime",
      "dataclasses"
    ],
    "enhanced_agent_surveillance": [
      "logging",
      "json",
      "sqlalchemy",
      "models.secure_models",
      "ai.multi_modal_ai",
      "asyncio",
      "collections",
      "typing",
      "dataclasses",
      "monitoring.alert_manager",
      "sqlalchemy.ext.asyncio",
      "config",
      "database.secure_database_manager",
      "numpy",
      "datetime"
    ],
    "engine": [
      "logging",
      "enum",
      "asyncio",
      "uuid",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "comprehensive_e2e_test": [
      "database_core_integrated",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "datetime"
    ],
    "migration_manager": [
      "database_core_integrated",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "pathlib",
      "sys",
      "uuid",
      "typing",
      "sqlalchemy.ext.asyncio",
      "dataclasses",
      "argparse",
      "importlib.util",
      "datetime"
    ],
    "enhancement_agent": [
      "re",
      "json",
      "enum",
      "time",
      "asyncio",
      "difflib",
      "os",
      "collections",
      "opentelemetry",
      "typing",
      "numpy",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "protocol": [
      "json",
      "enum",
      "pydantic",
      "uuid",
      "typing",
      "datetime"
    ],
    "learning_system": [
      "logging",
      "enum",
      "external_learning",
      "knowledge_base",
      "asyncio",
      "typing",
      "pattern_recognition",
      "dataclasses",
      "continuous_learning",
      "datetime"
    ],
    "health": [
      "structlog",
      "time",
      "shared.cache",
      "shared.database.connection_pool",
      "shared.queue",
      "fastapi",
      "typing",
      "psutil",
      "shared.patterns"
    ],
    "test_expansion_readiness": [
      "enhanced_workspace.integration.api_versioning",
      "pathlib",
      "os",
      "sys",
      "expansion_readiness",
      "pytest",
      "enhanced_workspace.integration.config_template",
      "enhanced_workspace.integration.plugin_architecture"
    ],
    "learning_agent_api_integration": [
      "json",
      "pydantic",
      "uvicorn",
      "learning_agent_core",
      "asyncio",
      "fastapi",
      "uuid",
      "typing",
      "datetime",
      "learning_agent_database",
      "fastapi.responses"
    ],
    "generate_component_inventory": [
      "re",
      "json",
      "pathlib",
      "os",
      "collections",
      "ast",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "drafting_agent": [
      "textstat",
      "spacy",
      "asyncio",
      "typing",
      "datetime",
      "difflib",
      "opentelemetry",
      "re",
      "nltk",
      "json",
      "os",
      "nltk.corpus",
      "uuid",
      "base_agent",
      "enum",
      "time",
      "nltk.tokenize",
      "ssl",
      "dataclasses",
      "traceback"
    ],
    "session_management": [
      "json",
      "pydantic",
      "redis",
      "hashlib",
      "fastapi",
      "typing",
      "datetime",
      "secrets",
      "jwt"
    ],
    "config_manager": [
      "json",
      "asyncio",
      "os",
      "typing",
      "base_agent"
    ],
    "editing_agent": [
      "re",
      "nltk",
      "json",
      "textstat",
      "enum",
      "language_tool_python",
      "time",
      "spacy",
      "asyncio",
      "difflib",
      "os",
      "opentelemetry",
      "uuid",
      "typing",
      "nltk.sentiment",
      "datetime",
      "dataclasses",
      "base_agent"
    ],
    "setup": [
      "setuptools",
      "pathlib"
    ],
    "optimizing_engine": [
      "asyncio",
      "typing",
      "datetime",
      "psutil",
      "statistics",
      "collections",
      "opentelemetry",
      "json",
      "redis.asyncio",
      "os",
      "random",
      "uuid",
      "asyncpg",
      "base_agent",
      "enum",
      "time",
      "numpy",
      "dataclasses",
      "gc"
    ],
    "database_monitor": [
      "json",
      "database_core_integrated",
      "time",
      "sqlalchemy",
      "asyncio",
      "pathlib",
      "typing",
      "datetime",
      "dataclasses",
      "argparse",
      "psutil"
    ],
    "example_api": [
      "fastapi.middleware.cors",
      "pydantic",
      "sqlalchemy",
      "uvicorn",
      "hashlib",
      "fastapi",
      "os",
      "typing",
      "sqlalchemy.ext.asyncio",
      "DATABASE_CORE",
      "datetime"
    ],
    "enhancement_agent_v3": [
      "re",
      "json",
      "enum",
      "time",
      "enhanced_base_agent",
      "math",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "sys",
      "uuid",
      "typing",
      "datetime",
      "dataclasses",
      "traceback"
    ],
    "optimization_engine": [
      "asyncio",
      "typing",
      "datetime",
      "psutil",
      "statistics",
      "collections",
      "opentelemetry",
      "json",
      "redis.asyncio",
      "os",
      "random",
      "uuid",
      "asyncpg",
      "base_agent",
      "enum",
      "time",
      "numpy",
      "dataclasses",
      "gc"
    ],
    "middleware": [
      "starlette.middleware.base",
      "time",
      "fastapi",
      "typing",
      "shared.config.settings",
      "structlog",
      "fastapi.responses"
    ],
    "ProductionConfig (2)": [
      "cryptography.hazmat.primitives"
    ],
    "test_api": [
      "pytest_asyncio",
      "httpx",
      "unittest.mock",
      "fastapi.testclient",
      "os",
      "main",
      "pytest",
      "datetime"
    ],
    "generator_engine_prod": [
      "re",
      "json",
      "logging",
      "enum",
      "time",
      "jinja2",
      "hashlib",
      "asyncio",
      "pathlib",
      "typing",
      "datetime",
      "dataclasses",
      "traceback"
    ],
    "agent_routes": [
      "json",
      "models",
      "services",
      "fastapi",
      "uuid",
      "typing",
      "datetime"
    ],
    "enhanced_base_agent (1)": [
      "logging.handlers",
      "nats",
      "functools",
      "asyncio",
      "nats.aio.client",
      "typing",
      "datetime",
      "logging",
      "asyncpg.exceptions",
      "contextlib",
      "collections",
      "json",
      "redis.asyncio",
      "random",
      "os",
      "uuid",
      "asyncpg",
      "nats.errors",
      "enum",
      "time",
      "signal",
      "sys",
      "dataclasses",
      "traceback"
    ],
    "enhanced_llm_agent": [
      "qdrant_client",
      "json",
      "enum",
      "time",
      "enhanced_base_agent",
      "asyncio",
      "anthropic",
      "os",
      "collections",
      "sys",
      "typing",
      "uuid",
      "qdrant_client.http.models",
      "tiktoken",
      "dataclasses",
      "abc",
      "openai",
      "sentence_transformers"
    ],
    "behavior_monitor": [
      "structlog",
      "shared.utils.cache_manager",
      "typing",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "lifecycle_manager": [
      "logging",
      "structlog",
      "core.models",
      "sqlalchemy",
      "uuid",
      "typing",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "infrastructure.optimization__init__": [
      "logging",
      "threading",
      "enum",
      "time",
      "asyncio",
      "dataclasses",
      "typing",
      "numpy",
      "functools",
      "gc"
    ],
    "project_integrator": [
      "quality_verifier",
      "logging",
      "json",
      "database",
      "asyncio",
      "typing",
      "datetime"
    ],
    "learning_agent_api": [
      "pydantic",
      "fastapi",
      "typing",
      "structlog",
      "datetime"
    ],
    "enhanced_learning_agent": [
      "logging",
      "json",
      "enum",
      "websockets",
      "httpx",
      "sqlalchemy",
      "hashlib",
      "asyncio",
      "learning_agent_core",
      "collections",
      "typing",
      "uuid",
      "structlog",
      "datetime",
      "dataclasses"
    ],
    "manager_client": [
      "logging",
      "core.config",
      "httpx",
      "typing",
      "datetime"
    ],
    "enhanced_agent_orchestrator": [
      "sklearn.preprocessing",
      "logging",
      "json",
      "enum",
      "sklearn.cluster",
      "numpy",
      "asyncio",
      "sklearn.ensemble",
      "os",
      "collections",
      "dataclasses",
      "typing",
      "datetime",
      "config",
      "joblib"
    ],
    "agent_registry": [
      "enum",
      "structlog",
      "time",
      "asyncio",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "infrastructure.orchestrator": [
      "logging",
      "json",
      "monitoring",
      "time",
      "distributed",
      "security",
      "asyncio",
      "typing",
      "optimization",
      "dataclasses"
    ],
    "agent_client": [
      "logging",
      "json",
      "enum",
      "platform",
      "aiohttp",
      "ssl",
      "asyncio",
      "os",
      "uuid",
      "typing",
      "datetime",
      "socket",
      "psutil"
    ],
    "auth": [
      "fastapi.security",
      "core.config",
      "jwt",
      "fastapi",
      "uuid",
      "typing",
      "datetime",
      "passlib.context"
    ],
    "main": [
      "fastapi.security",
      "middleware.rate_limiter",
      "fastapi.middleware.cors",
      "pydantic",
      "asyncio",
      "api.main",
      "typing",
      "datetime",
      "logging",
      "sqlalchemy",
      "contextlib",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "core.manager_client",
      "json",
      "core.config",
      "redis.asyncio",
      "core.database",
      "fastapi",
      "os",
      "uuid",
      "core.auth",
      "enum",
      "core.sqlalchemy_models",
      "uvicorn",
      "sys",
      "fastapi.responses"
    ],
    "intelligence_engine_enhanced": [
      "asyncio",
      "concurrent.futures",
      "typing",
      "sqlalchemy.dialects",
      "logging",
      "sqlalchemy",
      "collections",
      "opentelemetry",
      "json",
      "threading",
      "random",
      "uuid",
      "asyncpg",
      "weakref",
      "base_agent",
      "enum",
      "pickle",
      "time",
      "hashlib",
      "numpy",
      "dataclasses"
    ],
    "enhanced_analysis_routes": [
      "fastapi.security",
      "ymera_core.cache.redis_cache",
      "ymera_agents.orchestrator",
      "pydantic",
      "ymera_core.logging.structured_logger",
      "asyncio",
      "typing",
      "datetime",
      "ymera_agents.communication.message_bus",
      "ymera_services.vector_db.pinecone_manager",
      "ymera_agents.core.analysis_agent",
      "ymera_core.exceptions",
      "ymera_core.security.auth_manager",
      "ymera_core.monitoring.metrics",
      "re",
      "json",
      "ymera_services.ai.multi_llm_manager",
      "fastapi",
      "ymera_services.code_analysis.quality_analyzer",
      "uuid",
      "enum",
      "ymera_services.github.repository_analyzer",
      "time",
      "ymera_agents.learning.learning_engine",
      "ymera_core.database.manager",
      "functools"
    ],
    "expansion_readiness": [
      "os",
      "collections"
    ],
    "agent_manager_integrated": [
      "fastapi.security",
      "fastapi.middleware.cors",
      "functools",
      "hmac",
      "asyncio",
      "monitoring.alert_manager",
      "typing",
      "datetime",
      "logging",
      "sqlalchemy.orm",
      "performance.scaling_manager",
      "security.zero_trust_complete",
      "performance.caching_manager",
      "sqlalchemy",
      "contextlib",
      "security.advanced_authentication",
      "fastapi.middleware.httpsredirect",
      "opentelemetry",
      "prometheus_client",
      "sqlalchemy.ext.asyncio",
      "opentelemetry.exporter.jaeger.thrift",
      "json",
      "opentelemetry.sdk.trace",
      "redis.asyncio",
      "opentelemetry.sdk.trace.export",
      "fastapi",
      "os",
      "uuid",
      "passlib.context",
      "enum",
      "jose",
      "opentelemetry.sdk.resources",
      "time",
      "opentelemetry.semconv.resource",
      "monitoring.telemetry_manager",
      "monitoring.predictive_analytics",
      "security.compliance_manager",
      "performance.queue_manager",
      "hashlib",
      "dataclasses",
      "fastapi.responses"
    ],
    "resource_allocator": [
      "agent_registry",
      "enum",
      "time",
      "asyncio",
      "typing",
      "structlog",
      "dataclasses"
    ],
    "tests.unit.test_security": [
      "src.models.user",
      "unittest.mock",
      "fastapi",
      "src.core.security",
      "pytest"
    ],
    "gateway_routing_fixed": [
      "fastapi.staticfiles",
      "fastapi.security",
      "fastapi.middleware.cors",
      "pydantic",
      "asyncio",
      "dataclasses",
      "structlog",
      "typing",
      "datetime",
      "fastapi.websockets",
      "contextlib",
      "collections",
      "re",
      "json",
      "fastapi",
      "random",
      "uuid",
      "weakref",
      "enum",
      "time",
      "aiohttp",
      "hashlib",
      "pathlib",
      "aiofiles",
      "fastapi.middleware.gzip",
      "traceback",
      "fastapi.responses"
    ],
    "health_check": [
      "time",
      "shared.database.connection_pool",
      "redis",
      "asyncio",
      "os",
      "sys",
      "typing",
      "psycopg2",
      "requests",
      "structlog",
      "datetime",
      "socket"
    ],
    "graceful_shutdown": [
      "asyncio",
      "signal",
      "typing",
      "structlog"
    ],
    "prod_config_manager": [
      "json",
      "time",
      "hashlib",
      "asyncio",
      "os",
      "collections",
      "opentelemetry",
      "typing",
      "datetime",
      "dataclasses",
      "traceback",
      "base_agent"
    ],
    "parser_engine_prod": [
      "tree_sitter_languages",
      "tokenize",
      "logging",
      "re",
      "enum",
      "esprima",
      "io",
      "time",
      "hashlib",
      "asyncio",
      "collections",
      "ast",
      "concurrent.futures",
      "typing",
      "numpy",
      "dataclasses",
      "traceback"
    ],
    "run_comprehensive_e2e_tests": [
      "json",
      "core.sqlalchemy_models",
      "database_core_integrated",
      "time",
      "asyncio",
      "pathlib",
      "os",
      "sys",
      "collections",
      "main",
      "typing",
      "datetime",
      "traceback",
      "base_agent"
    ],
    "integrations.manager": [
      "logging",
      "celery",
      "azure.mgmt.resource",
      "slack_sdk",
      "httpx",
      "azure.identity",
      "boto3",
      "json",
      "atlassian",
      "google.cloud",
      "github",
      "asyncio",
      "typing",
      "simple_salesforce",
      "dataclasses",
      "datetime",
      "slack_sdk.errors"
    ],
    "ymera__init__": [
      "infrastructure",
      "logging",
      "json",
      "enum",
      "time",
      "pandas",
      "asyncio",
      "explainability",
      "automl",
      "typing",
      "analytics",
      "dataclasses",
      "multimodal"
    ],
    "analytics": [
      "core.models",
      "sqlalchemy",
      "shared.utils.cache_manager",
      "typing",
      "structlog",
      "sqlalchemy.ext.asyncio",
      "datetime"
    ],
    "agent_orchestrator": [
      "logging",
      "json",
      "httpx",
      "database",
      "asyncio",
      "typing",
      "datetime"
    ],
    "analytics.engine": [
      "sklearn.preprocessing",
      "logging",
      "json",
      "pickle",
      "sklearn.cluster",
      "warnings",
      "pandas",
      "asyncio",
      "sklearn.ensemble",
      "scipy",
      "typing",
      "datetime",
      "sklearn.linear_model",
      "numpy",
      "sklearn.metrics"
    ],
    "notification_manager": [
      "logging",
      "aioredis",
      "json",
      "pydantic",
      "asyncio",
      "fastapi",
      "uuid",
      "typing",
      "datetime"
    ],
    "core_engine_init": [
      "logging",
      "aioredis",
      "structlog",
      "utils",
      "asyncio",
      "typing",
      "core_engine"
    ],
    "test_e2e_comprehensive": [
      "json",
      "time",
      "unified_system",
      "asyncio",
      "pathlib",
      "sys",
      "typing",
      "datetime",
      "traceback",
      "base_agent",
      "document_generation_engine"
    ],
    "connection_pool": [
      "sqlalchemy.orm",
      "structlog",
      "contextlib",
      "asyncio",
      "sqlalchemy.pool",
      "shared.config.settings",
      "typing",
      "sqlalchemy.ext.asyncio"
    ],
    "data_flow_validator": [
      "re",
      "logging",
      "models",
      "enum",
      "json",
      "base64",
      "hashlib",
      "asyncio",
      "typing",
      "datetime",
      "dataclasses"
    ],
    "init_database": [
      "os",
      "sys",
      "psycopg2",
      "time"
    ],
    "validate_deployment": [
      "pathlib",
      "os",
      "sys",
      "subprocess"
    ],
    "plugin_architecture": [
      "collections"
    ],
    "modules_enhanced": [
      "logging",
      "typing"
    ],
    "agents_enhanced": [
      "asyncio",
      "datetime",
      "logging",
      "typing"
    ],
    "api_enhanced": [
      "asyncio",
      "datetime",
      "logging",
      "typing"
    ],
    "database_enhanced": [
      "datetime",
      "logging",
      "typing"
    ],
    "systems_enhanced": [
      "datetime",
      "logging",
      "typing"
    ],
    "engines_enhanced": [
      "logging",
      "time",
      "asyncio",
      "typing",
      "datetime"
    ]
  },
  "orphaned_files": [
    "prod_agent_manager.py",
    "ai_agents_production.py",
    "production_custom_engines_full.py",
    "file_handler.py",
    "production_intelligence_engine.py",
    "editing_agent_v2 (1).py",
    "backup_manager.py",
    "production_specialized_engines.py",
    "tests.unit.test_models.py",
    "prod_monitoring_agent.py",
    "task_queue.py",
    "ymera_api_system.py",
    "llm_agent.py",
    "static_analysis_prod.py",
    "BaseEvent.py",
    "quickstart.py",
    "chat_handler.py",
    "tests.performance.test_load.py",
    "chatting_files_agent_api_system.py",
    "examination_agent.py",
    "batch_processor.py",
    "learning-agent-security.py",
    "prod_analyzer_engine.py",
    "connection_manager.py",
    "001_initial_schema.py",
    "agent_manager_integrated (1).py",
    "learning_agent_helpers.py",
    "env.py",
    "agents_management_api.py",
    "core_engine_utils.py",
    "production_base_agent.py",
    "api.gateway.py",
    "workflow_engine.py",
    "performance_engine.py",
    "pytest.ini.py",
    "base_agent 2.py",
    "security_agent.py",
    "workflow_manager.py",
    "production_monitoring_agent.py",
    "ServiceRegistry.py",
    "insight_generator.py",
    "live_chatting_manager.py",
    "prod_performance_engine.py",
    "router.py",
    "prod_optimizing_engine.py",
    "example_agent.py",
    "agent_manager_production.py",
    "PerformanceMonitor.py",
    "alembic_setup.py",
    "tests.unit.test_services.py",
    "task_routes.py",
    "request_tracking.py",
    "file_routes_complete.py",
    "tests.e2e.test_user_journeys.py",
    "api_extensions.py",
    "performance_engine_agent.py",
    "ZeroTrustConfig.py",
    "enhanced_agent_lifecycle.py",
    "verify_deployment.py",
    "coding_agent.py",
    "fastapi_integration.py",
    "agent_lifecycle_mgr.py",
    "learning_agent_models.py",
    "orchestrator_agent.py",
    "HSMCrypto.py",
    "audit_manager.py",
    "file_validator_util.py",
    "knowledge_store.py",
    "extensions.py",
    "enterprise_agent_manager.py",
    "tests.conftest.py",
    "scaling.auto_scaler.py",
    "mandatory_reporting.py",
    "project_agent_main.py",
    "tests.security.test_security.py",
    "recommendation_engine.py",
    "external_integration.py",
    "app_agent_mgmt_endpoints.py",
    "disaster_recovery__init__.py",
    "audit_system.py",
    "tests.integration.test_api_endpoints.py",
    "infrastructure.distributed__init__.py",
    "ProductionConfig.py",
    "learning_agent_main.py",
    "automl__init__.py",
    "static_analysis_examples.py",
    "metrics_collector.py",
    "code_editor_agent_api.py",
    "agent_manager_integration.py",
    "infrastructure.security__init__.py",
    "communication_agent.py",
    "validation_agent_complete.py",
    "circuit_breaker.py",
    "validation_agent.py",
    "task_worker.py",
    "enhanced_chat_routes.py",
    "enhanced_api_endpoints.py",
    "production_config.py",
    "complete_file_routes.py",
    "infrastructure__init__.py",
    "monitoring.alerting.py",
    "knowledge_flow_manager.py",
    "analytics__init__.py",
    "demo_expansion_framework.py",
    "security_scanner.py",
    "production_main_app.py",
    "tests.utils.test_helpers.py",
    "prod_communication_agent.py",
    "metrics_agent_production.py",
    "monitoring_routes.py",
    ".github.workflows.load-test.py",
    "main_project_agent_reference.py",
    "static_analysis_agent.py",
    "response_aggregator_fixed.py",
    "code_of_conduct_complete.py",
    "performance_monitor.py",
    "example_setup.py",
    "task_scheduler.py",
    "real_time_monitoring_agent.py",
    "configuration_manager.py",
    "agent_management_api.py",
    "example_component_enhancement.py",
    "security_monitor.py",
    "main_app_production.py",
    "database_wrapper.py",
    "production_auth_routes.py",
    "quick_start.py",
    "learning-agent-production.py",
    "prod_drafting_agent.py",
    "documentation.py",
    "agent_manager_enhancements.py",
    "kg_fixed.py",
    "config_compat.py",
    "agent_system.py",
    "agent_coordinator.py",
    "monitoring.health.py",
    "metrics_collector_fixed.py",
    "pattern_recognizer.py",
    "example_integration_usage.py",
    "admin_routes.py",
    "SIEMIntegration.py",
    "db_config.py",
    "learning_engine_fixed.py",
    "input_validation.py",
    "access_control.py",
    "editing_agent_testing (1).py",
    "ymera_enhanced_auth.py",
    "enhanced_ai_routes.py",
    "metrics_agent.py",
    "api_gateway_init.py",
    "monitoring_compatibility.py",
    "MultiLevelCache.py",
    "data_pipeline.etl_processor.py",
    "chat_service.py",
    "report_enforcer.py",
    "core_engine_complete.py",
    "enhanced_agent_surveillance.py",
    "enhancement_agent.py",
    "protocol.py",
    "learning_system.py",
    "health.py",
    "learning_agent_api_integration.py",
    "generate_component_inventory.py",
    "drafting_agent.py",
    "session_management.py",
    "optimizing_engine.py",
    "database_monitor.py",
    "example_api.py",
    "enhancement_agent_v3.py",
    "optimization_engine.py",
    "ProductionConfig (2).py",
    "requirements_and_env.py",
    "generator_engine_prod.py",
    "explainability__init__.py",
    "enhanced_base_agent (1).py",
    "enhanced_llm_agent.py",
    "behavior_monitor.py",
    "infrastructure.optimization__init__.py",
    "learning_agent_api.py",
    "enhanced_agent_orchestrator.py",
    "infrastructure.orchestrator.py",
    "intelligence_engine_enhanced.py",
    "enhanced_analysis_routes.py",
    "agent_manager_integrated.py",
    "resource_allocator.py",
    "tests.unit.test_security.py",
    "gateway_routing_fixed.py",
    "health_check.py",
    "graceful_shutdown.py",
    "prod_config_manager.py",
    "parser_engine_prod.py",
    "run_comprehensive_e2e_tests.py",
    "integrations.manager.py",
    "ymera__init__.py",
    "analytics.engine.py",
    "notification_manager.py",
    "core_engine_init.py",
    "data_flow_validator.py",
    "enhanced_workspace/deployment/init_database.py",
    "enhanced_workspace/deployment/validate_deployment.py",
    "enhanced_workspace/deployment/health_check.py",
    "enhanced_workspace/modules/integrated/modules_enhanced.py",
    "enhanced_workspace/database/integrated/database_enhanced.py",
    "enhanced_workspace/systems/integrated/systems_enhanced.py",
    ".github/.github/.github/ISSUE_TEMPLATE/.github/.github/mcp/ymera_templates.py"
  ],
  "missing_tests": [
    "prod_agent_manager.py",
    "integration.py",
    "ai_agents_production.py",
    "production_custom_engines_full.py",
    "models.py",
    "file_handler.py",
    "read_replica_config.py",
    "production_intelligence_engine.py",
    "editing_agent_v2 (1).py",
    "backup_manager.py",
    "production_specialized_engines.py",
    "tests.unit.test_models.py",
    "report_generator.py",
    "monitoring.py",
    "test_database.py",
    "prod_monitoring_agent.py",
    "ymera_api_system.py",
    "llm_agent.py",
    "static_analysis_prod.py",
    "quickstart.py",
    "query_optimization.py",
    "chat_handler.py",
    "tests.performance.test_load.py",
    "chatting_files_agent_api_system.py",
    "examination_agent.py",
    "batch_processor.py",
    "learning-agent-security.py",
    "prod_analyzer_engine.py",
    "logger.py",
    "connection_manager.py",
    "001_initial_schema.py",
    "settings.py",
    "agent_manager_integrated (1).py",
    "log_manager.py",
    "learning_agent_helpers.py",
    "env.py",
    "agents_management_api.py",
    "core_engine_utils.py",
    "production_base_agent.py",
    "db_monitoring.py",
    "workflow_engine.py",
    "__init__.py",
    "performance_engine.py",
    "learning_agent_database.py",
    "base_agent 2.py",
    "security_agent.py",
    "enhanced_base_agent.py",
    "user.py",
    "workflow_manager.py",
    "production_monitoring_agent.py",
    "ServiceRegistry.py",
    "insight_generator.py",
    "live_chatting_manager.py",
    "conftest.py",
    "prod_performance_engine.py",
    "router.py",
    "prod_optimizing_engine.py",
    "example_agent.py",
    "agent_lifecycle_manager.py",
    "agent_manager_production.py",
    "PerformanceMonitor.py",
    "alembic_setup.py",
    "tests.unit.test_services.py",
    "task_routes.py",
    "advanced_features.py",
    "test_component_enhancement_workflow.py",
    "unified_system.py",
    "test_project_agent.py",
    "file_routes_complete.py",
    "tests.e2e.test_user_journeys.py",
    "agent_discovery.py",
    "cache_manager.py",
    "api_extensions.py",
    "sqlalchemy_models.py",
    "performance_engine_agent.py",
    "ZeroTrustConfig.py",
    "enhanced_agent_lifecycle.py",
    "knowledge_graph.py",
    "coding_agent.py",
    "file.py",
    "fastapi_integration.py",
    "agent_lifecycle_mgr.py",
    "orchestrator.py",
    "rate_limiter.py",
    "agent_surveillance.py",
    "backup_recovery.py",
    "learning_agent_models.py",
    "orchestrator_agent.py",
    "audit_manager.py",
    "test_learning_agent.py",
    "file_validator_util.py",
    "knowledge_store.py",
    "extensions.py",
    "enterprise_agent_manager.py",
    "tests.conftest.py",
    "scaling.auto_scaler.py",
    "mandatory_reporting.py",
    "project_agent_main.py",
    "intelligence_engine.py",
    "chat_interface.py",
    "agent_communicator.py",
    "system.py",
    "knowledge_manager.py",
    "encryption.py",
    "routes.py",
    "tests.security.test_security.py",
    "message_broker.py",
    "recommendation_engine.py",
    "external_integration.py",
    "app_agent_mgmt_endpoints.py",
    "api_gateway.py",
    "audit_system.py",
    "tests.integration.test_api_endpoints.py",
    "infrastructure.distributed__init__.py",
    "test_suite (1).py",
    "ProductionConfig.py",
    "learning_agent_main.py",
    "project.py",
    "quickstart_script.py",
    "automl__init__.py",
    "static_analysis_examples.py",
    "metrics_collector.py",
    "agent_manager_integration.py",
    "continuous_learning.py",
    "infrastructure.security__init__.py",
    "communication_agent.py",
    "validation_agent_complete.py",
    "base_agent.py",
    "config.py",
    "test_deployment_preparation.py",
    "test_comprehensive.py",
    "validation_agent.py",
    "task_worker.py",
    "complete_deployment_script.py",
    "enhanced_chat_routes.py",
    "pattern_recognition.py",
    "enhanced_api_endpoints.py",
    "production_config.py",
    "complete_file_routes.py",
    "external_learning.py",
    "document_generation_engine.py",
    "monitoring.alerting.py",
    "database_core_integrated.py",
    "knowledge_flow_manager.py",
    "submission.py",
    "analytics__init__.py",
    "demo_expansion_framework.py",
    "security_scanner.py",
    "websocket_manager.py",
    "prod_communication_agent.py",
    "metrics_agent_production.py",
    "monitoring_routes.py",
    ".github.workflows.load-test.py",
    "main_project_agent_reference.py",
    "static_analysis_agent.py",
    "code_of_conduct_complete.py",
    "monitoring.metrics.py",
    "performance_monitor.py",
    "test_client.py",
    "example_setup.py",
    "task_scheduler.py",
    "real_time_monitoring_agent.py",
    "configuration_manager.py",
    "agent_management_api.py",
    "learning_agent_core.py",
    "example_component_enhancement.py",
    "security_monitor.py",
    "agent.py",
    "main_app_production.py",
    "learning_engine.py",
    "metrics.py",
    "database_wrapper.py",
    "production_auth_routes.py",
    "test_fixtures.py",
    "quick_start.py",
    "learning-agent-production.py",
    "prod_drafting_agent.py",
    "documentation.py",
    "ml_pipeline.py",
    "agent_manager_enhancements.py",
    "config_compat.py",
    "quality_verifier.py",
    "agent_system.py",
    "agent_coordinator.py",
    "monitoring.health.py",
    "metrics_collector_fixed.py",
    "file_manager.py",
    "pattern_recognizer.py",
    "example_integration_usage.py",
    "admin_routes.py",
    "db_config.py",
    "learning_engine_fixed.py",
    "access_control.py",
    "editing_agent_testing (1).py",
    "ymera_enhanced_auth.py",
    "enhanced_ai_routes.py",
    "metrics_agent.py",
    "api_gateway_init.py",
    "monitoring_compatibility.py",
    "data_pipeline.etl_processor.py",
    "task_orchestrator.py",
    "report_enforcer.py",
    "core_engine_complete.py",
    "enhanced_agent_surveillance.py",
    "engine.py",
    "comprehensive_e2e_test.py",
    "migration_manager.py",
    "enhancement_agent.py",
    "protocol.py",
    "learning_system.py",
    "health.py",
    "test_expansion_readiness.py",
    "learning_agent_api_integration.py",
    "drafting_agent.py",
    "session_management.py",
    "config_manager.py",
    "editing_agent.py",
    "setup.py",
    "optimizing_engine.py",
    "database_monitor.py",
    "example_api.py",
    "enhancement_agent_v3.py",
    "optimization_engine.py",
    "middleware.py",
    "ProductionConfig (2).py",
    "test_api.py",
    "requirements_and_env.py",
    "generator_engine_prod.py",
    "explainability__init__.py",
    "agent_routes.py",
    "enhanced_base_agent (1).py",
    "enhanced_llm_agent.py",
    "behavior_monitor.py",
    "lifecycle_manager.py",
    "infrastructure.optimization__init__.py",
    "project_integrator.py",
    "learning_agent_api.py",
    "enhanced_learning_agent.py",
    "manager_client.py",
    "enhanced_agent_orchestrator.py",
    "agent_registry.py",
    "infrastructure.orchestrator.py",
    "agent_client.py",
    "auth.py",
    "main.py",
    "intelligence_engine_enhanced.py",
    "enhanced_analysis_routes.py",
    "agent_manager_integrated.py",
    "resource_allocator.py",
    "tests.unit.test_security.py",
    "gateway_routing_fixed.py",
    "health_check.py",
    "prod_config_manager.py",
    "parser_engine_prod.py",
    "run_comprehensive_e2e_tests.py",
    "integrations.manager.py",
    "ymera__init__.py",
    "analytics.py",
    "agent_orchestrator.py",
    "analytics.engine.py",
    "notification_manager.py",
    "core_engine_init.py",
    "test_e2e_comprehensive.py",
    "connection_pool.py",
    "data_flow_validator.py",
    "middleware/rate_limiter.py",
    "core/__init__.py",
    "core/sqlalchemy_models.py",
    "core/config.py",
    "core/manager_client.py",
    "core/auth.py",
    "enhanced_workspace/deployment/init_database.py",
    "enhanced_workspace/deployment/validate_deployment.py",
    "enhanced_workspace/integration/plugin_architecture.py",
    "enhanced_workspace/integration/config_template.py",
    "enhanced_workspace/integration/api_versioning.py",
    "enhanced_workspace/agents/integrated/agents_enhanced.py",
    "enhanced_workspace/database/integrated/database_enhanced.py",
    "enhanced_workspace/engines/integrated/engines_enhanced.py",
    ".github/.github/.github/ISSUE_TEMPLATE/.github/.github/mcp/ymera_templates.py"
  ]
}