# .github/workflows/quality-gates.yml
name: Quality Gates

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_ymera
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-cov locust safety bandit
    
    - name: Run security scan (SAST)
      run: |
        # Bandit for Python security scanning
        bandit -r src -ll
        
        # Safety for dependency vulnerability scanning
        safety check --full-report
        
        # Check for secrets in code
        git secrets --scan
    
    - name: Run linting
      run: |
        # Code formatting
        black --check .
        
        # Code quality
        flake8 .
        
        # Import sorting
        isort --check-only .
        
        # Type checking (if using type hints)
        # mypy src
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v
    
    - name: Check coverage threshold
      run: |
        python -m coverage report --fail-under=80
    
    - name: Run performance tests
      run: |
        # Start the application in background
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Run locust performance test
        locust -f tests/performance/test_load.py --headless -u 10 -r 5 -t 1m --host=http://localhost:8000
        
        # Stop the application
        kill $APP_PID
    
    - name: Run accessibility audit
      if: always()
      run: |
        # This would run WCAG compliance tests if we had a frontend
        echo "Accessibility audit would run here for frontend components"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-reports/
          coverage.xml
          coverage/
    
    - name: Check quality gate
      run: |
        # This would check all quality metrics and fail if any don't meet standards
        echo "Checking quality gates..."
        
        # Example checks (would be more comprehensive)
        if [ "$UNIT_TEST_PASS" != "true" ]; then
          echo "Unit tests failed"
          exit 1
        fi
        
        if [ "$COVERAGE" -lt 80 ]; then
          echo "Coverage below 80%"
          exit 1
        fi
        
        if [ "$SECURITY_SCAN_FAILED" == "true" ]; then
          echo "Security scan failed"
          exit 1
        fi
        
        echo "All quality gates passed!"