# .github/workflows/ci-cd.yaml
name: Ymera CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Continuous Integration
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run security scan
      run: |
        pip install safety
        safety check --full-report
    
    - name: Run linting
      run: |
        pip install black flake8 isort
        black --check .
        flake8 .
        isort --check-only .
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
    
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run SAST scan
      uses: anchore/scan-action@v3
      with:
        path: "."
        fail-build: true
    
    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ymera-api'
        path: '.'
        format: 'HTML'
        failOnCVSS: 7
    
    - name: Run container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
  # Continuous Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Kubernetes
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_STAGING }}
        command: |
          set -x
          kubectl set image deployment/ymera-api ymera-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n ymera-staging
          kubectl rollout status deployment/ymera-api -n ymera-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Run smoke tests against staging environment
        curl -f https://staging.api.ymera.example.com/health
        curl -f https://staging.api.ymera.example.com/health/ready
    
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Promote image to production
      run: |
        # Tag staging image as production
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
    
    - name: Deploy to production with canary
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_PRODUCTION }}
        command: |
          # Deploy canary (10% of traffic)
          kubectl set image deployment/ymera-api-canary ymera-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production -n ymera-production
          kubectl rollout status deployment/ymera-api-canary -n ymera-production --timeout=300s
          
          # Wait for canary validation
          sleep 300
          
          # Deploy to full production
          kubectl set image deployment/ymera-api ymera-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production -n ymera-production
          kubectl rollout status deployment/ymera-api -n ymera-production --timeout=300s
          
          # Clean up canary
          kubectl scale deployment/ymera-api-canary --replicas=0 -n ymera-production
    
    - name: Run production validation tests
      run: |
        # Run comprehensive tests against production
        curl -f https://api.ymera.example.com/health
        curl -f https://api.ymera.example.com/health/ready
        # Add more validation checks

  # Monitoring and rollback
  monitor-deployment:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: Check deployment health
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_PRODUCTION }}
        command: |
          # Monitor for 5 minutes
          for i in {1..30}; do
            if kubectl get deployment/ymera-api -n ymera-production -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' | grep -q "True"; then
              echo "Deployment healthy"
              exit 0
            fi
            sleep 10
          done
          echo "Deployment failed health check"
          exit 1
    
    - name: Rollback if failed
      if: failure()
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_PRODUCTION }}
        command: |
          kubectl rollout undo deployment/ymera-api -n ymera-production
          echo "Rolled back to previous version"