{
  "timestamp": "2025-10-20T11:02:36.136428",
  "summary": {
    "total": 286,
    "working": 46,
    "fixable": 222,
    "broken": 1,
    "syntax_errors": 17
  },
  "components": [
    {
      "path": "editing_agent_v2 (1).py",
      "name": "editing_agent_v2 (1)",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nltk",
          "fix_suggestion": "pip install nltk"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: language_tool_python",
          "fix_suggestion": "pip install language_tool_python"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: textstat",
          "fix_suggestion": "pip install textstat"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: spacy",
          "fix_suggestion": "pip install spacy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "EditType",
        "ContentType",
        "EditingMode",
        "EditSuggestion",
        "EditingSession",
        "ContentAnalysis",
        "EditingAgent"
      ],
      "functions": [
        "main",
        "to_dict",
        "to_dict",
        "stop"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "agent_manager_integrated (1).py",
      "name": "agent_manager_integrated (1)",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 267: expected 'except' or 'finally' block",
          "fix_suggestion": "Fix syntax error in file at line 267"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "agents_management_api.py",
      "name": "agents_management_api",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 787: unexpected indent",
          "fix_suggestion": "Fix syntax error in file at line 787"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "agent_management_api.py",
      "name": "agent_management_api",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: main",
          "fix_suggestion": "pip install main"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "AgentType",
        "AgentCapability",
        "AgentCreateRequest",
        "AgentUpdateRequest",
        "AgentResponse",
        "AgentListResponse",
        "AgentPerformanceMetrics",
        "TaskAssignmentRequest",
        "AgentManagementService"
      ],
      "functions": [
        "get_agent_service",
        "create_agent",
        "get_agent",
        "list_agents",
        "update_agent",
        "delete_agent",
        "get_agent_performance",
        "assign_task_to_agent",
        "start_agent",
        "stop_agent"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "validation_agent_complete.py",
      "name": "validation_agent_complete",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "ValidationLevel",
        "Severity",
        "ValidationRule",
        "ValidationIssue",
        "ValidationReport",
        "ValidationAgent"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "main"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent.py",
      "name": "agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: knowledge_manager",
          "fix_suggestion": "pip install knowledge_manager"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ml_pipeline",
          "fix_suggestion": "pip install ml_pipeline"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "YmeraAgent"
      ],
      "functions": [
        "initialize",
        "process_message",
        "provide_feedback",
        "get_user_conversations",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "run_agent_validation.py",
      "name": "run_agent_validation",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "run_command",
        "main"
      ],
      "activation_blockers": []
    },
    {
      "path": "prod_communication_agent.py",
      "name": "prod_communication_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MessageType",
        "MessagePriority",
        "DeliveryMode",
        "MessageStatus",
        "Message",
        "MessageRoute",
        "ConversationContext",
        "CommunicationAgent"
      ],
      "functions": [
        "is_expired",
        "should_retry",
        "size_bytes",
        "matches",
        "is_active",
        "add_message",
        "start"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "production_base_agent.py",
      "name": "production_base_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nats",
          "fix_suggestion": "pip install nats-py"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        }
      ],
      "classes": [
        "AgentState",
        "Priority",
        "AgentConfig",
        "TaskRequest",
        "TaskResult",
        "BaseAgent",
        "AgentMetrics"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "start",
        "run_forever",
        "stop",
        "message_handler"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "agent_discovery.py",
      "name": "agent_discovery",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_registry",
          "fix_suggestion": "pip install agent_registry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "DiscoveryStrategy",
        "DiscoveryRequest",
        "AgentDiscovery"
      ],
      "functions": [
        "discover_agent",
        "discover_agents",
        "health_check_agent",
        "get_agent_address",
        "get_available_capabilities",
        "get_agents_for_workflow"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "llm_agent.py",
      "name": "llm_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: anthropic",
          "fix_suggestion": "pip install anthropic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: qdrant_client",
          "fix_suggestion": "pip install qdrant_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: tiktoken",
          "fix_suggestion": "pip install tiktoken"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: openai",
          "fix_suggestion": "pip install openai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sentence_transformers",
          "fix_suggestion": "pip install sentence_transformers"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "LLMProvider",
        "MessageRole",
        "ConversationMessage",
        "ConversationMemory",
        "RAGDocument",
        "LLMConfig",
        "LLMAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "8 missing dependencies"
      ]
    },
    {
      "path": "app_agent_mgmt_endpoints.py",
      "name": "app_agent_mgmt_endpoints",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_lifecycle_manager",
          "fix_suggestion": "pip install agent_lifecycle_manager"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "execute_agent_action",
        "report_security_violation",
        "get_agent_surveillance_report",
        "get_surveillance_dashboard",
        "approve_agent_action"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "enhanced_agent_lifecycle.py",
      "name": "enhanced_agent_lifecycle",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "AgentHealthStatus",
        "AgentRegistrationRequest",
        "AgentMetricsSnapshot",
        "AgentLifecycleManager"
      ],
      "functions": [
        "validate_capabilities",
        "register_agent",
        "update_agent_metrics",
        "quarantine_agent",
        "get_agent_analytics",
        "list_agents",
        "decommission_agent",
        "health_check"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "orchestrator_agent.py",
      "name": "orchestrator_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentCapability",
        "TaskQueue",
        "WorkflowInstance",
        "OrchestratorAgent"
      ],
      "functions": [
        "load_percentage",
        "is_healthy",
        "priority_score",
        "put",
        "get",
        "size",
        "start"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "agent_tester.py",
      "name": "agent_tester",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentTester"
      ],
      "functions": [
        "main",
        "test_agent_initialization",
        "test_agent_methods",
        "test_agent_comprehensive",
        "test_all_agents"
      ],
      "activation_blockers": []
    },
    {
      "path": "security_agent.py",
      "name": "security_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "SecurityLevel",
        "ThreatType",
        "AuthMethod",
        "SecurityEvent",
        "AuthToken",
        "SecurityPolicy",
        "SecurityAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "real_time_monitoring_agent.py",
      "name": "real_time_monitoring_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MetricType",
        "AlertSeverity",
        "AlertStatus",
        "Metric",
        "Alert",
        "AlertRule",
        "RealTimeMonitoringAgent"
      ],
      "functions": [
        "start",
        "main"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "_FRAGMENT_prod_drafting_agent.py",
      "name": "_FRAGMENT_prod_drafting_agent",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 1: unexpected indent",
          "fix_suggestion": "Fix syntax error in file at line 1"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "learning_agent_api.py",
      "name": "learning_agent_api",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "KnowledgeStoreRequest",
        "KnowledgeSearchRequest",
        "LearningOutcomeRequest",
        "UserFeedbackRequest",
        "InteractionLogRequest",
        "KnowledgeSubscriptionRequest",
        "KnowledgeShareRequest",
        "RecommendationRequest"
      ],
      "functions": [
        "get_learning_agent",
        "store_knowledge",
        "search_knowledge",
        "get_knowledge",
        "update_knowledge",
        "delete_knowledge",
        "get_knowledge_by_category",
        "learn_from_outcome",
        "learn_from_feedback",
        "log_interaction"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "agent_catalog_analyzer.py",
      "name": "agent_catalog_analyzer",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "analyze_agent_file",
        "create_agent_catalog"
      ],
      "activation_blockers": []
    },
    {
      "path": "communication_agent.py",
      "name": "communication_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MessageType",
        "MessagePriority",
        "DeliveryMode",
        "Message",
        "MessageRoute",
        "ConversationContext",
        "CommunicationAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "learning_agent_api_integration.py",
      "name": "learning_agent_api_integration",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: learning_agent_core",
          "fix_suggestion": "pip install learning_agent_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: learning_agent_database",
          "fix_suggestion": "pip install learning_agent_database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "CodeAnalysisRequest",
        "TaskOutcomeRequest",
        "UserFeedbackRequest",
        "KnowledgeQueryRequest",
        "CollaborationRequest",
        "KnowledgeApplicationFeedback",
        "AgentRegistrationRequest",
        "ManagerAgentInterface"
      ],
      "functions": [
        "startup",
        "shutdown",
        "health_check",
        "get_status",
        "capture_code_analysis",
        "capture_task_outcome",
        "capture_user_feedback",
        "capture_error_resolution",
        "query_knowledge",
        "find_similar_solutions"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "agent_communicator.py",
      "name": "agent_communicator",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentCommunicator"
      ],
      "functions": [
        "send_to_agent",
        "send_to_agent_manager",
        "broadcast",
        "subscribe",
        "unsubscribe"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "editing_agent.py",
      "name": "editing_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nltk",
          "fix_suggestion": "pip install nltk"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: language_tool_python",
          "fix_suggestion": "pip install language_tool_python"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: textstat",
          "fix_suggestion": "pip install textstat"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: spacy",
          "fix_suggestion": "pip install spacy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "EditType",
        "ContentType",
        "EditingMode",
        "EditSuggestion",
        "EditingSession",
        "ContentAnalysis",
        "EditingAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "prod_agent_manager.py",
      "name": "prod_agent_manager",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: circuitbreaker",
          "fix_suggestion": "pip install circuitbreaker"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: tenacity",
          "fix_suggestion": "pip install tenacity"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentManagerConfig",
        "AgentRegistrationRequest",
        "AgentReportRequest",
        "AgentManagerMetrics",
        "RateLimiter",
        "CircuitBreakerState",
        "CircuitBreaker",
        "HealthMonitor",
        "ProductionAgentManager",
        "Config"
      ],
      "functions": [
        "retry_on_db_error",
        "measure_operation",
        "db_transaction",
        "create_agent_manager",
        "main",
        "validate_agent_id",
        "validate_capabilities",
        "validate_metrics",
        "decorator",
        "acquire"
      ],
      "activation_blockers": [
        "8 missing dependencies"
      ]
    },
    {
      "path": "generate_agent_testing_report.py",
      "name": "generate_agent_testing_report",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "generate_report"
      ],
      "activation_blockers": []
    },
    {
      "path": "prod_monitoring_agent.py",
      "name": "prod_monitoring_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MetricType",
        "AlertSeverity",
        "AlertStatus",
        "HealthStatus",
        "Metric",
        "Alert",
        "AlertRule",
        "SLADefinition",
        "RealTimeMonitoringAgent"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "can_trigger",
        "start",
        "stop",
        "main"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "learning_agent_models.py",
      "name": "learning_agent_models",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "KnowledgeCategory",
        "LearningType",
        "InsightType",
        "PatternStatus",
        "KnowledgeEntryModel",
        "LearningSessionModel",
        "PatternModel",
        "InteractionLogModel",
        "InsightModel",
        "KnowledgeGraphModel",
        "AgentLearningProfileModel",
        "KnowledgeSubscriptionModel",
        "FeedbackModel",
        "ModelVersionModel",
        "KnowledgeEntry",
        "LearningSession",
        "Pattern",
        "Insight",
        "KnowledgeRequest",
        "LearningOutcome",
        "KnowledgeSubscription",
        "AgentLearningProfile"
      ],
      "functions": [],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "agent_coordinator.py",
      "name": "agent_coordinator",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "ActionType",
        "Priority",
        "WorkflowStatus",
        "UserRequest",
        "AgentTask",
        "WorkflowPlan",
        "AgentCoordinator",
        "CoordinatorAPI"
      ],
      "functions": [
        "example_usage",
        "validate_files",
        "process_user_request",
        "get_workflow_status",
        "send_user_update",
        "approve_workflow",
        "reject_workflow",
        "submit_request",
        "check_status",
        "approve_actions"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "test_project_agent.py",
      "name": "test_project_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agents",
          "fix_suggestion": "pip install agents"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "TestQualityAnalyzer",
        "TestProjectAgent"
      ],
      "functions": [
        "analyzer",
        "test_analyze_high_quality_code",
        "test_analyze_low_quality_code",
        "test_receive_agent_output"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent_lifecycle_manager.py",
      "name": "agent_lifecycle_manager",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentLifecycleManager"
      ],
      "functions": [
        "request_agent_action",
        "get_agent_lifecycle_history"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "test_learning_agent.py",
      "name": "test_learning_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agents",
          "fix_suggestion": "pip install agents"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "TestKnowledgeExtractor",
        "TestLearningAgent"
      ],
      "functions": [
        "extractor",
        "test_extract_from_code",
        "test_extract_async_pattern",
        "test_receive_knowledge"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "learning_agent_main.py",
      "name": "learning_agent_main",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentRole",
        "KnowledgeCategory",
        "LearningPriority",
        "AgentProfile",
        "KnowledgePacket",
        "LearningSession",
        "ChatMessage",
        "ProductionLearningAgent"
      ],
      "functions": [
        "main",
        "initialize",
        "register_agent",
        "analyze_agent_performance",
        "capture_knowledge",
        "distribute_knowledge",
        "search_knowledge",
        "process_chat_message",
        "get_system_status",
        "shutdown"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent_client.py",
      "name": "agent_client",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "AgentClient"
      ],
      "functions": [
        "register_capability",
        "connect",
        "report_error",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "metrics_agent.py",
      "name": "metrics_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MetricsAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent_surveillance.py",
      "name": "agent_surveillance",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ai",
          "fix_suggestion": "pip install ai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "SurveillanceConfig",
        "AgentSurveillanceSystem"
      ],
      "functions": [
        "start_monitoring",
        "stop_monitoring",
        "get_agent_metrics",
        "get_all_metrics",
        "get_surveillance_report",
        "health_check"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "enterprise_agent_manager.py",
      "name": "enterprise_agent_manager",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 1485: expected 'except' or 'finally' block",
          "fix_suggestion": "Fix syntax error in file at line 1485"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "main_project_agent_reference.py",
      "name": "main_project_agent_reference",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: starlette",
          "fix_suggestion": "pip install starlette"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: middleware",
          "fix_suggestion": "pip install middleware"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "HealthResponse",
        "SubmitOutputRequest",
        "SubmissionResponse",
        "ProjectStatusResponse",
        "ChatMessage",
        "ChatResponse",
        "ConnectionManager"
      ],
      "functions": [
        "lifespan",
        "get_current_user",
        "require_admin",
        "health_check",
        "detailed_health_check",
        "get_prometheus_metrics",
        "login",
        "logout",
        "submit_agent_output",
        "get_submission_status"
      ],
      "activation_blockers": [
        "10 missing dependencies"
      ]
    },
    {
      "path": "static_analysis_agent.py",
      "name": "static_analysis_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AnalysisType",
        "Severity",
        "Finding",
        "AnalysisResult",
        "StaticAnalysisRule",
        "StaticAnalysisAgent"
      ],
      "functions": [
        "start",
        "main"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "learning-agent-production.py",
      "name": "learning-agent-production",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: alembic",
          "fix_suggestion": "pip install alembic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: communication",
          "fix_suggestion": "pip install communication"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: utils",
          "fix_suggestion": "pip install utils"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: knowledge",
          "fix_suggestion": "pip install knowledge"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ml",
          "fix_suggestion": "pip install ml"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "Settings",
        "AgentState",
        "UltraAdvancedLearningAgent",
        "Config"
      ],
      "functions": [
        "get_settings",
        "retry_on_failure",
        "cache_result",
        "run_migrations_offline",
        "run_migrations_online",
        "initialize",
        "process_experience",
        "analyze_agent_performance",
        "handle_chat_message",
        "get_health_status"
      ],
      "activation_blockers": [
        "12 missing dependencies"
      ]
    },
    {
      "path": "performance_engine_agent.py",
      "name": "performance_engine_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "PerformanceMetric",
        "OptimizationStrategy",
        "AlertSeverity",
        "PerformanceThreshold",
        "PerformanceAlert",
        "OptimizationRecommendation",
        "PerformanceProfile",
        "PerformanceEngineAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "metrics_agent_production.py",
      "name": "metrics_agent_production",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MetricDataPoint",
        "MetricSummary",
        "MetricsAgent"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "stop",
        "main"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent_manager_enhancements.py",
      "name": "agent_manager_enhancements",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentReportStatus",
        "AgentAction",
        "AdminApproval",
        "MandatoryReportingEnforcer",
        "AgentLifecycleManager",
        "EnhancedSecurityMonitor",
        "DataFlowValidator",
        "EnhancedAuditSystem"
      ],
      "functions": [
        "start_monitoring",
        "process_agent_report",
        "request_agent_action",
        "process_admin_approval",
        "start_monitoring",
        "validate_data_flow",
        "log_audit_event",
        "get_audit_trail",
        "get_user_activity"
      ],
      "activation_blockers": []
    },
    {
      "path": "agent_system.py",
      "name": "agent_system",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: jose",
          "fix_suggestion": "pip install jose"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "TaskStatus",
        "TaskPriority",
        "User",
        "Agent",
        "Task",
        "UserCreate",
        "UserResponse",
        "AgentCreate",
        "AgentResponse",
        "TaskCreate",
        "TaskResponse",
        "DatabaseManager",
        "AuthService",
        "TaskQueue",
        "AgentManager"
      ],
      "functions": [
        "lifespan",
        "get_current_user",
        "register",
        "login",
        "get_current_user_info",
        "create_agent",
        "list_agents",
        "get_agent",
        "agent_heartbeat",
        "create_task"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "enhanced_agent_surveillance.py",
      "name": "enhanced_agent_surveillance",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ai",
          "fix_suggestion": "pip install ai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "BehaviorPattern",
        "AgentThreatIndicator",
        "ConversationContext",
        "AgentSurveillanceSystem"
      ],
      "functions": [
        "start_monitoring",
        "get_agent_surveillance_report",
        "health_check"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "project_agent_main.py",
      "name": "project_agent_main",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: utils",
          "fix_suggestion": "pip install utils"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: services",
          "fix_suggestion": "pip install services"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "lifespan",
        "get_current_user",
        "health_check",
        "root",
        "register_user",
        "login",
        "logout",
        "create_project",
        "list_projects",
        "get_project"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "agent_manager_integrated.py",
      "name": "agent_manager_integrated",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 216: '(' was never closed",
          "fix_suggestion": "Fix syntax error in file at line 216"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "learning_agent_helpers.py",
      "name": "learning_agent_helpers",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentCommunicator",
        "ModelTrainer",
        "LearningAnalytics",
        "AgentLifecycleManager",
        "KnowledgeValidator",
        "PerformanceTracker",
        "KnowledgeQualityScorer",
        "PatternAnalyzer",
        "KnowledgeMerger",
        "KnowledgeExporter"
      ],
      "functions": [
        "calculate_similarity",
        "extract_keywords",
        "normalize_text",
        "calculate_confidence_score",
        "format_insight",
        "calculate_learning_velocity",
        "identify_learning_trends",
        "send_knowledge",
        "send_knowledge_response",
        "notify_new_knowledge"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "base_agent.py",
      "name": "base_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: nats",
          "fix_suggestion": "pip install nats-py"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: consul",
          "fix_suggestion": "pip install consul"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "AgentStatus",
        "TaskStatus",
        "Priority",
        "AgentConfig",
        "TaskRequest",
        "TaskResponse",
        "HealthStatus",
        "CircuitBreakerState",
        "CircuitBreaker",
        "BaseAgent",
        "MySimpleAgent"
      ],
      "functions": [
        "call",
        "connect",
        "get_circuit_breaker",
        "run",
        "start",
        "shutdown",
        "shutdown",
        "signal_handler",
        "wrapped_callback",
        "start"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "drafting_agent.py",
      "name": "drafting_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nltk",
          "fix_suggestion": "pip install nltk"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: textstat",
          "fix_suggestion": "pip install textstat"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: spacy",
          "fix_suggestion": "pip install spacy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "DocumentType",
        "ContentTone",
        "DraftStatus",
        "ContentTemplate",
        "DocumentDraft",
        "ContentAnalysis",
        "DraftingAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "enhancement_agent_v3.py",
      "name": "enhancement_agent_v3",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "EnhancementType",
        "EnhancementLevel",
        "FeedbackType",
        "Enhancement",
        "EnhancementResult",
        "LRUCache",
        "EnhancementAgent"
      ],
      "functions": [
        "main",
        "to_dict",
        "to_dict",
        "get",
        "set",
        "clear",
        "size",
        "cleanup_expired",
        "get_health",
        "get_status"
      ],
      "activation_blockers": []
    },
    {
      "path": "enhanced_base_agent.py",
      "name": "enhanced_base_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nats",
          "fix_suggestion": "pip install nats-py"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "Priority",
        "AgentState",
        "ConnectionState",
        "CircuitBreakerState",
        "AgentConfig",
        "TaskRequest",
        "AgentMetrics",
        "CircuitBreaker",
        "BaseAgent",
        "ContextFilter"
      ],
      "functions": [
        "run_agent",
        "validate",
        "to_dict",
        "from_dict",
        "is_expired",
        "should_retry",
        "to_dict",
        "call",
        "reset",
        "get_state"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "enhanced_base_agent (1).py",
      "name": "enhanced_base_agent (1)",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nats",
          "fix_suggestion": "pip install nats-py"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "Priority",
        "AgentState",
        "ConnectionState",
        "CircuitBreakerState",
        "AgentConfig",
        "TaskRequest",
        "AgentMetrics",
        "CircuitBreaker",
        "BaseAgent",
        "ContextFilter",
        "JsonFormatter"
      ],
      "functions": [
        "run_agent",
        "validate",
        "to_dict",
        "from_dict",
        "is_expired",
        "should_retry",
        "to_dict",
        "call",
        "reset",
        "get_state"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "learning_agent.py",
      "name": "learning_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "KnowledgeExtractor",
        "KnowledgeStore",
        "KnowledgeSharer",
        "LearningEngine",
        "LearningAgent"
      ],
      "functions": [
        "extract_from_code",
        "extract_from_interaction",
        "store_knowledge",
        "retrieve_knowledge",
        "update_access_count",
        "share_to_agent",
        "learn_from_feedback",
        "predict_best_approach",
        "initialize",
        "shutdown"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "editing_agent_testing (1).py",
      "name": "editing_agent_testing (1)",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: editing_agent",
          "fix_suggestion": "pip install editing_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "TestEditingAgentLifecycle",
        "TestEditingSession",
        "TestContentAnalysis",
        "TestSuggestions",
        "TestGrammarCheck",
        "TestCollaborativeEditing",
        "TestVersionControl",
        "TestTaskHandling",
        "TestMetrics",
        "TestIntegration"
      ],
      "functions": [
        "editing_agent_config",
        "mock_connections",
        "editing_agent",
        "test_agent_initialization",
        "test_graceful_shutdown",
        "test_start_editing_session",
        "test_get_session_status",
        "test_close_session",
        "test_analyze_content_basic",
        "test_analyze_empty_content"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "validation_agent.py",
      "name": "validation_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "ValidationLevel",
        "ValidationResult",
        "ValidationRule",
        "ValidationIssue",
        "ValidationReport",
        "ValidationAgent"
      ],
      "functions": [
        "start",
        "main"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "chatting_files_agent_api_system.py",
      "name": "chatting_files_agent_api_system",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: websockets",
          "fix_suggestion": "pip install websockets"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "TaskRequest",
        "ChatMessage",
        "FileUploadResponse",
        "AgentResponse",
        "FileManager",
        "LiveChatManager",
        "AgentAPI"
      ],
      "functions": [
        "create_complete_system",
        "upload_file",
        "download_file",
        "process_file_with_agent",
        "get_file_metadata",
        "list_files",
        "cleanup_temporary_files",
        "connect",
        "disconnect",
        "send_message"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "agent_registry.py",
      "name": "agent_registry",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "AgentRecord",
        "AgentRegistry"
      ],
      "functions": [
        "to_dict",
        "is_healthy",
        "is_available",
        "start",
        "stop",
        "register_agent",
        "deregister_agent",
        "heartbeat",
        "update_health",
        "record_failure"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "enhancement_agent.py",
      "name": "enhancement_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "EnhancementType",
        "EnhancementLevel",
        "Enhancement",
        "EnhancementResult",
        "EnhancementAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "learning-agent-security.py",
      "name": "learning-agent-security",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: transformers",
          "fix_suggestion": "pip install transformers"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: torch",
          "fix_suggestion": "pip install torch"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: hvac",
          "fix_suggestion": "pip install hvac"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "VaultManager",
        "EnhancedEncryptionService",
        "DatabasePool",
        "RedisManager",
        "BaseModel",
        "TransformerModel",
        "KnowledgeExtractionModel",
        "ModelFactory",
        "AdvancedMetrics"
      ],
      "functions": [
        "initialize",
        "get_secret",
        "store_secret",
        "rotate_secret",
        "initialize",
        "encrypt",
        "decrypt",
        "hash_password",
        "verify_password",
        "initialize"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "agent_routes.py",
      "name": "agent_routes",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: services",
          "fix_suggestion": "pip install services"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "create_agent",
        "list_agents",
        "get_agent",
        "update_agent",
        "request_agent_action",
        "submit_agent_report",
        "agent_websocket"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "ai_agents_production.py",
      "name": "ai_agents_production",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: anthropic",
          "fix_suggestion": "pip install anthropic"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentType",
        "ConfidenceLevel",
        "PriorityLevel",
        "AgentResponse",
        "LearningPattern",
        "AgentLearningManager",
        "AIAgent",
        "AIAgentOrchestrator"
      ],
      "functions": [
        "example_usage",
        "to_dict",
        "to_dict",
        "initialize",
        "record_pattern",
        "get_relevant_patterns",
        "update_performance",
        "analyze",
        "get_metrics",
        "initialize"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "agent_orchestrator.py",
      "name": "agent_orchestrator",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentOrchestrator"
      ],
      "functions": [
        "initialize",
        "send_to_agent",
        "check_agent_health",
        "list_agents",
        "start_health_monitoring",
        "health_check",
        "shutdown",
        "monitor"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "agent_mapper.py",
      "name": "agent_mapper",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: graphviz",
          "fix_suggestion": "pip install graphviz"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "create_agent_map"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "code_editor_agent_api.py",
      "name": "code_editor_agent_api",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 53: expected an indented block after class definition on line 52",
          "fix_suggestion": "Fix syntax error in file at line 53"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "base_agent 2.py",
      "name": "base_agent 2",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "Priority",
        "AgentConfig",
        "TaskRequest",
        "BaseAgent"
      ],
      "functions": [
        "start",
        "stop"
      ],
      "activation_blockers": []
    },
    {
      "path": "production_monitoring_agent.py",
      "name": "production_monitoring_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "MetricType",
        "AlertSeverity",
        "AlertStatus",
        "Metric",
        "Alert",
        "AlertRule",
        "RealTimeMonitoringAgent"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "stop",
        "main"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "agent_classifier.py",
      "name": "agent_classifier",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "classify_agents"
      ],
      "activation_blockers": []
    },
    {
      "path": "examination_agent.py",
      "name": "examination_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "ExaminationType",
        "QualityLevel",
        "ExaminationResult",
        "ComprehensiveAnalysis",
        "ExaminationAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "example_agent.py",
      "name": "example_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_client",
          "fix_suggestion": "pip install agent_client"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [],
      "functions": [
        "task_handler_example",
        "main"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "learning_agent_core.py",
      "name": "learning_agent_core",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentRole",
        "KnowledgeType",
        "LearningSource",
        "KnowledgeQuality",
        "KnowledgeItem",
        "LearningEvent",
        "AgentLearningProfile",
        "KnowledgeFlow",
        "YMERALearningAgent"
      ],
      "functions": [
        "initialize",
        "capture_knowledge_from_event",
        "distribute_knowledge",
        "query_knowledge",
        "record_knowledge_application",
        "facilitate_knowledge_exchange",
        "analyze_patterns",
        "get_related_knowledge",
        "get_system_status",
        "get_agent_learning_report"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "enhanced_agent_orchestrator.py",
      "name": "enhanced_agent_orchestrator",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: joblib",
          "fix_suggestion": "pip install joblib"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "TaskPriority",
        "AgentCapability",
        "AgentPerformanceLevel",
        "AgentProfile",
        "TaskRequirement",
        "TaskAssignment",
        "IntelligentAgentOrchestrator"
      ],
      "functions": [
        "update_agent_profile",
        "assign_task",
        "record_task_completion",
        "intelligent_load_balancing",
        "predictive_maintenance",
        "capacity_planning",
        "optimize_agent_assignments",
        "get_orchestration_analytics",
        "start_performance_monitoring",
        "health_check"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "agent_manager_integration.py",
      "name": "agent_manager_integration",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ai",
          "fix_suggestion": "pip install ai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_surveillance",
          "fix_suggestion": "pip install agent_surveillance"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_lifecycle_manager",
          "fix_suggestion": "pip install agent_lifecycle_manager"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_orchestrator",
          "fix_suggestion": "pip install agent_orchestrator"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentManagerOperationResult",
        "AgentManager"
      ],
      "functions": [
        "create_agent_manager",
        "start",
        "register_agent",
        "update_agent_metrics",
        "assign_task",
        "record_task_completion",
        "get_agent_status",
        "get_system_health",
        "quarantine_agent",
        "decommission_agent"
      ],
      "activation_blockers": [
        "8 missing dependencies"
      ]
    },
    {
      "path": "coding_agent.py",
      "name": "coding_agent",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "CodeLanguage",
        "ExecutionStatus",
        "CodeExecutionRequest",
        "CodeExecutionResult",
        "CodingAgentMetrics",
        "SecurityValidator",
        "CodeExecutor",
        "CodingAgent"
      ],
      "functions": [
        "main",
        "validate",
        "get_cache_key",
        "to_dict",
        "to_dict",
        "validate_code",
        "execute",
        "cleanup",
        "get_status",
        "get_health"
      ],
      "activation_blockers": []
    },
    {
      "path": "learning_agent_database.py",
      "name": "learning_agent_database",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "Agent",
        "Knowledge",
        "LearningSessionDB",
        "ChatMessageDB",
        "PerformanceMetric",
        "DatabaseManager",
        "DatabaseIntegratedLearningAgent"
      ],
      "functions": [
        "main",
        "initialize",
        "close",
        "save_agent",
        "get_agent",
        "update_agent",
        "list_agents",
        "save_knowledge",
        "get_knowledge",
        "search_knowledge"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "agent_lifecycle_mgr.py",
      "name": "agent_lifecycle_mgr",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentStatus",
        "AgentAction",
        "AgentActionRequest",
        "AgentLifecycleManager"
      ],
      "functions": [
        "register_agent",
        "update_agent_status",
        "execute_agent_action",
        "handle_security_violation",
        "get_agent",
        "list_agents",
        "count_agents",
        "decommission_agent",
        "monitor_agent_health",
        "start_health_monitoring_loop"
      ],
      "activation_blockers": [
        "8 missing dependencies"
      ]
    },
    {
      "path": "agent_benchmarks.py",
      "name": "agent_benchmarks",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentBenchmark"
      ],
      "functions": [
        "main",
        "get_system_info",
        "benchmark_agent_initialization",
        "benchmark_agent_operation",
        "benchmark_agent_comprehensive",
        "benchmark_all_agents"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "enhanced_llm_agent.py",
      "name": "enhanced_llm_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: openai",
          "fix_suggestion": "pip install openai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: qdrant_client",
          "fix_suggestion": "pip install qdrant_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: tiktoken",
          "fix_suggestion": "pip install tiktoken"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: anthropic",
          "fix_suggestion": "pip install anthropic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sentence_transformers",
          "fix_suggestion": "pip install sentence_transformers"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "LLMProvider",
        "MessageRole",
        "ConversationMessage",
        "ConversationMemory",
        "RAGDocument",
        "LLMConfig",
        "BaseLLMProvider",
        "OpenAIProvider",
        "AnthropicProvider",
        "LLMProviderManager",
        "LLMAgent"
      ],
      "functions": [
        "to_dict",
        "add_message",
        "get_context_messages",
        "get_token_count",
        "initialize",
        "generate",
        "close",
        "initialize",
        "generate",
        "close"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "agent_manager_production.py",
      "name": "agent_manager_production",
      "category": "agent",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 1500: invalid syntax",
          "fix_suggestion": "Fix syntax error in file at line 1500"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "enhanced_learning_agent.py",
      "name": "enhanced_learning_agent",
      "category": "agent",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: learning_agent_core",
          "fix_suggestion": "pip install learning_agent_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: websockets",
          "fix_suggestion": "pip install websockets"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "AgentCapability",
        "KnowledgeRequest",
        "ExternalKnowledgeSource",
        "CollectiveKnowledgeLog",
        "EnhancedLearningAgent"
      ],
      "functions": [
        "initialize",
        "handle_knowledge_request",
        "update_agent_capability",
        "track_agent_knowledge_contribution",
        "track_agent_knowledge_usage",
        "get_agents_with_capability",
        "generate_collective_knowledge_log",
        "send_log_to_agent_manager",
        "facilitate_peer_knowledge_sharing",
        "get_shareable_knowledge"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "test_agents_for_benchmark.py",
      "name": "test_agents_for_benchmark",
      "category": "agent",
      "status": "working",
      "can_activate": true,
      "issues": [
        {
          "type": "other",
          "message": "Does not inherit from BaseAgent",
          "fix_suggestion": "Implement BaseAgent interface for consistency"
        }
      ],
      "classes": [
        "SimpleTestAgent",
        "FastTestAgent",
        "SlowTestAgent"
      ],
      "functions": [
        "simple_method",
        "compute_heavy",
        "memory_operation",
        "quick_increment",
        "quick_check",
        "slow_operation"
      ],
      "activation_blockers": []
    },
    {
      "path": "recommendation_engine.py",
      "name": "recommendation_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "RecommendationEngine"
      ],
      "functions": [
        "get_recommendations",
        "recommend_knowledge",
        "recommend_collaborators",
        "recommend_learning_path",
        "update_from_feedback"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "optimization_engine.py",
      "name": "optimization_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "OptimizationType",
        "OptimizationLevel",
        "MetricType",
        "OptimizationRule",
        "PerformanceMetric",
        "OptimizationResult",
        "CacheStrategy",
        "OptimizingEngine"
      ],
      "functions": [
        "start",
        "initialize",
        "optimize_code",
        "main"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "prod_performance_engine.py",
      "name": "prod_performance_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "PerformanceMetric",
        "AlertSeverity",
        "OptimizationStrategy",
        "AnomalyType",
        "PerformanceThreshold",
        "PerformanceAlert",
        "PerformanceSnapshot",
        "OptimizationRecommendation",
        "AnomalyDetection",
        "PerformanceEngine",
        "AnomalyDetector"
      ],
      "functions": [
        "check_violation",
        "reset",
        "to_dict",
        "to_dict",
        "is_valid",
        "to_dict",
        "to_dict",
        "start",
        "stop",
        "detect"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "parser_engine_prod.py",
      "name": "parser_engine_prod",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: tree_sitter_languages",
          "fix_suggestion": "pip install tree_sitter_languages"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: esprima",
          "fix_suggestion": "pip install esprima"
        }
      ],
      "classes": [
        "NodeType",
        "Location",
        "Symbol",
        "Dependency",
        "ParseResult",
        "ParserEngine",
        "SymbolExtractor",
        "np"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "parse",
        "batch_parse",
        "get_metrics",
        "clear_cache",
        "supported_languages",
        "get_language_info"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "performance_engine.py",
      "name": "performance_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "PerformanceMetricType",
        "PerformanceIssueSeverity",
        "PerformanceMetric",
        "PerformanceIssue",
        "ServicePerformanceSummary",
        "PerformanceEngineAgent",
        "MockMsg"
      ],
      "functions": [
        "start",
        "stop",
        "initialize",
        "analyze_performance"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "document_generation_engine.py",
      "name": "document_generation_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "DocumentFormat",
        "DocumentMetadata",
        "DocumentSection",
        "DocumentTable",
        "DocumentContent",
        "DocumentGenerationEngine"
      ],
      "functions": [
        "generate_document"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "engine.py",
      "name": "engine",
      "category": "engine",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "LearningTaskType",
        "LearningTaskStatus",
        "LearningTask",
        "LearningResult",
        "LearningEngine"
      ],
      "functions": [
        "set_pattern_recognizer",
        "set_knowledge_base",
        "set_adaptive_learner",
        "set_message_broker",
        "submit_task",
        "get_task_status",
        "cancel_task",
        "get_all_tasks",
        "get_metrics_summary"
      ],
      "activation_blockers": []
    },
    {
      "path": "learning_engine_fixed.py",
      "name": "learning_engine_fixed",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: networkx",
          "fix_suggestion": "pip install networkx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "LearningType",
        "KnowledgeStatus",
        "Experience",
        "KnowledgeItem",
        "LearningPattern",
        "LearningMetrics",
        "KnowledgeGraph",
        "ExperienceProcessor",
        "PatternDiscoveryEngine",
        "InterAgentKnowledgeTransfer"
      ],
      "functions": [
        "calculate_learning_metrics",
        "initialize_learning_engine",
        "health_check",
        "add_knowledge",
        "find_similar_knowledge",
        "add_experience",
        "process_experiences",
        "discover_patterns",
        "synchronize_agent_knowledge"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "analytics.engine.py",
      "name": "analytics.engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pandas",
          "fix_suggestion": "pip install pandas"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: scipy",
          "fix_suggestion": "pip install scipy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "AdvancedAnalyticsEngine",
        "RealTimeAnalyticsDashboard",
        "PredictiveAnalytics"
      ],
      "functions": [
        "generate_project_insights",
        "predict_project_risks",
        "optimize_resource_allocation",
        "calculate_team_productivity_metrics",
        "get_dashboard_data",
        "forecast_project_completion",
        "predict_resource_demand"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "generator_engine_prod.py",
      "name": "generator_engine_prod",
      "category": "engine",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "CodeStyle",
        "GenerationType",
        "GenerationSpec",
        "GeneratedArtifact",
        "GeneratorEngine"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "generate",
        "get_metrics",
        "get_supported_languages",
        "get_supported_patterns",
        "get_pattern_info",
        "test_generator"
      ],
      "activation_blockers": []
    },
    {
      "path": "workflow_engine.py",
      "name": "workflow_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: task_orchestrator",
          "fix_suggestion": "pip install task_orchestrator"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "WorkflowStatus",
        "StepStatus",
        "WorkflowStep",
        "WorkflowDefinition",
        "StepExecution",
        "WorkflowExecution",
        "WorkflowEngine"
      ],
      "functions": [
        "validate",
        "start",
        "stop",
        "register_template",
        "get_template",
        "execute_workflow",
        "execute_template",
        "cancel_workflow",
        "pause_workflow",
        "resume_workflow"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "core_engine_utils.py",
      "name": "core_engine_utils",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [],
      "functions": [
        "generate_unique_id",
        "generate_cycle_id",
        "generate_task_id",
        "get_utc_timestamp",
        "format_timestamp",
        "timestamp_to_seconds",
        "calculate_hash",
        "verify_integrity",
        "safe_json_loads",
        "safe_json_dumps"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "prod_analyzer_engine.py",
      "name": "prod_analyzer_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "Severity",
        "Category",
        "FixStrategy",
        "Issue",
        "Metric",
        "QualityGate",
        "AnalysisReport",
        "AnalyzerEngine"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "analyze",
        "main"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "production_intelligence_engine.py",
      "name": "production_intelligence_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "DecisionStrategy",
        "SystemState",
        "AgentCapability",
        "DecisionContext",
        "AgentRecommendation",
        "IntelligenceEngine"
      ],
      "functions": [
        "main"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "production_custom_engines_full.py",
      "name": "production_custom_engines_full",
      "category": "engine",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 2: unexpected indent",
          "fix_suggestion": "Fix syntax error in file at line 2"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "intelligence_engine_enhanced.py",
      "name": "intelligence_engine_enhanced",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "DecisionStrategy",
        "SystemState",
        "AgentCapability",
        "SystemMetric",
        "DecisionContext",
        "AgentRecommendation",
        "IntelligenceEngine"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "prod_optimizing_engine.py",
      "name": "prod_optimizing_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "OptimizationType",
        "OptimizationLevel",
        "MetricType",
        "CacheStrategy",
        "HealthStatus",
        "OptimizationRule",
        "PerformanceMetric",
        "OptimizationResult",
        "CircuitBreakerState",
        "PrometheusMetrics",
        "OptimizingEngine"
      ],
      "functions": [
        "success_rate",
        "can_apply",
        "is_valid",
        "to_dict",
        "should_attempt",
        "record_success",
        "record_failure",
        "start",
        "stop",
        "main"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "learning_engine.py",
      "name": "learning_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: google",
          "fix_suggestion": "pip install google"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: chromadb",
          "fix_suggestion": "pip install chromadb"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: anthropic",
          "fix_suggestion": "pip install anthropic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: intelligence_engine",
          "fix_suggestion": "pip install intelligence_engine"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: groq",
          "fix_suggestion": "pip install groq"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config_manager",
          "fix_suggestion": "pip install config_manager"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: openai",
          "fix_suggestion": "pip install openai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pinecone",
          "fix_suggestion": "pip install pinecone"
        }
      ],
      "classes": [
        "AgentType",
        "LearningMode",
        "TaskPriority",
        "Experience",
        "Task",
        "KnowledgeGraph",
        "VectorStore",
        "LearningAgent",
        "MultiAgentLearningEngine"
      ],
      "functions": [
        "create_learning_engine",
        "to_dict",
        "to_dict",
        "add_knowledge",
        "add_relationship",
        "query",
        "find_similar",
        "store",
        "query",
        "learn_from_experience"
      ],
      "activation_blockers": [
        "10 missing dependencies"
      ]
    },
    {
      "path": "optimizing_engine.py",
      "name": "optimizing_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "OptimizationType",
        "OptimizationLevel",
        "MetricType",
        "OptimizationRule",
        "PerformanceMetric",
        "OptimizationResult",
        "CacheStrategy",
        "OptimizingEngine"
      ],
      "functions": [
        "start",
        "main"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "core_engine_complete.py",
      "name": "core_engine_complete",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: CORE_CONFIGURATION",
          "fix_suggestion": "pip install CORE_CONFIGURATION"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "LearningEngineConfig",
        "LearningCycle",
        "BaseEngine",
        "CoreEngine"
      ],
      "functions": [
        "to_dict",
        "initialize",
        "start",
        "stop",
        "health_check",
        "health_check",
        "get_statistics"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "intelligence_engine.py",
      "name": "intelligence_engine",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "DecisionStrategy",
        "SystemState",
        "AgentCapability",
        "SystemMetric",
        "DecisionContext",
        "AgentRecommendation",
        "IntelligenceEngine"
      ],
      "functions": [
        "start",
        "main"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "production_specialized_engines.py",
      "name": "production_specialized_engines",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [
        "MetricSeverity",
        "PerformanceAlert",
        "PerformanceEngineAgent",
        "OptimizationEngineAgent",
        "AnalysisEngineAgent"
      ],
      "functions": [
        "run_performance_engine",
        "run_optimization_engine",
        "run_analysis_engine"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "core_engine_init.py",
      "name": "core_engine_init",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: utils",
          "fix_suggestion": "pip install utils"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core_engine",
          "fix_suggestion": "pip install core_engine"
        }
      ],
      "classes": [],
      "functions": [
        "get_version",
        "check_dependencies"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "performance_engine_agent.py",
      "name": "performance_engine_agent",
      "category": "engine",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [
        "PerformanceMetric",
        "OptimizationStrategy",
        "AlertSeverity",
        "PerformanceThreshold",
        "PerformanceAlert",
        "OptimizationRecommendation",
        "PerformanceProfile",
        "PerformanceEngineAgent"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "health_check.py",
      "name": "health_check",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "HealthChecker"
      ],
      "functions": [
        "check_all"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "task_routes.py",
      "name": "task_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: services",
          "fix_suggestion": "pip install services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        }
      ],
      "classes": [],
      "functions": [
        "create_task",
        "list_tasks",
        "get_task",
        "cancel_task",
        "submit_task_result",
        "get_task_stats",
        "create_batch_tasks"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "expansion_readiness.py",
      "name": "expansion_readiness",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ExpansionManager"
      ],
      "functions": [
        "setup_expansion_framework",
        "create_plugin_architecture",
        "setup_api_versioning",
        "create_configuration_templates",
        "create_expansion_docs"
      ],
      "activation_blockers": []
    },
    {
      "path": "BaseEvent.py",
      "name": "BaseEvent",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: kafka",
          "fix_suggestion": "pip install kafka"
        }
      ],
      "classes": [
        "BaseEvent",
        "ProjectEvent",
        "TaskEvent",
        "UserEvent",
        "EventStore",
        "MessageQueueSystem",
        "SagaManager"
      ],
      "functions": [
        "append_event",
        "get_events",
        "create_snapshot",
        "init_kafka_consumers",
        "process_message",
        "process_event_message",
        "send_to_dlq",
        "retry_dlq_messages",
        "execute_saga",
        "get_saga_steps"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "database_monitor.py",
      "name": "database_monitor",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [
        "HealthCheckResult",
        "PerformanceMetrics",
        "DatabaseMonitor"
      ],
      "functions": [
        "main",
        "to_dict",
        "to_dict",
        "comprehensive_health_check",
        "collect_performance_metrics",
        "generate_report",
        "export_metrics"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "migration_manager.py",
      "name": "migration_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "MigrationStatus",
        "MigrationManager"
      ],
      "functions": [
        "main",
        "discover_migrations",
        "get_applied_migrations",
        "load_migration",
        "apply_migration",
        "rollback_migration",
        "migrate",
        "rollback",
        "status",
        "create_migration"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "user.py",
      "name": "user",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "UserRole",
        "User",
        "Config"
      ],
      "functions": [
        "validate_email"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "scaling.auto_scaler.py",
      "name": "scaling.auto_scaler",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_api_client",
          "fix_suggestion": "pip install prometheus_api_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: kubernetes",
          "fix_suggestion": "pip install kubernetes"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: scipy",
          "fix_suggestion": "pip install scipy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "ScalingMetric",
        "AdvancedAutoScaler",
        "ScalingDecision",
        "PredictiveScaler",
        "MultiDimensionalScaler",
        "ScalingOrchestrator"
      ],
      "functions": [
        "scale_based_on_metrics",
        "predict_load",
        "calculate_optimal_replicas",
        "start_scaling_loop"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "database_core_integrated.py",
      "name": "database_core_integrated",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "DatabaseConfig",
        "EnhancedBase",
        "TimestampMixin",
        "SoftDeleteMixin",
        "User",
        "Project",
        "Agent",
        "Task",
        "File",
        "AuditLog",
        "MigrationInfo",
        "BaseMigration",
        "IntegratedDatabaseManager",
        "BaseRepository"
      ],
      "functions": [
        "get_json_column",
        "get_database_manager",
        "get_db_session",
        "init_database",
        "close_database",
        "is_postgres",
        "is_sqlite",
        "to_dict",
        "update_from_dict",
        "create_from_dict"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "behavior_monitor.py",
      "name": "behavior_monitor",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AgentBehaviorMonitor"
      ],
      "functions": [
        "analyze_agent",
        "record_behavior"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "connection_manager.py",
      "name": "connection_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        }
      ],
      "classes": [
        "ConnectionManager"
      ],
      "functions": [
        "connect",
        "disconnect",
        "send_to_agent",
        "send_to_user",
        "broadcast_to_all_agents",
        "broadcast_to_all_users",
        "register_message_handler",
        "handle_message"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "conftest.py",
      "name": "conftest",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: main",
          "fix_suggestion": "pip install main"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        }
      ],
      "classes": [],
      "functions": [
        "event_loop",
        "test_settings",
        "db_manager",
        "client",
        "sample_code",
        "sample_metadata"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "config_compat.py",
      "name": "config_compat",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "Settings",
        "DevelopmentConfig",
        "ProductionConfig",
        "TestingConfig",
        "TemporarySettings"
      ],
      "functions": [
        "get_env",
        "get_bool_env",
        "get_int_env",
        "get_settings",
        "reset_settings",
        "get_config_settings",
        "load_settings",
        "get_config_by_environment",
        "validate_database_url",
        "validate_redis_url"
      ],
      "activation_blockers": []
    },
    {
      "path": "quick_start.py",
      "name": "quick_start",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        }
      ],
      "classes": [],
      "functions": [
        "quick_start"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "file_manager.py",
      "name": "file_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "FileManager"
      ],
      "functions": [
        "initialize",
        "upload_file",
        "get_file_metadata",
        "get_file_path",
        "check_file_access",
        "get_file_versions",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "monitoring_compatibility.py",
      "name": "monitoring_compatibility",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "PerformanceTracker"
      ],
      "functions": [
        "track_performance",
        "get_performance_tracker",
        "async_wrapper",
        "sync_wrapper",
        "start_tracking",
        "end_tracking",
        "get_metrics",
        "clear_metrics"
      ],
      "activation_blockers": []
    },
    {
      "path": "batch_processor.py",
      "name": "batch_processor",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "BatchConfig",
        "BatchProcessor"
      ],
      "functions": [
        "add",
        "flush"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "data_pipeline.etl_processor.py",
      "name": "data_pipeline.etl_processor",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 391: expected an indented block after 'if' statement on line 390",
          "fix_suggestion": "Fix syntax error in file at line 391"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "infrastructure.orchestrator.py",
      "name": "infrastructure.orchestrator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: optimization",
          "fix_suggestion": "pip install optimization"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: distributed",
          "fix_suggestion": "pip install distributed"
        }
      ],
      "classes": [
        "InfrastructureOrchestrator"
      ],
      "functions": [
        "main",
        "initialize",
        "start_service",
        "stop_service",
        "scale_service",
        "monitor_system_health",
        "get_system_status"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "database_wrapper.py",
      "name": "database_wrapper",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "DatabaseConfig",
        "DatabaseManager"
      ],
      "functions": [
        "get_db_session",
        "init_database",
        "close_database",
        "create_tables",
        "drop_tables",
        "transaction",
        "get_database_stats",
        "initialize",
        "dispose",
        "get_session"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "prod_config_manager.py",
      "name": "prod_config_manager",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 1137: unmatched '}'",
          "fix_suggestion": "Fix syntax error in file at line 1137"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "admin_routes.py",
      "name": "admin_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: services",
          "fix_suggestion": "pip install services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        }
      ],
      "classes": [],
      "functions": [
        "list_approvals",
        "get_approval",
        "process_approval",
        "list_audit_logs",
        "exempt_agent_from_reporting"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "env.py",
      "name": "env",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: alembic",
          "fix_suggestion": "pip install alembic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [],
      "functions": [
        "run_migrations_offline",
        "run_migrations_online",
        "do_run_migrations",
        "run_async_migrations"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "external_integration.py",
      "name": "external_integration",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: newrelic",
          "fix_suggestion": "pip install newrelic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: datadog",
          "fix_suggestion": "pip install datadog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: splunklib",
          "fix_suggestion": "pip install splunklib"
        }
      ],
      "classes": [
        "ExternalMonitoringIntegration"
      ],
      "functions": [
        "export_health_data",
        "export_security_event"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "example_integration_usage.py",
      "name": "example_integration_usage",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "main"
      ],
      "activation_blockers": []
    },
    {
      "path": "example_api.py",
      "name": "example_api",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: DATABASE_CORE",
          "fix_suggestion": "pip install DATABASE_CORE"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "UserCreate",
        "UserResponse",
        "ProjectCreate",
        "ProjectResponse",
        "AgentCreate",
        "AgentResponse",
        "TaskCreate",
        "TaskResponse",
        "HealthResponse",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "startup_event",
        "shutdown_event",
        "root",
        "health_check",
        "get_statistics",
        "create_user",
        "get_user",
        "list_users",
        "create_project",
        "get_project"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "file_validator_util.py",
      "name": "file_validator_util",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: PIL",
          "fix_suggestion": "pip install PIL"
        }
      ],
      "classes": [
        "ValidationResult",
        "FileValidator"
      ],
      "functions": [
        "validate",
        "calculate_checksum"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "MultiLevelCache.py",
      "name": "MultiLevelCache",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "MultiLevelCache",
        "OptimizedDatabaseUtils",
        "MaterializedViewManager",
        "ConnectionPoolManager"
      ],
      "functions": [
        "init_redis",
        "get",
        "set",
        "delete",
        "clear",
        "init_engines",
        "get_session_factory",
        "get_session",
        "get_shard_for_entity",
        "get_sharded_session"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "deployment_script.py",
      "name": "deployment_script",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "Colors",
        "IssueDetector",
        "FixApplier",
        "Verifier"
      ],
      "functions": [
        "print_header",
        "print_success",
        "print_error",
        "print_warning",
        "print_info",
        "main",
        "check_database_import",
        "check_database_module",
        "check_encoding_issues",
        "check_import_consistency"
      ],
      "activation_blockers": []
    },
    {
      "path": "example_component_enhancement.py",
      "name": "example_component_enhancement",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: component_enhancement_workflow",
          "fix_suggestion": "pip install component_enhancement_workflow"
        }
      ],
      "classes": [],
      "functions": [
        "main"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "api_gateway.py",
      "name": "api_gateway",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 2: unterminated string literal (detected at line 2)",
          "fix_suggestion": "Fix syntax error in file at line 2"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "file.py",
      "name": "file",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "FileMetadata",
        "FileVersion"
      ],
      "functions": [],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "quality_verifier.py",
      "name": "quality_verifier",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "QualityVerificationEngine"
      ],
      "functions": [
        "initialize",
        "verify_submission",
        "get_detailed_feedback",
        "get_project_metrics",
        "get_quality_trends",
        "start_background_processing",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "orchestrator.py",
      "name": "orchestrator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "WorkflowOrchestrator"
      ],
      "functions": [
        "start",
        "stop",
        "route_output",
        "isolate_agent",
        "remove_agent"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "setup.py",
      "name": "setup",
      "category": "utilitie",
      "status": "broken",
      "can_activate": false,
      "issues": [
        {
          "type": "other",
          "message": "No classes or functions found",
          "fix_suggestion": "File appears to be empty or improperly structured"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "No functional code found"
      ]
    },
    {
      "path": "workflow_manager.py",
      "name": "workflow_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: async_timeout",
          "fix_suggestion": "pip install async_timeout"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: networkx",
          "fix_suggestion": "pip install networkx"
        }
      ],
      "classes": [
        "WorkflowStatus",
        "StepStatus",
        "StepType",
        "WorkflowPriority",
        "WorkflowMetrics",
        "WorkflowManager"
      ],
      "functions": [
        "register_workflow",
        "start_workflow",
        "pause_workflow",
        "resume_workflow",
        "cancel_workflow",
        "get_workflow_status",
        "get_workflow_metrics",
        "register_hook"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "component_enhancement_workflow.py",
      "name": "component_enhancement_workflow",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 30: invalid syntax",
          "fix_suggestion": "Fix syntax error in file at line 30"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "metrics.py",
      "name": "metrics",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "MetricsCollector"
      ],
      "functions": [
        "increment_counter",
        "set_gauge",
        "observe_histogram"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "testing_framework.py",
      "name": "testing_framework",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "EnhancedComponentTester"
      ],
      "functions": [
        "main",
        "test_all_enhanced_components",
        "test_single_component",
        "run_unit_tests",
        "run_integration_tests",
        "run_performance_tests",
        "run_compatibility_tests",
        "run_security_tests",
        "import_component",
        "execute_component_unit_tests"
      ],
      "activation_blockers": []
    },
    {
      "path": "external_learning.py",
      "name": "external_learning",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        }
      ],
      "classes": [
        "ExternalSource",
        "ExternalKnowledge",
        "ExternalLearningIntegrator"
      ],
      "functions": [
        "set_learning_engine",
        "set_knowledge_base",
        "start",
        "stop",
        "search_external_knowledge",
        "get_recent_knowledge",
        "get_statistics"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "code_of_conduct_complete.py",
      "name": "code_of_conduct_complete",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "RiskLevel",
        "ActivityType",
        "SystemAction",
        "AgentActivityLog",
        "AdminNotification",
        "SystemFreezeLog",
        "ActivityLogEntry",
        "RiskAssessment",
        "AgentCodeOfConduct"
      ],
      "functions": [
        "log_agent_activity",
        "log_activity",
        "check_agent_frozen",
        "check_module_frozen",
        "check_system_frozen",
        "unfreeze_agent",
        "unfreeze_module",
        "unfreeze_system",
        "get_pending_admin_notifications",
        "respond_to_notification"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "metrics_collector.py",
      "name": "metrics_collector",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "MetricsCollector",
        "MetricsMiddleware"
      ],
      "functions": [
        "initialize",
        "increment_counter",
        "get_counter",
        "set_gauge",
        "get_gauge",
        "observe_histogram",
        "get_histogram_stats",
        "record_response_time",
        "get_response_time_stats",
        "record_submission"
      ],
      "activation_blockers": []
    },
    {
      "path": "task_queue.py",
      "name": "task_queue",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "TaskPriority",
        "TaskStatus",
        "Task",
        "AsyncTaskQueue"
      ],
      "functions": [
        "start",
        "stop",
        "submit",
        "get_result",
        "get_status",
        "cancel_task",
        "get_metrics"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "cache_manager.py",
      "name": "cache_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "CacheStrategy",
        "MultiLevelCache"
      ],
      "functions": [
        "cached",
        "initialize_cache",
        "get_cache_manager",
        "get",
        "set",
        "delete",
        "invalidate",
        "invalidate_pattern",
        "clear",
        "get_stats"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "settings.py",
      "name": "settings",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic_settings",
          "fix_suggestion": "pip install pydantic_settings"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "Settings",
        "Config"
      ],
      "functions": [
        "parse_cors_origins",
        "parse_kafka_servers",
        "parse_api_keys",
        "parse_allowed_extensions"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "system.py",
      "name": "system",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: learning",
          "fix_suggestion": "pip install learning"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: logger",
          "fix_suggestion": "pip install logger"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: infrastructure",
          "fix_suggestion": "pip install infrastructure"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        }
      ],
      "classes": [
        "SystemStatus",
        "SystemMetrics",
        "YMERASystem"
      ],
      "functions": [
        "get_system",
        "initialize",
        "submit_learning_task",
        "get_task_status",
        "get_task_result",
        "query_knowledge",
        "get_patterns",
        "get_system_metrics",
        "get_system_status",
        "enable_continuous_learning"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "demo_expansion_framework.py",
      "name": "demo_expansion_framework",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "AnalyticsPlugin"
      ],
      "functions": [
        "print_section",
        "main",
        "pre_request_hook",
        "post_request_hook",
        "initialize",
        "execute"
      ],
      "activation_blockers": []
    },
    {
      "path": "extensions.py",
      "name": "extensions",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: advanced_features",
          "fix_suggestion": "pip install advanced_features"
        }
      ],
      "classes": [],
      "functions": [
        "websocket_endpoint",
        "handle_task_update",
        "handle_agent_status",
        "create_batch_tasks",
        "get_task_statistics",
        "execute_agent_command",
        "get_available_agents",
        "detailed_health_check",
        "get_live_metrics",
        "get_analytics_summary"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "monitoring.py",
      "name": "monitoring",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        }
      ],
      "classes": [
        "MonitoringService"
      ],
      "functions": [
        "initialize",
        "record_metric",
        "update_gauge",
        "close"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "generate_inventory_report.py",
      "name": "generate_inventory_report",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "generate_inventory_report"
      ],
      "activation_blockers": []
    },
    {
      "path": "task_orchestrator.py",
      "name": "task_orchestrator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_registry",
          "fix_suggestion": "pip install agent_registry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_discovery",
          "fix_suggestion": "pip install agent_discovery"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "TaskStatus",
        "TaskPriority",
        "TaskRequest",
        "TaskResult",
        "TaskContext",
        "TaskOrchestrator"
      ],
      "functions": [
        "start",
        "stop",
        "submit_task",
        "submit_batch",
        "cancel_task",
        "get_task_status",
        "get_task_result",
        "get_active_tasks",
        "get_statistics",
        "register_callback"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "chat_service.py",
      "name": "chat_service",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 3: unexpected indent",
          "fix_suggestion": "Fix syntax error in file at line 3"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "router.py",
      "name": "router",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AgentSubmission",
        "KnowledgeSubmission",
        "ChatMessage",
        "KnowledgeRequest"
      ],
      "functions": [
        "get_project_agent",
        "get_learning_agent",
        "submit_to_project_agent",
        "chat_with_project_agent",
        "upload_file_to_project_agent",
        "download_file_from_project_agent",
        "get_project_status",
        "submit_knowledge",
        "request_knowledge",
        "analyze_code"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "task_worker.py",
      "name": "task_worker",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: kafka",
          "fix_suggestion": "pip install kafka"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        }
      ],
      "classes": [
        "TaskWorker"
      ],
      "functions": [
        "signal_handler",
        "main",
        "initialize",
        "process_task",
        "update_task_status",
        "handle_task_event",
        "run",
        "shutdown"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "input_validation.py",
      "name": "input_validation",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: starlette",
          "fix_suggestion": "pip install starlette"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "InputValidationMiddleware"
      ],
      "functions": [
        "dispatch"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "routes.py",
      "name": "routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AgentRegistrationRequest",
        "AgentReportRequest",
        "TaskAssignmentRequest",
        "ApprovalRequest"
      ],
      "functions": [
        "get_agent_manager",
        "register_agent",
        "activate_agent",
        "deactivate_agent",
        "suspend_agent",
        "freeze_agent",
        "delete_agent",
        "get_agent_status",
        "receive_agent_report",
        "assign_task"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "lifecycle_manager.py",
      "name": "lifecycle_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AgentLifecycleManager"
      ],
      "functions": [
        "activate_agent",
        "deactivate_agent",
        "transition_state"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "sqlalchemy_models.py",
      "name": "sqlalchemy_models",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "AgentStatus",
        "TaskStatus",
        "TaskPriority",
        "User",
        "Agent",
        "Task"
      ],
      "functions": [],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "001_initial_schema.py",
      "name": "001_initial_schema",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        }
      ],
      "classes": [
        "Migration"
      ],
      "functions": [
        "up",
        "down",
        "validate_preconditions",
        "validate_postconditions"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "complete_file_routes.py",
      "name": "complete_file_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "FileType",
        "FileStatus",
        "ProcessingType",
        "FileConfig",
        "FileUploadRequest",
        "FileResponse",
        "FileSearchRequest",
        "BulkOperation",
        "FileRecord",
        "User",
        "FileManager",
        "Settings"
      ],
      "functions": [
        "get_current_user",
        "startup_event",
        "upload_file",
        "list_files",
        "search_files",
        "get_file_info",
        "download_file",
        "delete_file",
        "bulk_file_operation",
        "files_health_check"
      ],
      "activation_blockers": [
        "8 missing dependencies"
      ]
    },
    {
      "path": "unified_system.py",
      "name": "unified_system",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: project_agent",
          "fix_suggestion": "pip install project_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: learning_agent",
          "fix_suggestion": "pip install learning_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_manager",
          "fix_suggestion": "pip install agent_manager"
        }
      ],
      "classes": [
        "UnifiedAgentSystem",
        "GenericAgent"
      ],
      "functions": [
        "main",
        "startup",
        "shutdown",
        "get_system_status",
        "submit_task",
        "get_task_result",
        "signal_handler"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "db_monitoring.py",
      "name": "db_monitoring",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 207: expected 'except' or 'finally' block",
          "fix_suggestion": "Fix syntax error in file at line 207"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "main.py",
      "name": "main",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: middleware",
          "fix_suggestion": "pip install middleware"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: api",
          "fix_suggestion": "pip install api"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "UserCreate",
        "UserResponse",
        "AgentCreate",
        "AgentResponse",
        "TaskCreate",
        "TaskResponse",
        "TaskQueue",
        "AgentManager",
        "Config"
      ],
      "functions": [
        "lifespan",
        "get_current_user",
        "register",
        "login",
        "get_current_user_info",
        "create_agent",
        "list_agents",
        "get_agent",
        "agent_heartbeat",
        "create_task"
      ],
      "activation_blockers": [
        "9 missing dependencies"
      ]
    },
    {
      "path": "response_aggregator_fixed.py",
      "name": "response_aggregator_fixed",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: monitoring",
          "fix_suggestion": "pip install monitoring"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AggregationStrategy",
        "AggregationStatus",
        "ResponseMetrics",
        "AggregatedResponse",
        "AggregationRequest",
        "AggregationResult",
        "AggregationRequestSchema",
        "ResponseSubmissionSchema",
        "AggregatorConfig",
        "ProductionResponseAggregator"
      ],
      "functions": [
        "create_response_aggregator",
        "health_check",
        "validate_expected_responses",
        "initialize",
        "create_aggregation_request",
        "submit_response",
        "get_aggregation_result",
        "get_aggregator_statistics",
        "get_health_status",
        "shutdown"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "data_flow_validator.py",
      "name": "data_flow_validator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        }
      ],
      "classes": [
        "DataValidationLevel",
        "DataClassification",
        "ValidationRule",
        "DataFlowValidator"
      ],
      "functions": [
        "validate_data_flow",
        "register_schema_validator",
        "register_validation_callback",
        "classify_data"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "enhanced_api_endpoints.py",
      "name": "enhanced_api_endpoints",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: enhanced_learning_agent",
          "fix_suggestion": "pip install enhanced_learning_agent"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: learning_agent_database",
          "fix_suggestion": "pip install learning_agent_database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "KnowledgeRequestModel",
        "AgentCapabilityUpdate",
        "ExternalSourceConfig",
        "PeerSharingRequest"
      ],
      "functions": [
        "startup",
        "shutdown",
        "request_knowledge",
        "get_request_status",
        "update_agent_capability",
        "get_agent_capability",
        "search_by_expertise",
        "track_knowledge_contribution",
        "track_knowledge_usage",
        "facilitate_peer_sharing"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "knowledge_store.py",
      "name": "knowledge_store",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "KnowledgeStore"
      ],
      "functions": [
        "store",
        "get",
        "search",
        "update",
        "delete",
        "get_by_category",
        "get_by_tags",
        "get_statistics",
        "get_index",
        "rebuild_index"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "learning_system.py",
      "name": "learning_system",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: continuous_learning",
          "fix_suggestion": "pip install continuous_learning"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: external_learning",
          "fix_suggestion": "pip install external_learning"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pattern_recognition",
          "fix_suggestion": "pip install pattern_recognition"
        }
      ],
      "classes": [
        "LearningTaskType",
        "PatternType",
        "EntityType",
        "RelationType",
        "LearningResult",
        "UnifiedLearningSystem"
      ],
      "functions": [
        "create_unified_learning_system",
        "initialize",
        "learn_from_data",
        "retrieve_knowledge",
        "shutdown"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "static_analysis_examples.py",
      "name": "static_analysis_examples",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: nats",
          "fix_suggestion": "pip install nats-py"
        }
      ],
      "classes": [
        "StaticAnalysisClient"
      ],
      "functions": [
        "example_security_scan",
        "example_quality_check",
        "example_comprehensive_analysis",
        "example_batch_analysis",
        "example_custom_rules",
        "example_caching",
        "example_api_endpoint_analysis",
        "example_cicd_integration",
        "main",
        "connect"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "task_scheduler.py",
      "name": "task_scheduler",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "TaskScheduler"
      ],
      "functions": [
        "start",
        "stop",
        "schedule_task",
        "get_agent_tasks",
        "cancel_agent_tasks"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "websocket_manager.py",
      "name": "websocket_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        }
      ],
      "classes": [
        "WebSocketManager"
      ],
      "functions": [
        "initialize",
        "connect",
        "disconnect",
        "subscribe_to_project",
        "unsubscribe_from_project",
        "register_agent_connection",
        "send_to_connection",
        "broadcast_to_project",
        "send_to_agent",
        "broadcast_to_all_agents"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "generate_component_inventory.py",
      "name": "generate_component_inventory",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ComponentInfo",
        "PlatformAuditor"
      ],
      "functions": [
        "main",
        "scan_repository",
        "categorize_file",
        "extract_imports",
        "extract_public_api",
        "determine_state",
        "find_test_file",
        "analyze_component",
        "extract_purpose",
        "find_orphaned_files"
      ],
      "activation_blockers": []
    },
    {
      "path": "fastapi_integration.py",
      "name": "fastapi_integration",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        }
      ],
      "classes": [],
      "functions": [
        "lifespan",
        "setup_read_replicas",
        "setup_query_monitoring",
        "setup_health_monitoring",
        "setup_backup_manager",
        "get_database_session",
        "root",
        "health_check",
        "database_health",
        "health_summary"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "middleware.py",
      "name": "middleware",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: starlette",
          "fix_suggestion": "pip install starlette"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "SecurityMiddleware"
      ],
      "functions": [
        "dispatch"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "notification_manager.py",
      "name": "notification_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "NotificationPriority",
        "NotificationChannel",
        "NotificationManager"
      ],
      "functions": [
        "send_notification",
        "get_user_notifications",
        "mark_notification_read"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "pattern_recognizer.py",
      "name": "pattern_recognizer",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "PatternRecognizer"
      ],
      "functions": [
        "detect",
        "extract_patterns",
        "analyze_interaction"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "file_routes_complete.py",
      "name": "file_routes_complete",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: PIL",
          "fix_suggestion": "pip install PIL"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "FileUploadRequest",
        "FileUploadResponse",
        "FileMetadataResponse",
        "FileListResponse",
        "FileShareRequest",
        "FileService",
        "Config",
        "Config"
      ],
      "functions": [
        "upload_file",
        "download_file",
        "get_file_metadata",
        "list_files",
        "delete_file",
        "get_thumbnail",
        "share_file",
        "validate_folder_path",
        "validate_tags",
        "validate_permission"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "config.py",
      "name": "config",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic_settings",
          "fix_suggestion": "pip install pydantic_settings"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "Settings",
        "ProjectAgentSettings",
        "Config"
      ],
      "functions": [
        "validate_database_url",
        "validate_jwt_secret",
        "validate_jwt_secret",
        "validate_quality_threshold",
        "validate_quality_weights",
        "parse_cors_origins",
        "parse_kafka_servers",
        "ensure_storage_path_exists",
        "ensure_log_directory_exists",
        "get_agent_urls"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "gateway.py",
      "name": "gateway",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: cachetools",
          "fix_suggestion": "pip install cachetools"
        }
      ],
      "classes": [
        "EnterpriseAPIGateway",
        "APIVersionManager",
        "RateLimiter",
        "RequestResponseTransformer",
        "APIMonetization",
        "DeveloperPortal"
      ],
      "functions": [
        "get_available_versions",
        "get_latest_stable_version",
        "is_version_supported",
        "is_version_deprecated",
        "health_check",
        "check_rate_limit",
        "get_rate_limit_info",
        "health_check",
        "transform_request",
        "transform_response"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "ZeroTrustConfig.py",
      "name": "ZeroTrustConfig",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ZeroTrustConfig",
        "Permission",
        "UserRecord",
        "AdvancedAuthUtils"
      ],
      "functions": [
        "require_permission",
        "oauth_login",
        "generate_rsa_jwt",
        "verify_rsa_jwt",
        "calculate_risk_score",
        "permission_checker"
      ],
      "activation_blockers": []
    },
    {
      "path": "config_manager.py",
      "name": "config_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "ConfigManager"
      ],
      "functions": [
        "start"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "monitoring.alerting.py",
      "name": "monitoring.alerting",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: slack_sdk",
          "fix_suggestion": "pip install slack_sdk"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        }
      ],
      "classes": [
        "Alert",
        "AlertRule",
        "IntelligentAlertingSystem",
        "AnomalyDetector",
        "IncidentManager"
      ],
      "functions": [
        "acknowledge_alert",
        "resolve_alert",
        "get_active_alerts",
        "get_alert_history",
        "evaluate_metrics",
        "resolve_alert",
        "acknowledge_alert",
        "is_anomaly",
        "create_incident"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "benchmark_report_generator.py",
      "name": "benchmark_report_generator",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "generate_performance_report"
      ],
      "activation_blockers": []
    },
    {
      "path": "coverage_tracker.py",
      "name": "coverage_tracker",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "CoverageTracker"
      ],
      "functions": [
        "measure_coverage",
        "track_progress",
        "get_summary"
      ],
      "activation_blockers": []
    },
    {
      "path": "production_main_app.py",
      "name": "production_main_app",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_services",
          "fix_suggestion": "pip install ymera_services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_core",
          "fix_suggestion": "pip install ymera_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_agents",
          "fix_suggestion": "pip install ymera_agents"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: routes",
          "fix_suggestion": "pip install routes"
        }
      ],
      "classes": [
        "AppState"
      ],
      "functions": [
        "lifespan",
        "add_request_id",
        "add_process_time",
        "add_security_headers",
        "validation_exception_handler",
        "ymera_exception_handler",
        "general_exception_handler",
        "get_db_manager",
        "get_cache_manager",
        "get_auth_manager"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "fix_aioredis_imports.py",
      "name": "fix_aioredis_imports",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "fix_aioredis_imports"
      ],
      "activation_blockers": []
    },
    {
      "path": "verify_deployment.py",
      "name": "verify_deployment",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: main",
          "fix_suggestion": "pip install main"
        }
      ],
      "classes": [],
      "functions": [
        "print_header",
        "print_status",
        "check_dependencies",
        "check_structure",
        "check_imports",
        "run_tests",
        "main"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "manager_client.py",
      "name": "manager_client",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        }
      ],
      "classes": [
        "ManagerClient"
      ],
      "functions": [
        "send_heartbeat",
        "register_agent",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "static_analysis_prod.py",
      "name": "static_analysis_prod",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "AnalysisType",
        "Severity",
        "Finding",
        "AnalysisResult",
        "StaticAnalysisRule",
        "StaticAnalysisAgent"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "main"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "backup_manager.py",
      "name": "backup_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        }
      ],
      "classes": [
        "BackupMetadata",
        "BackupManager"
      ],
      "functions": [
        "main",
        "to_dict",
        "from_dict",
        "create_backup",
        "restore_backup",
        "list_backups",
        "cleanup_old_backups",
        "verify_backup"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "logger.py",
      "name": "logger",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pythonjsonlogger",
          "fix_suggestion": "pip install pythonjsonlogger"
        }
      ],
      "classes": [
        "CustomJsonFormatter"
      ],
      "functions": [
        "setup_logging",
        "add_fields"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "file_handler.py",
      "name": "file_handler",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "FileHandler"
      ],
      "functions": [
        "upload_file",
        "download_file",
        "delete_file",
        "get_file_info"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "performance_monitor.py",
      "name": "performance_monitor",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [
        "PerformanceMonitor",
        "RequestTracker",
        "HealthChecker"
      ],
      "functions": [
        "start_monitoring",
        "stop_monitoring",
        "collect_metrics",
        "get_performance_report",
        "track_request",
        "get_stats",
        "register_check",
        "run_health_checks"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "integration.py",
      "name": "integration",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        }
      ],
      "classes": [
        "UnifiedDatabaseManager"
      ],
      "functions": [
        "initialize",
        "close",
        "get_session",
        "health_check"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "audit_manager.py",
      "name": "audit_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "AuditType",
        "AuditScope",
        "AuditOutcome",
        "AuditFinding",
        "AuditRecord",
        "AuditManager"
      ],
      "functions": [
        "initiate_audit",
        "schedule_regular_audits",
        "get_audit_report"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "circuit_breaker.py",
      "name": "circuit_breaker",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "CircuitState",
        "CircuitBreakerConfig",
        "CircuitBreakerOpenError",
        "CircuitBreaker",
        "CircuitBreakerRegistry"
      ],
      "functions": [
        "call",
        "call_with_fallback",
        "get_metrics",
        "reset",
        "get_or_create",
        "get",
        "get_all_metrics",
        "reset_all",
        "list_open_breakers"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "project.py",
      "name": "project",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "ProjectStatus",
        "ProjectPhase",
        "Project",
        "Config"
      ],
      "functions": [],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "protocol.py",
      "name": "protocol",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "MessageType",
        "ProtocolVersion",
        "AgentMessage",
        "ProtocolManager"
      ],
      "functions": [
        "validate_payload_schema",
        "create_message",
        "validate_message",
        "process_message"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "submission.py",
      "name": "submission",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "SubmissionStatus",
        "IssueSeverity",
        "QualityFeedback",
        "AgentSubmission",
        "Config"
      ],
      "functions": [],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "enhanced_chat_routes.py",
      "name": "enhanced_chat_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_services",
          "fix_suggestion": "pip install ymera_services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_core",
          "fix_suggestion": "pip install ymera_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_agents",
          "fix_suggestion": "pip install ymera_agents"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "ChatMode",
        "MessageType",
        "MessageStatus",
        "CreateSessionRequest",
        "SendMessageRequest",
        "UpdateSessionRequest",
        "SessionResponse",
        "MessageResponse",
        "ChatAnalyticsResponse",
        "ChatConnectionManager",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "get_current_user_ws",
        "get_current_user",
        "validate_session_access",
        "websocket_endpoint",
        "process_and_stream_response",
        "create_session",
        "get_user_sessions",
        "get_session",
        "update_session",
        "delete_session"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "report_enforcer.py",
      "name": "report_enforcer",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "ReportingEnforcer"
      ],
      "functions": [
        "check_reporting_compliance"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "requirements_and_env.py",
      "name": "requirements_and_env",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 5: invalid syntax",
          "fix_suggestion": "Fix syntax error in file at line 5"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "auto_fix_syntax.py",
      "name": "auto_fix_syntax",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "fix_curly_quotes",
        "fix_pytest_ini_py",
        "add_missing_except_block",
        "fix_file_fragments",
        "main"
      ],
      "activation_blockers": []
    },
    {
      "path": "query_optimization.py",
      "name": "query_optimization",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "QueryPerformanceMonitor",
        "IndexAnalyzer",
        "QueryOptimizer"
      ],
      "functions": [
        "register_listeners",
        "get_query_statistics",
        "get_slow_queries",
        "clear_statistics",
        "find_missing_indexes",
        "analyze_index_usage",
        "find_unused_indexes",
        "analyze_query_plan",
        "get_expensive_queries",
        "update_statistics"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "api.gateway.py",
      "name": "api.gateway",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: cachetools",
          "fix_suggestion": "pip install cachetools"
        }
      ],
      "classes": [
        "EnterpriseAPIGateway",
        "APIVersionManager",
        "RateLimiter",
        "RequestResponseTransformer",
        "APIMonetization",
        "DeveloperPortal"
      ],
      "functions": [
        "get_available_versions",
        "get_latest_stable_version",
        "is_version_supported",
        "is_version_deprecated",
        "health_check",
        "check_rate_limit",
        "get_rate_limit_info",
        "health_check",
        "transform_request",
        "transform_response"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "chat_interface.py",
      "name": "chat_interface",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_orchestrator",
          "fix_suggestion": "pip install agent_orchestrator"
        }
      ],
      "classes": [
        "ChatInterface"
      ],
      "functions": [
        "initialize",
        "process_message",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "auth.py",
      "name": "auth",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: passlib",
          "fix_suggestion": "pip install passlib"
        }
      ],
      "classes": [
        "AuthService"
      ],
      "functions": [
        "verify_password",
        "get_password_hash",
        "create_access_token",
        "decode_access_token",
        "get_current_user"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "database.py",
      "name": "database",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        }
      ],
      "classes": [
        "Database"
      ],
      "functions": [
        "initialize",
        "get_connection",
        "execute_query",
        "execute_single",
        "execute_command",
        "health_check",
        "close"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "rate_limiter.py",
      "name": "rate_limiter",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: starlette",
          "fix_suggestion": "pip install starlette"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        }
      ],
      "classes": [
        "RateLimitMiddleware"
      ],
      "functions": [
        "dispatch"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "insight_generator.py",
      "name": "insight_generator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "InsightGenerator"
      ],
      "functions": [
        "generate"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "monitoring.metrics.py",
      "name": "monitoring.metrics",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: elasticsearch",
          "fix_suggestion": "pip install elasticsearch"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        }
      ],
      "classes": [
        "AdvancedMetricsCollector",
        "StructuredLogger",
        "DistributedTracer",
        "ELKIntegration"
      ],
      "functions": [
        "start_metrics_server",
        "record_http_request",
        "record_db_query",
        "record_business_event",
        "record_error",
        "collect_system_metrics",
        "info",
        "error",
        "warning",
        "start_span"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "main_app_production.py",
      "name": "main_app_production",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: uvicorn",
          "fix_suggestion": "pip install uvicorn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [],
      "functions": [
        "lifespan",
        "log_requests",
        "global_exception_handler",
        "not_found_handler",
        "root",
        "health_check",
        "metrics"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "integration_preparation.py",
      "name": "integration_preparation",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "IntegrationPreparer"
      ],
      "functions": [
        "prepare_for_integration",
        "create_api_gateway",
        "setup_communication_layer",
        "create_unified_config",
        "generate_deployment_packages",
        "create_integration_docs"
      ],
      "activation_blockers": []
    },
    {
      "path": "complete_deployment_script.py",
      "name": "complete_deployment_script",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "Colors",
        "ProductionDeployment"
      ],
      "functions": [
        "print_header",
        "print_success",
        "print_error",
        "print_warning",
        "print_info",
        "print_step",
        "main",
        "create_backup",
        "create_directories",
        "fix_database_module"
      ],
      "activation_blockers": []
    },
    {
      "path": "tests.conftest.py",
      "name": "tests.conftest",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: src",
          "fix_suggestion": "pip install src"
        }
      ],
      "classes": [],
      "functions": [
        "event_loop",
        "test_engine",
        "test_session",
        "test_client",
        "test_user",
        "auth_headers",
        "mock_redis",
        "mock_kafka",
        "mock_elasticsearch",
        "override_get_db"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "security_scanner.py",
      "name": "security_scanner",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "SecurityScanner",
        "SecurityAuditor"
      ],
      "functions": [
        "scan_directory",
        "check_dependencies",
        "run_full_audit"
      ],
      "activation_blockers": []
    },
    {
      "path": "log_manager.py",
      "name": "log_manager",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ProjectLogManager"
      ],
      "functions": [
        "initialize",
        "log_project_event",
        "get_project_logs",
        "track_file_location",
        "get_file_location",
        "get_project_files",
        "log_module_integration",
        "get_module_logs",
        "log_knowledge_request",
        "log_knowledge_response"
      ],
      "activation_blockers": []
    },
    {
      "path": "project_integrator.py",
      "name": "project_integrator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: quality_verifier",
          "fix_suggestion": "pip install quality_verifier"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "ProjectIntegrator"
      ],
      "functions": [
        "initialize",
        "integrate_submission",
        "calculate_project_progress",
        "estimate_completion",
        "start_background_integration",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "enhanced_analysis_routes.py",
      "name": "enhanced_analysis_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_services",
          "fix_suggestion": "pip install ymera_services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_core",
          "fix_suggestion": "pip install ymera_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_agents",
          "fix_suggestion": "pip install ymera_agents"
        }
      ],
      "classes": [
        "AnalysisType",
        "AnalysisStatus",
        "AnalysisPriority",
        "CodeLanguage",
        "AnalysisRequestBase",
        "CodeAnalysisRequest",
        "RepositoryAnalysisRequest",
        "FileAnalysisRequest",
        "BatchAnalysisRequest",
        "QualityMetrics",
        "SecurityIssue",
        "PerformanceInsight",
        "EnhancementSuggestion",
        "LearningInsights",
        "AnalysisResult",
        "AnalysisListResponse",
        "BatchAnalysisResponse",
        "Config",
        "Config"
      ],
      "functions": [
        "get_current_user",
        "validate_rate_limit",
        "validate_analysis_limits",
        "track_metrics",
        "analyze_code_direct",
        "get_analysis_result",
        "list_user_analyses",
        "delete_analysis",
        "get_user_analysis_stats",
        "process_code_analysis_safe"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "SIEMIntegration.py",
      "name": "SIEMIntegration",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "SIEMIntegration",
        "ComplianceAuditLogger"
      ],
      "functions": [
        "gdpr_export_data",
        "gdpr_delete_data",
        "health_check",
        "add_security_headers",
        "send_event",
        "log_gdpr_event",
        "log_hipaa_event"
      ],
      "activation_blockers": []
    },
    {
      "path": "read_replica_config.py",
      "name": "read_replica_config",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "DatabaseType",
        "LoadBalancingStrategy",
        "ReadReplicaManager",
        "DatabaseRouter",
        "ShardingManager"
      ],
      "functions": [
        "create_replica_setup",
        "initialize",
        "get_write_session",
        "get_read_session",
        "health_check",
        "dispose",
        "session",
        "get_shard_for_key",
        "get_session",
        "broadcast_query"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "PerformanceMonitor.py",
      "name": "PerformanceMonitor",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "PerformanceMonitor",
        "SecurityMetrics",
        "BusinessMetrics"
      ],
      "functions": [
        "detailed_health_check",
        "metrics_middleware",
        "track_response_time",
        "record_security_event",
        "record_user_activity",
        "calculate_user_satisfaction"
      ],
      "activation_blockers": []
    },
    {
      "path": "continuous_learning.py",
      "name": "continuous_learning",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "DriftType",
        "DriftDetection",
        "ContinuousLearningEngine"
      ],
      "functions": [
        "set_learning_engine",
        "set_knowledge_base",
        "set_pattern_recognizer",
        "start",
        "stop",
        "update_with_feedback",
        "get_drift_history",
        "get_statistics"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "generate_architecture_docs.py",
      "name": "generate_architecture_docs",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ArchitectureDocGenerator"
      ],
      "functions": [
        "main",
        "generate_system_architecture_diagram",
        "generate_database_schema_diagram",
        "generate_api_route_map",
        "generate_agent_interaction_flow",
        "generate_deployment_architecture",
        "generate_architecture_markdown",
        "run"
      ],
      "activation_blockers": []
    },
    {
      "path": "generate_coverage_report.py",
      "name": "generate_coverage_report",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "generate_coverage_report"
      ],
      "activation_blockers": []
    },
    {
      "path": "monitoring_routes.py",
      "name": "monitoring_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: services",
          "fix_suggestion": "pip install services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        }
      ],
      "classes": [],
      "functions": [
        "health_check",
        "detailed_health_check",
        "metrics",
        "get_security_threats",
        "resolve_security_threat",
        "get_reporting_compliance"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "monitoring.health.py",
      "name": "monitoring.health",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: kafka",
          "fix_suggestion": "pip install kafka"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: asyncpg",
          "fix_suggestion": "pip install asyncpg"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: httpx",
          "fix_suggestion": "pip install httpx"
        }
      ],
      "classes": [
        "HealthCheckResult",
        "SLAStatus",
        "HealthCheckManager"
      ],
      "functions": [
        "health_check",
        "detailed_health_check",
        "startup_health_check",
        "readiness_health_check",
        "perform_health_checks",
        "check_database",
        "check_redis",
        "check_kafka",
        "check_external_apis",
        "check_storage"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "run_comprehensive_e2e_tests.py",
      "name": "run_comprehensive_e2e_tests",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: main",
          "fix_suggestion": "pip install main"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "Colors"
      ],
      "functions": [
        "print_header",
        "print_section",
        "log_test",
        "test_environment",
        "test_module_structure",
        "test_database_components",
        "test_api_endpoints",
        "test_agent_systems",
        "test_engine_components",
        "test_configuration"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "mandatory_reporting.py",
      "name": "mandatory_reporting",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "MandatoryReportingEnforcer"
      ],
      "functions": [
        "start_monitoring",
        "process_agent_report"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "HSMCrypto.py",
      "name": "HSMCrypto",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "HSMCrypto",
        "EncryptedField",
        "UserRecord",
        "DLPEngine"
      ],
      "functions": [
        "dlp_middleware",
        "encrypt_data",
        "decrypt_data",
        "ssn",
        "ssn",
        "inspect_content",
        "anonymize_content"
      ],
      "activation_blockers": []
    },
    {
      "path": "final_verification.py",
      "name": "final_verification",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "FinalVerifier"
      ],
      "functions": [
        "main",
        "verify_complete_platform",
        "verify_analysis_complete",
        "verify_enhancement_complete",
        "verify_testing_complete",
        "verify_integration_ready",
        "verify_deployment_ready",
        "verify_expansion_ready",
        "generate_success_report",
        "generate_issues_report"
      ],
      "activation_blockers": []
    },
    {
      "path": "knowledge_manager.py",
      "name": "knowledge_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "KnowledgeManager"
      ],
      "functions": [
        "initialize",
        "create_knowledge_item",
        "search_knowledge",
        "get_knowledge_item",
        "update_knowledge_scores",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "session_management.py",
      "name": "session_management",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "SessionData",
        "SessionManager",
        "TokenData",
        "TokenManager"
      ],
      "functions": [
        "create_session",
        "get_session",
        "update_activity",
        "delete_session",
        "delete_all_user_sessions",
        "get_user_sessions",
        "validate_session_security",
        "create_access_token",
        "create_refresh_token",
        "verify_token"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "models.py",
      "name": "models",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "User",
        "Experience",
        "KnowledgeItem",
        "Config"
      ],
      "functions": [
        "validate_email",
        "validate_feedback"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "production_config.py",
      "name": "production_config",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic_settings",
          "fix_suggestion": "pip install pydantic_settings"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "Environment",
        "LogLevel",
        "Settings",
        "DevelopmentSettings",
        "StagingSettings",
        "ProductionSettings",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "get_settings",
        "generate_env_template",
        "validate_database_url",
        "validate_environment",
        "get_database_url",
        "is_production",
        "is_development"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "comprehensive_component_test.py",
      "name": "comprehensive_component_test",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ComponentIssue",
        "ComponentResult",
        "ComponentTester"
      ],
      "functions": [
        "main",
        "find_components",
        "analyze_syntax",
        "extract_imports",
        "extract_classes_and_functions",
        "check_import_errors",
        "test_component",
        "generate_report",
        "run_tests"
      ],
      "activation_blockers": []
    },
    {
      "path": "configuration_manager.py",
      "name": "configuration_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "ConfigurationManager"
      ],
      "functions": [
        "initialize",
        "load_all_configs",
        "load_secrets",
        "get",
        "get_secret",
        "set"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "api_extensions.py",
      "name": "api_extensions",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: advanced_features",
          "fix_suggestion": "pip install advanced_features"
        }
      ],
      "classes": [],
      "functions": [
        "websocket_endpoint",
        "handle_task_update",
        "handle_agent_status",
        "create_batch_tasks",
        "get_task_statistics",
        "execute_agent_command",
        "get_available_agents",
        "detailed_health_check",
        "get_live_metrics",
        "get_analytics_summary"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "api_gateway_init.py",
      "name": "api_gateway_init",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: websocket_routes",
          "fix_suggestion": "pip install websocket_routes"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_api_gateway",
          "fix_suggestion": "pip install ymera_api_gateway"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_file_routes",
          "fix_suggestion": "pip install ymera_file_routes"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_agent_routes",
          "fix_suggestion": "pip install ymera_agent_routes"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: project_routes",
          "fix_suggestion": "pip install project_routes"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_auth_routes",
          "fix_suggestion": "pip install ymera_auth_routes"
        }
      ],
      "classes": [],
      "functions": [
        "verify_imports"
      ],
      "activation_blockers": [
        "6 missing dependencies"
      ]
    },
    {
      "path": "advanced_features.py",
      "name": "advanced_features",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: prometheus_client",
          "fix_suggestion": "pip install prometheus_client"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [
        "ConnectionManager",
        "CacheManager",
        "SecurityManager",
        "TaskScheduler",
        "HealthMonitor",
        "NotificationManager",
        "AnalyticsEngine"
      ],
      "functions": [
        "connect",
        "disconnect",
        "send_to_user",
        "broadcast_to_all",
        "get",
        "set",
        "delete",
        "invalidate_pattern",
        "rate_limit",
        "check_api_key"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "report_generator.py",
      "name": "report_generator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "ReportGenerator"
      ],
      "functions": [
        "initialize",
        "generate_project_report",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "backup_recovery.py",
      "name": "backup_recovery",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: azure",
          "fix_suggestion": "pip install azure"
        }
      ],
      "classes": [
        "AzureBackupManager",
        "DisasterRecoveryManager"
      ],
      "functions": [
        "create_long_term_retention_policy",
        "list_long_term_backups",
        "create_manual_backup",
        "restore_to_point_in_time",
        "restore_from_ltr_backup",
        "get_retention_policy",
        "configure_geo_replication",
        "create_recovery_plan",
        "execute_failover",
        "test_recovery"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "analytics.py",
      "name": "analytics",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "ReportingAnalytics"
      ],
      "functions": [
        "get_agent_report_stats"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "quickstart_script.py",
      "name": "quickstart_script",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "Colors",
        "QuickStart"
      ],
      "functions": [
        "print_header",
        "print_success",
        "print_error",
        "print_warning",
        "print_info",
        "main",
        "run_command",
        "check_prerequisites",
        "create_env_file",
        "install_dependencies"
      ],
      "activation_blockers": []
    },
    {
      "path": "ml_pipeline.py",
      "name": "ml_pipeline",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sklearn",
          "fix_suggestion": "pip install sklearn"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "MLPipeline"
      ],
      "functions": [
        "initialize",
        "generate_response",
        "batch_process_experiences",
        "health_check",
        "shutdown"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "production_auth_routes.py",
      "name": "production_auth_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: app",
          "fix_suggestion": "pip install app"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "UserRegistration",
        "UserLogin",
        "TokenRefresh",
        "PasswordReset",
        "PasswordResetConfirm",
        "AuthResponse",
        "User",
        "UserSession",
        "Settings"
      ],
      "functions": [
        "hash_password",
        "verify_password",
        "create_access_token",
        "create_refresh_token",
        "verify_token",
        "get_current_user",
        "register_user",
        "login_user",
        "refresh_access_token",
        "logout_user"
      ],
      "activation_blockers": [
        "7 missing dependencies"
      ]
    },
    {
      "path": "ymera_api_system.py",
      "name": "ymera_api_system",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: config",
          "fix_suggestion": "pip install config"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: google",
          "fix_suggestion": "pip install google"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: anthropic",
          "fix_suggestion": "pip install anthropic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: groq",
          "fix_suggestion": "pip install groq"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: openai",
          "fix_suggestion": "pip install openai"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: security",
          "fix_suggestion": "pip install security"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: database",
          "fix_suggestion": "pip install database"
        }
      ],
      "classes": [
        "AIProvider",
        "ProviderStatus",
        "APIKeyType",
        "ProviderConfig",
        "MCPConfig",
        "ProviderRegistration",
        "MCPRegistration",
        "AIRequest",
        "AIResponse",
        "ProviderHealthCheck",
        "UserProviderConfig",
        "UserMCPConfig",
        "APIUsageLog",
        "BaseProviderClient",
        "OpenAIClient",
        "AnthropicClient",
        "GeminiClient",
        "GroqClient",
        "DeepSeekClient",
        "AzureOpenAIClient",
        "OllamaClient",
        "MistralClient",
        "MCPClient",
        "ProviderManager",
        "Config"
      ],
      "functions": [
        "startup_event",
        "register_provider",
        "register_mcp",
        "list_providers",
        "delete_provider",
        "update_provider",
        "generate_response",
        "stream_response",
        "check_health",
        "get_usage_stats"
      ],
      "activation_blockers": [
        "14 missing dependencies"
      ]
    },
    {
      "path": "run_platform_audit.py",
      "name": "run_platform_audit",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "print_banner",
        "print_phase",
        "run_component_inventory",
        "run_testing_quality_audit",
        "run_architecture_docs",
        "print_summary",
        "main"
      ],
      "activation_blockers": []
    },
    {
      "path": "pattern_recognition.py",
      "name": "pattern_recognition",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        }
      ],
      "classes": [
        "PatternType",
        "Pattern",
        "PatternRecognitionEngine"
      ],
      "functions": [
        "to_dict",
        "detect_patterns",
        "get_pattern",
        "get_all_patterns",
        "get_pattern_statistics",
        "clear_old_patterns"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "kg_fixed.py",
      "name": "kg_fixed",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: numpy",
          "fix_suggestion": "pip install numpy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: networkx",
          "fix_suggestion": "pip install networkx"
        }
      ],
      "classes": [
        "KnowledgeGraphSettings",
        "NodeType",
        "KnowledgeGraphConfig",
        "KnowledgeItem",
        "KnowledgeQuery",
        "KnowledgeSearchResult",
        "KnowledgeEmbedding",
        "KnowledgeGraph",
        "KnowledgeGraphError",
        "NodeNotFoundError",
        "ConnectionError",
        "QueryError"
      ],
      "functions": [
        "create_knowledge_graph",
        "validate_knowledge_item",
        "health_check",
        "demo_knowledge_graph",
        "to_dict",
        "generate_embedding",
        "calculate_similarity",
        "initialize",
        "add_knowledge_item",
        "add_knowledge_batch"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "db_config.py",
      "name": "db_config",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "DatabaseConfig",
        "DatabaseManager"
      ],
      "functions": [
        "get_db",
        "init_db",
        "close_db",
        "get_connection_string",
        "initialize",
        "get_session",
        "health_check",
        "dispose",
        "receive_connect",
        "receive_checkout"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "resource_allocator.py",
      "name": "resource_allocator",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: agent_registry",
          "fix_suggestion": "pip install agent_registry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "ResourceType",
        "ResourceQuota",
        "AgentResources",
        "ResourceAllocation",
        "ResourceAllocator"
      ],
      "functions": [
        "fits_within",
        "available",
        "utilization_percent",
        "start",
        "stop",
        "register_agent_resources",
        "update_agent_resources",
        "deregister_agent_resources",
        "allocate_resources",
        "release_resources"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "ProductionConfig.py",
      "name": "ProductionConfig",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ProductionConfig"
      ],
      "functions": [
        "validate_production_config",
        "init_config",
        "create_app"
      ],
      "activation_blockers": []
    },
    {
      "path": "metrics_collector_fixed.py",
      "name": "metrics_collector_fixed",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: redis",
          "fix_suggestion": "pip install redis"
        }
      ],
      "classes": [
        "MetricType",
        "MetricScope",
        "MetricPoint",
        "SystemResourceMetrics",
        "AgentPerformanceMetrics",
        "LearningEngineMetrics",
        "OrchestrationMetrics",
        "MetricsAggregator",
        "MetricsCollector"
      ],
      "functions": [
        "to_dict",
        "add_metric",
        "get_statistics",
        "initialize",
        "start_collection",
        "stop_collection",
        "get_metrics_summary"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "live_chatting_manager.py",
      "name": "live_chatting_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: websockets",
          "fix_suggestion": "pip install websockets"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: opentelemetry",
          "fix_suggestion": "pip install opentelemetry"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: base_agent",
          "fix_suggestion": "pip install base_agent"
        }
      ],
      "classes": [
        "ChatSessionStatus",
        "MessageType",
        "SessionType",
        "ChatMessage",
        "ChatSession",
        "UserConnection",
        "LiveChattingManager"
      ],
      "functions": [
        "start",
        "handle_websocket"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "comprehensive_e2e_test.py",
      "name": "comprehensive_e2e_test",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: database_core_integrated",
          "fix_suggestion": "pip install database_core_integrated"
        }
      ],
      "classes": [],
      "functions": [
        "log_result",
        "test_category",
        "test_environment",
        "test_core_module",
        "test_file_structure",
        "test_database_init",
        "test_models",
        "test_migration_system",
        "test_operations_scripts",
        "test_documentation"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "access_control.py",
      "name": "access_control",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: core",
          "fix_suggestion": "pip install core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "AgentAccessController"
      ],
      "functions": [
        "create_agent_credentials",
        "check_permission",
        "grant_permission",
        "revoke_permission",
        "revoke_agent_access",
        "revoke_all_access"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "gateway_routing_fixed.py",
      "name": "gateway_routing_fixed",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiofiles",
          "fix_suggestion": "pip install aiofiles"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: aiohttp",
          "fix_suggestion": "pip install aiohttp"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        }
      ],
      "classes": [
        "ServiceStatus",
        "RoutingStrategy",
        "ServiceEndpoint",
        "RoutingRule",
        "CircuitBreaker",
        "ServiceRegistry",
        "LoadBalancer",
        "RequestRouter",
        "FileManager",
        "WebSocketManager",
        "YMERAAPIGateway"
      ],
      "functions": [
        "create_gateway",
        "call",
        "register_service",
        "unregister_service",
        "get_healthy_endpoints",
        "start_health_checks",
        "stop_health_checks",
        "select_endpoint",
        "add_route",
        "find_route"
      ],
      "activation_blockers": [
        "5 missing dependencies"
      ]
    },
    {
      "path": "ServiceRegistry.py",
      "name": "ServiceRegistry",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: azure",
          "fix_suggestion": "pip install azure"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: consul",
          "fix_suggestion": "pip install consul"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: elasticsearch",
          "fix_suggestion": "pip install elasticsearch"
        }
      ],
      "classes": [
        "ServiceRegistry",
        "MicroService",
        "AuthenticationService",
        "ProjectManagementService",
        "TaskOrchestrationService",
        "FileManagementService",
        "NotificationService",
        "AuditService",
        "AnalyticsService",
        "IntegrationService"
      ],
      "functions": [
        "init_consul",
        "register_service",
        "discover_service",
        "call_service",
        "health_check",
        "authenticate_user",
        "validate_token",
        "create_project",
        "get_project",
        "init_workers"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "integrations.manager.py",
      "name": "integrations.manager",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 201: invalid syntax",
          "fix_suggestion": "Fix syntax error in file at line 201"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "security_monitor.py",
      "name": "security_monitor",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "EnhancedSecurityMonitor"
      ],
      "functions": [
        "start_monitoring",
        "analyze_agent_report",
        "scan_for_threats"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "fix_tracker.py",
      "name": "fix_tracker",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "FixTracker"
      ],
      "functions": [
        "add_fix",
        "save",
        "get_summary"
      ],
      "activation_blockers": []
    },
    {
      "path": "request_tracking.py",
      "name": "request_tracking",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: starlette",
          "fix_suggestion": "pip install starlette"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "RequestTrackingMiddleware"
      ],
      "functions": [
        "dispatch"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "documentation.py",
      "name": "documentation",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [],
      "functions": [
        "setup_documentation",
        "get_custom_openapi",
        "custom_swagger_ui_html",
        "redoc_html",
        "get_openapi_endpoint"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "knowledge_base.py",
      "name": "knowledge_base",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "KnowledgeEntry",
        "KnowledgeBase"
      ],
      "functions": [
        "to_dict",
        "initialize_storage",
        "store",
        "retrieve",
        "search",
        "semantic_search",
        "add_relationship",
        "get_related",
        "get_by_category",
        "get_by_tags"
      ],
      "activation_blockers": []
    },
    {
      "path": "ymera_enhanced_auth.py",
      "name": "ymera_enhanced_auth",
      "category": "utilitie",
      "status": "syntax_error",
      "can_activate": false,
      "issues": [
        {
          "type": "syntax_error",
          "message": "Syntax error at line 999: unterminated string literal (detected at line 999)",
          "fix_suggestion": "Fix syntax error in file at line 999"
        }
      ],
      "classes": [],
      "functions": [],
      "activation_blockers": [
        "Syntax error must be fixed"
      ]
    },
    {
      "path": "example_setup.py",
      "name": "example_setup",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: DATABASE_CORE",
          "fix_suggestion": "pip install DATABASE_CORE"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [],
      "functions": [
        "setup_example_data",
        "cleanup_example",
        "main"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "chat_handler.py",
      "name": "chat_handler",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "ChatHandler"
      ],
      "functions": [
        "process_message"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "enhanced_ai_routes.py",
      "name": "enhanced_ai_routes",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_services",
          "fix_suggestion": "pip install ymera_services"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: ymera_core",
          "fix_suggestion": "pip install ymera_core"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: pydantic",
          "fix_suggestion": "pip install pydantic"
        }
      ],
      "classes": [
        "AIProvider",
        "ChatRequest",
        "AIResponse",
        "EmbeddingRequest",
        "EmbeddingResponse",
        "KibanaAlertRequest",
        "KibanaAlertResponse",
        "KibanaDashboardRequest",
        "KibanaResponse",
        "Config"
      ],
      "functions": [
        "get_current_user",
        "chat_completion",
        "generate_embeddings",
        "list_providers",
        "get_ai_usage",
        "require_admin_role",
        "create_alert",
        "list_alerts",
        "update_alert",
        "delete_alert"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "message_broker.py",
      "name": "message_broker",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: aiokafka",
          "fix_suggestion": "pip install aiokafka"
        }
      ],
      "classes": [
        "MessageBroker"
      ],
      "functions": [
        "initialize",
        "publish",
        "subscribe",
        "close"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "audit_system.py",
      "name": "audit_system",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        }
      ],
      "classes": [
        "EnhancedAuditSystem"
      ],
      "functions": [
        "log_event",
        "search_audit_logs",
        "generate_compliance_report",
        "clean_old_logs"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "ProductionConfig (2).py",
      "name": "ProductionConfig (2)",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [
        "ProductionConfig"
      ],
      "functions": [
        "init_config",
        "create_app",
        "init_services",
        "shutdown_services",
        "validate",
        "startup",
        "shutdown"
      ],
      "activation_blockers": []
    },
    {
      "path": "connection_pool.py",
      "name": "connection_pool",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "DatabaseManager"
      ],
      "functions": [
        "initialize",
        "get_session",
        "close",
        "is_healthy",
        "health_check"
      ],
      "activation_blockers": [
        "3 missing dependencies"
      ]
    },
    {
      "path": "health.py",
      "name": "health",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: fastapi",
          "fix_suggestion": "pip install fastapi"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: psutil",
          "fix_suggestion": "pip install psutil"
        }
      ],
      "classes": [],
      "functions": [
        "liveness",
        "readiness",
        "startup",
        "detailed_health",
        "metrics"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "quickstart.py",
      "name": "quickstart",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: DATABASE_CORE",
          "fix_suggestion": "pip install DATABASE_CORE"
        }
      ],
      "classes": [],
      "functions": [
        "quick_start"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "verify_benchmarking.py",
      "name": "verify_benchmarking",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "verify_acceptance_criteria"
      ],
      "activation_blockers": []
    },
    {
      "path": "knowledge_flow_manager.py",
      "name": "knowledge_flow_manager",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: sqlalchemy",
          "fix_suggestion": "pip install sqlalchemy"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: models",
          "fix_suggestion": "pip install models"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "KnowledgeFlowManager"
      ],
      "functions": [
        "start",
        "stop",
        "create_subscription",
        "update_subscription",
        "cancel_subscription",
        "get_agent_subscriptions",
        "notify_subscribers",
        "request_knowledge_flow",
        "broadcast_knowledge",
        "get_flow_metrics"
      ],
      "activation_blockers": [
        "4 missing dependencies"
      ]
    },
    {
      "path": "encryption.py",
      "name": "encryption",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: shared",
          "fix_suggestion": "pip install shared"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "EncryptionManager"
      ],
      "functions": [
        "encrypt",
        "decrypt",
        "hash_password",
        "generate_key"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    },
    {
      "path": "graceful_shutdown.py",
      "name": "graceful_shutdown",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: structlog",
          "fix_suggestion": "pip install structlog"
        }
      ],
      "classes": [
        "GracefulShutdown"
      ],
      "functions": [
        "initiate_shutdown",
        "wait_for_shutdown",
        "is_shutting_down"
      ],
      "activation_blockers": [
        "1 missing dependencies"
      ]
    },
    {
      "path": "coverage_gap_analyzer.py",
      "name": "coverage_gap_analyzer",
      "category": "utilitie",
      "status": "working",
      "can_activate": true,
      "issues": [],
      "classes": [],
      "functions": [
        "analyze_coverage_gaps"
      ],
      "activation_blockers": []
    },
    {
      "path": "knowledge_graph.py",
      "name": "knowledge_graph",
      "category": "utilitie",
      "status": "fixable",
      "can_activate": false,
      "issues": [
        {
          "type": "missing_dependency",
          "message": "Missing module: community",
          "fix_suggestion": "pip install community"
        },
        {
          "type": "missing_dependency",
          "message": "Missing module: networkx",
          "fix_suggestion": "pip install networkx"
        }
      ],
      "classes": [
        "EntityType",
        "RelationType",
        "Entity",
        "Relationship",
        "KnowledgeGraphEngine"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "add_entity",
        "add_relationship",
        "get_entity",
        "get_entity_by_name",
        "get_entities_by_type",
        "get_related_entities",
        "find_path",
        "find_all_paths"
      ],
      "activation_blockers": [
        "2 missing dependencies"
      ]
    }
  ],
  "missing_dependencies": {
    "nltk": 3,
    "language_tool_python": 2,
    "textstat": 3,
    "base_agent": 36,
    "spacy": 3,
    "fastapi": 47,
    "main": 4,
    "pydantic": 40,
    "sqlalchemy": 56,
    "structlog": 60,
    "models": 24,
    "knowledge_manager": 1,
    "ml_pipeline": 1,
    "database": 18,
    "opentelemetry": 28,
    "nats": 5,
    "asyncpg": 12,
    "redis": 30,
    "agent_registry": 3,
    "numpy": 25,
    "anthropic": 5,
    "qdrant_client": 2,
    "tiktoken": 2,
    "openai": 4,
    "sentence_transformers": 2,
    "agent_lifecycle_manager": 2,
    "monitoring": 10,
    "security": 7,
    "config": 13,
    "psutil": 19,
    "aiohttp": 9,
    "learning_agent_core": 2,
    "uvicorn": 10,
    "learning_agent_database": 2,
    "shared": 19,
    "prometheus_client": 15,
    "core": 18,
    "circuitbreaker": 1,
    "tenacity": 1,
    "sklearn": 6,
    "agents": 2,
    "ai": 3,
    "starlette": 5,
    "httpx": 10,
    "middleware": 2,
    "aiofiles": 6,
    "alembic": 2,
    "communication": 1,
    "utils": 3,
    "knowledge": 1,
    "ml": 1,
    "jose": 1,
    "services": 5,
    "consul": 2,
    "editing_agent": 1,
    "websockets": 3,
    "transformers": 1,
    "torch": 1,
    "hvac": 1,
    "graphviz": 1,
    "agent_client": 1,
    "joblib": 1,
    "agent_surveillance": 1,
    "agent_orchestrator": 2,
    "tree_sitter_languages": 1,
    "esprima": 1,
    "networkx": 4,
    "pandas": 1,
    "scipy": 2,
    "task_orchestrator": 1,
    "google": 2,
    "chromadb": 1,
    "intelligence_engine": 1,
    "groq": 2,
    "config_manager": 1,
    "pinecone": 1,
    "CORE_CONFIGURATION": 1,
    "core_engine": 1,
    "kafka": 3,
    "database_core_integrated": 7,
    "prometheus_api_client": 1,
    "kubernetes": 1,
    "optimization": 1,
    "distributed": 1,
    "app": 7,
    "newrelic": 1,
    "datadog": 1,
    "splunklib": 1,
    "DATABASE_CORE": 3,
    "PIL": 2,
    "component_enhancement_workflow": 1,
    "async_timeout": 1,
    "pydantic_settings": 3,
    "learning": 1,
    "logger": 1,
    "infrastructure": 1,
    "advanced_features": 2,
    "agent_discovery": 1,
    "project_agent": 1,
    "learning_agent": 1,
    "agent_manager": 1,
    "api": 1,
    "enhanced_learning_agent": 1,
    "continuous_learning": 1,
    "external_learning": 1,
    "pattern_recognition": 1,
    "cachetools": 2,
    "slack_sdk": 1,
    "ymera_services": 4,
    "ymera_core": 4,
    "ymera_agents": 3,
    "routes": 1,
    "pythonjsonlogger": 1,
    "passlib": 1,
    "elasticsearch": 2,
    "src": 1,
    "quality_verifier": 1,
    "websocket_routes": 1,
    "ymera_api_gateway": 1,
    "ymera_file_routes": 1,
    "ymera_agent_routes": 1,
    "project_routes": 1,
    "ymera_auth_routes": 1,
    "azure": 2,
    "aiokafka": 1,
    "community": 1
  }
}