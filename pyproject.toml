[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ymera-database-core"
version = "5.0.0"
description = "YMERA Enterprise Database Core - Production-Ready Database Management System"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "YMERA Enterprise", email = "dev@ymera.com"}
]
keywords = ["database", "orm", "sqlalchemy", "async", "postgresql", "mysql", "sqlite", "enterprise"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Operating System :: OS Independent",
]

dependencies = [
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "ruff>=0.1.0",
]
api = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
]
postgresql = [
    "asyncpg>=0.29.0",
]
mysql = [
    "aiomysql>=0.2.0",
]
all = [
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
]

[project.urls]
Homepage = "https://ymera.com"
Documentation = "https://docs.ymera.com/database-core"
Repository = "https://github.com/ymera/database-core"
Issues = "https://github.com/ymera/database-core/issues"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-v --cov=DATABASE_CORE --cov-report=html --cov-report=term-missing"

[tool.ruff]
line-length = 100
target-version = "py39"
select = ["E", "F", "I", "N", "W", "B", "C4", "UP"]
ignore = ["E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
]

[tool.coverage.run]
source = ["DATABASE_CORE"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
